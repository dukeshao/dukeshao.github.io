{
    "version": "https://jsonfeed.org/version/1",
    "title": "你的名字 • All posts by \"c_javascript\" category",
    "description": "",
    "home_page_url": "https://dukeshao.com",
    "items": [
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/Canvas/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/Canvas/",
            "title": "Canvas",
            "date_published": "2022-07-12T22:59:07.000Z",
            "content_html": "<h2 id=\"canvas简介\"><a class=\"markdownIt-Anchor\" href=\"#canvas简介\">#</a> canvas 简介</h2>\n<ul>\n<li>是 HTML5 提供的一种新标签</li>\n<li>是一个矩形区域的画布，可以用 JavaScript 在上面绘画，控制其每一个像素，本身不具备绘图功能。</li>\n<li>拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</li>\n</ul>\n<p>使用：</p>\n<pre><code>&lt;canvas width=&quot;600&quot; height=&quot;600&quot;&gt;你的浏览器不支持canvas，请升级浏览器&lt;/canvas&gt;\n</code></pre>\n<h2 id=\"canvas用途\"><a class=\"markdownIt-Anchor\" href=\"#canvas用途\">#</a> canvas 用途</h2>\n<ul>\n<li>游戏：canvas 在基于 Web 的图像显示方面比 Flash 更加立体、更加精巧，canvas 游戏在流畅度和跨平台方面更牛。</li>\n<li>可视化数据。数据图表话，比如：百度的 echart</li>\n<li>banner 广告：Flash 曾经辉煌的时代，智能手机还未曾出现。现在以及未来的智能机时代，HTML5 技术能够在 banner 广告上发挥巨大作用，用 Canvas 实现动态的广告效果再合适不过。</li>\n</ul>\n<h3 id=\"canvas标签语法和属性\"><a class=\"markdownIt-Anchor\" href=\"#canvas标签语法和属性\">#</a> canvas 标签语法和属性</h3>\n<ol>\n<li>可以设置 width 和 height 属性，但是属性值单位必须是 px，否则忽略，默认 300*150px</li>\n<li>不要用 CSS 控制它的宽和高，会造成图片拉伸，</li>\n<li>js 重新设置 canvas 标签的宽高属性会让画布擦除所有的内容。</li>\n<li>可以给 canvas 画布设置背景色</li>\n</ol>\n<h3 id=\"canvas坐标系\"><a class=\"markdownIt-Anchor\" href=\"#canvas坐标系\">#</a> canvas 坐标系</h3>\n<p>canvas 坐标系，从最左上角 0,0 开始。x 向右增大， y 向下增大</p>\n<img data-src=\"/2022/07/13/C_Javascript/Canvas/canvas-x-y.png\" class=\"\" title=\"canvas坐标系\">\n<h2 id=\"canvas-api\"><a class=\"markdownIt-Anchor\" href=\"#canvas-api\">#</a> Canvas API</h2>\n<h3 id=\"绘图上下文context\"><a class=\"markdownIt-Anchor\" href=\"#绘图上下文context\">#</a> 绘图上下文 context</h3>\n<p>上下文：工具包，是所有的绘制操作 api 的入口或者集合</p>\n<ol>\n<li>canvas 自身无法绘制任何内容。Canvas 的绘图是使用 JavaScript 操作的。</li>\n<li>context 对象就是 JavaScript 操作 Canvas 的接口</li>\n<li>使用 getContext (‘2d’) 来获取 2D 绘图上下文。</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'canvas'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意：2d 小写， 3d：webgl</span></pre></td></tr></table></figure><h3 id=\"绘制图形\"><a class=\"markdownIt-Anchor\" href=\"#绘制图形\">#</a> 绘制图形</h3>\n<h4 id=\"属性\"><a class=\"markdownIt-Anchor\" href=\"#属性\">#</a> 属性</h4>\n<ul>\n<li>lineWidth     设置线宽</li>\n<li>strokeStyle   设置描边样式（默认黑色）</li>\n<li>fillStyle     设置填充样式（默认黑色）</li>\n</ul>\n<h4 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\">#</a> 方法</h4>\n<ul>\n<li>\n<p>moveTo (x,y)   设置绘制路径的起点（移动画笔位置）</p>\n</li>\n<li>\n<p>lineTo (x,y)   画线</p>\n</li>\n<li>\n<p>closePath ()   闭合路径，必须闭合路径才能成功填充</p>\n</li>\n<li>\n<p>beginPath ()   开启一个新状态，基于之前的状态开启新的状态，新的状态会保持之前的设置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">beginPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 开启新的状态后，当设置新的值时，只会作用于当前状态，不会影响之前的状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ctx<span class=\"token punctuation\">.</span>lindeWidth <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ctx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">'# ddd'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>rect (x,y,width,height) 绘制矩形路径<br>\n x, y 是矩形左上角坐标， width 和 height 都是以像素计（下同）</p>\n</li>\n</ul>\n<blockquote>\n<p>PS: rect 方法只是规划了矩形的路径，并没有填充和描边</p>\n</blockquote>\n<ul>\n<li>strokeRect (x,y,width,height)  绘制描边矩形</li>\n<li>fillRect (x,y,width,height)    绘制填充矩形</li>\n<li>stroke ()      描边</li>\n<li>fill ()        填充，该方法会自动闭合路径</li>\n<li>clearRect (x,y,width,height)   清除矩形区域，</li>\n</ul>\n<blockquote>\n<p>PS: 重新设置 canvas 的宽 / 高也能达到清空的效果</p>\n</blockquote>\n<ul>\n<li>arc (x,y,radius,startAngle,endAngle,counterclockwise)   画圆弧 / 画圆\n<ul>\n<li>x,y：圆心坐标。</li>\n<li>radius：半径大小。</li>\n<li>startAngle: 绘制开始的角度（x 轴为 0 度）。</li>\n<li>endAngel: 结束的角度，注意是弧度。</li>\n<li>counterclockwise：是否是逆时针。true 是逆时针，false：顺时针</li>\n</ul>\n</li>\n</ul>\n<pre><code>弧度和角度的转换公式： rad = deg*Math.PI/180;\n在Math提供的方法中sin、cos等都使用的弧度 \n</code></pre>\n<p>** 绘图步骤（5 步）：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>、获得画布</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> canvas  <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'cavsElem'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">2</span>、获得canvas上下文</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'2d'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">3</span>、绘制路径</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置绘制起点（移动画笔位置）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token number\">4</span>、设置样式</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 设置线宽</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>lineWidth <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 设置描边样式（默认黑色）</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>strokeStyle <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 设置填充样式（默认黑色）</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'# f60'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token number\">5</span>、描边<span class=\"token operator\">/</span>填充</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">stroke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token constant\">PS</span><span class=\"token function\">：fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>方法会自动闭合路径</pre></td></tr></table></figure><h3 id=\"绘制字体了解\"><a class=\"markdownIt-Anchor\" href=\"#绘制字体了解\">#</a> 绘制字体（了解）</h3>\n<h4 id=\"属性-2\"><a class=\"markdownIt-Anchor\" href=\"#属性-2\">#</a> 属性</h4>\n<ul>\n<li>\n<p>font      设置或返回文本内容的当前字体属性，语法与 CSS 相同</p>\n</li>\n<li>\n<p>textAlign 设置或返回文本内容的当前对齐方式</p>\n<ul>\n<li>start（默认）: 文本在指定的位置开始。</li>\n<li>end : 文本在指定的位置结束。</li>\n<li>center: 文本的中心被放置在指定的位置。</li>\n<li>left : 文本左对齐。</li>\n<li>right : 文本右对齐。</li>\n</ul>\n  <img data-src=\"/2022/07/13/C_Javascript/Canvas/textAsign.png\" class=\"\" title=\"textAlign示意图\">\n</li>\n<li>\n<p>textBaseline 设置或返回在绘制文本时使用的当前文本基线</p>\n<ul>\n<li>alphabetic ： 默认。文本基线是普通的字母基线。</li>\n<li>top ： 文本基线是 em 方框的顶端。。</li>\n<li>hanging ： 文本基线是悬挂基线。</li>\n<li>middle ： 文本基线是 em 方框的正中。</li>\n<li>ideographic： 文本基线是 em 基线。</li>\n<li>bottom ： 文本基线是 em 方框的底端</li>\n</ul>\n  <img data-src=\"/2022/07/13/C_Javascript/Canvas/font-baseline.png\" class=\"\" title=\"textBaseline示意图\">\n</li>\n</ul>\n<h4 id=\"方法-2\"><a class=\"markdownIt-Anchor\" href=\"#方法-2\">#</a> 方法</h4>\n<ul>\n<li>fillText (text,x,y)    填充字体</li>\n<li>strokeText (text,x,y)  描边字体\n<ul>\n<li>x,y：绘制文字起始坐标</li>\n</ul>\n</li>\n<li>measureText (text) 检测字体宽度，返回包含指定文本宽度的对象\n<ul>\n<li>text: 文本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"绘制图片\"><a class=\"markdownIt-Anchor\" href=\"#绘制图片\">#</a> 绘制图片</h3>\n<ul>\n<li>基本绘制图片的方式</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    参数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    x<span class=\"token punctuation\">,</span>y 绘制图片左上角的坐标，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    img是绘制图片的dom对象。</pre></td></tr></table></figure><ul>\n<li>在画布上绘制图像，并规定图像的宽度和高度</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>width<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    参数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    width 绘制图片的宽度， </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    height：绘制图片的高度</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    如果指定宽高，最好成比例，不然图片会被拉伸</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    等比公式： height <span class=\"token operator\">=</span> 原高度<span class=\"token operator\">*</span>width<span class=\"token operator\">/</span>原宽度<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>图片裁剪，并把裁剪完成后的那部分图片绘制到画布上</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">drawImage</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span>sx<span class=\"token punctuation\">,</span>sy<span class=\"token punctuation\">,</span>swidth<span class=\"token punctuation\">,</span>sheight<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>width<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    参数：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sx<span class=\"token punctuation\">,</span>sy 裁剪的左上角坐标，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    swidth：裁剪图片的宽度。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">sheight</span><span class=\"token operator\">:</span>裁剪的高度</pre></td></tr></table></figure><h3 id=\"设置阴影了解\"><a class=\"markdownIt-Anchor\" href=\"#设置阴影了解\">#</a> 设置阴影（了解）</h3>\n<ul>\n<li>shadowColor ： 设置或返回用于阴影的颜色</li>\n<li>shadowBlur ： 设置或返回用于阴影的模糊级别，数值越高，模糊程度越大 （默认为 0，不模糊）</li>\n<li>shadowOffsetX： 设置或返回阴影距形状的水平距离</li>\n<li>shadowOffsetY： 设置或返回阴影距形状的垂直距离</li>\n</ul>\n<p>示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> <span class=\"token string\">'# fc0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>shadowColor <span class=\"token operator\">=</span> <span class=\"token string\">'# 333'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>shadowBlur <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>shadowOffsetX <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>shadowOffsetY <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"创建渐变样式了解\"><a class=\"markdownIt-Anchor\" href=\"#创建渐变样式了解\">#</a> 创建渐变样式（了解）</h3>\n<h4 id=\"线性渐变\"><a class=\"markdownIt-Anchor\" href=\"#线性渐变\">#</a> 线性渐变</h4>\n<p>线性渐变是一个对象</p>\n<ul>\n<li>\n<p>语法：ctx.createLinearGradient (x0,y0,x1,y1);<br>\n 参数：x0,y0 起始坐标，x1,y1 结束坐标</p>\n</li>\n<li>\n<p>addColorStop(stop,color)</p>\n<ul>\n<li>stop：介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置</li>\n<li>color：颜色值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建线性渐变的对象，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> grd<span class=\"token operator\">=</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createLinearGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">170</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 添加一个渐变颜色，</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 参数 1：0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 参数 2：具体颜色</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    grd<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 添加一个渐变颜色</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    grd<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"white\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 关键点，把渐变设置到 填充的样式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span>grd<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"径向渐变\"><a class=\"markdownIt-Anchor\" href=\"#径向渐变\">#</a> 径向渐变</h4>\n<ul>\n<li>ctx.createRadialGradient(x0,y0,r0,x1,y1,r1);\n<ul>\n<li>x0: 渐变的开始圆的 x 坐标</li>\n<li>y0: 渐变的开始圆的 y 坐标</li>\n<li>r0: 开始圆的半径</li>\n<li>x1: 渐变的结束圆的 x 坐标</li>\n<li>y1: 渐变的结束圆的 y 坐标</li>\n<li>r1: 结束圆的半径</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> rlg <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createRadialGradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 添加一个渐变颜色</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rlg<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'# ccc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rlg<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">.4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'# efefef'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    rlg<span class=\"token punctuation\">.</span><span class=\"token function\">addColorStop</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'# fff'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置 填充样式为延续渐变的样式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> rlg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"绘制背景图了解\"><a class=\"markdownIt-Anchor\" href=\"#绘制背景图了解\">#</a> 绘制背景图（了解）</h3>\n<p>ctx.createPattern (img,repeat) 方法在指定的方向内重复指定的元素了解</p>\n<ul>\n<li>参数一：设置平铺背景的图片的 DOM 节点，</li>\n<li>参数二：背景平铺的方式。\n<ul>\n<li>image ： 规定要使用的图片、画布或视频元素。</li>\n<li>repeat ： 默认。该模式在水平和垂直方向重复。</li>\n<li>repeat-x ： 该模式只在水平方向重复。</li>\n<li>repeat-y ： 该模式只在垂直方向重复。</li>\n<li>no-repeat： 该模式只显示一次（不重复）。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> ctx<span class=\"token operator\">=</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2d\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> img<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lamp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> pat<span class=\"token operator\">=</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">createPattern</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span><span class=\"token string\">\"repeat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span>fillStyle<span class=\"token operator\">=</span>pat<span class=\"token punctuation\">;</span><span class=\"token comment\">//  把背景图设置给填充的样式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"画布变换\"><a class=\"markdownIt-Anchor\" href=\"#画布变换\">#</a> 画布变换</h3>\n<blockquote>\n<p>注意：画布变换仅仅是改变画布状态，不会影响之前画布上的内容</p>\n</blockquote>\n<ul>\n<li>\n<p>缩放<br>\n scale (scaleWidth,scaleHeight) 方法缩放当前绘图，参数为 0~1 的值</p>\n</li>\n<li>\n<p>位移画布<br>\n translate (x,y) 方法重新映射画布上的 (0,0) 位置</p>\n</li>\n<li>\n<p>旋转<br>\n rotate (radian) 方法旋转当前的绘图，注意参数是弧度</p>\n</li>\n</ul>\n<h3 id=\"绘制环境保存和还原\"><a class=\"markdownIt-Anchor\" href=\"#绘制环境保存和还原\">#</a> 绘制环境保存和还原</h3>\n<ul>\n<li>\n<p>ctx.save () 保存当前环境的状态<br>\n可以把当前绘制环境 context 保存到缓存中。</p>\n</li>\n<li>\n<p>ctx.restore () 返回之前保存过的路径状态和属性<br>\n获取最近通过 save () 方法缓存的 context</p>\n</li>\n</ul>\n<h3 id=\"保存base64编码图片\"><a class=\"markdownIt-Anchor\" href=\"#保存base64编码图片\">#</a> 保存 base64 编码图片</h3>\n<ul>\n<li>toDataURL(type, encoderOptions);\n<ul>\n<li>type，设置输出的类型，比如 image/png image/jpeg 等</li>\n<li>encoderOptions：0-1 之间的数字，用于标识输出图片的品质</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>PS: 必须在服务器环境下使用</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> dataURL <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">toDataURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将画布的内容赋值给图片的 src 属性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 下载</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 下载后的问题名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> filename <span class=\"token operator\">=</span> <span class=\"token string\">'xxx'</span> <span class=\"token operator\">+</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 创建 a 标签用于下载图片（必须有 download 属性）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">var</span> save_link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    save_link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> dataURL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    save_link<span class=\"token punctuation\">.</span>download <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 自定义事件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">var</span> event <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MouseEvents'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    event<span class=\"token punctuation\">.</span><span class=\"token function\">initMouseEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    save_link<span class=\"token punctuation\">.</span><span class=\"token function\">dispatchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"贝塞尔曲线了解\"><a class=\"markdownIt-Anchor\" href=\"#贝塞尔曲线了解\">#</a> 贝塞尔曲线（了解）</h3>\n<h4 id=\"二次方曲线\"><a class=\"markdownIt-Anchor\" href=\"#二次方曲线\">#</a> 二次方曲线</h4>\n<p>quadraticCurveTo(cpx,cpy,x,y)</p>\n<ul>\n<li>cpx： 贝塞尔控制点的 x 坐标</li>\n<li>cpy： 贝塞尔控制点的 y 坐标</li>\n<li>x ： 结束点的 x 坐标</li>\n<li>y ： 结束点的 y 坐标<img data-src=\"/2022/07/13/C_Javascript/Canvas/quadratic.png\" class=\"\" title=\"二次方曲线示意图\">\n</li>\n</ul>\n<h4 id=\"贝塞尔曲线\"><a class=\"markdownIt-Anchor\" href=\"#贝塞尔曲线\">#</a> 贝塞尔曲线</h4>\n<p>bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y)</p>\n<blockquote>\n<p>提示：三次贝塞尔曲线需要三个点。前两个点是用于三次贝塞尔计算中的控制点，第三个点是曲线的结束点</p>\n</blockquote>\n<ul>\n<li>cp1x： 第一个贝塞尔控制点的 x 坐标</li>\n<li>cp1y： 第一个贝塞尔控制点的 y 坐标</li>\n<li>cp2x： 第二个贝塞尔控制点的 x 坐标</li>\n<li>cp2y： 第二个贝塞尔控制点的 y 坐标</li>\n<li>x: 结束点的 x 坐标</li>\n<li>y: 结束点的 y 坐标<img data-src=\"/2022/07/13/C_Javascript/Canvas/bezier.png\" class=\"\" title=\"贝塞尔曲线示意图\">\n</li>\n</ul>\n<h2 id=\"canvas应用\"><a class=\"markdownIt-Anchor\" href=\"#canvas应用\">#</a> Canvas 应用</h2>\n<ul>\n<li>Echarts</li>\n<li>Highcharts</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/WEB%20%E7%BB%84%E4%BB%B6%E6%A0%87%E5%87%86/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/WEB%20%E7%BB%84%E4%BB%B6%E6%A0%87%E5%87%86/",
            "title": "WEB 组件标准",
            "date_published": "2022-07-12T22:59:06.000Z",
            "content_html": "<h2 id=\"web-组件标准\"><a class=\"markdownIt-Anchor\" href=\"#web-组件标准\">#</a> WEB 组件标准</h2>\n<p>四大 Web 组件标准：HTML Template、Shadow DOM、Custom Elements、HTML Imports</p>\n<p>实际上 HTML Imports 已经被废弃了，所以变成 &quot;三大&quot; 了</p>\n<h2 id=\"一-html-template\"><a class=\"markdownIt-Anchor\" href=\"#一-html-template\">#</a> 一、HTML Template</h2>\n<p>概念：相信很多人都有所耳闻，简单的讲也就是 HTML5 中的  <code>&lt;template&gt;</code>  标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。 <code>&lt;template&gt;</code>  就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。</p>\n<h2 id=\"二-shadow-dom\"><a class=\"markdownIt-Anchor\" href=\"#二-shadow-dom\">#</a> 二、Shadow DOM</h2>\n<p>概念：Shadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。</p>\n<h2 id=\"三-custom-elements\"><a class=\"markdownIt-Anchor\" href=\"#三-custom-elements\">#</a> 三、Custom Elements</h2>\n<p>概念：Custom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件</p>\n<h2 id=\"四-html-imports废弃\"><a class=\"markdownIt-Anchor\" href=\"#四-html-imports废弃\">#</a> 四、HTML Imports (废弃)</h2>\n<p>1. 概念：HTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持</p>\n<p>2.MIME 类型：MIME 的全称是 Multipurpose Internet Mail Extensions，即多用途互联网邮件扩展类型。</p>\n<p>这是 HTTP 协议中用来定义文档性质及格式的标准。IETF RFC 6838，对 HTTP 传输内容类型进行了全面定义。而 IANA (互联网号码分配机构) 是负责管理所有标准 MIME 类型的官方机构。可以在这里) 找到所有的标准 MIME。</p>\n<p>服务器通过 MIME 告知响应内容类型，而浏览器则通过 MIME 类型来确定如何处理文档。</p>\n",
            "tags": []
        },
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/IndexedDB/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/IndexedDB/",
            "title": "IndexedDB",
            "date_published": "2022-07-12T22:59:05.000Z",
            "content_html": "<h2 id=\"indexeddb\"><a class=\"markdownIt-Anchor\" href=\"#indexeddb\">#</a> IndexedDB</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取 indexedDB 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> indexedDB <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>indexedDB <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>webkitIndexedDB <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>mozIndexedDB <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>msIndexedDB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> timestamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 打开数据库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yuhun\"</span><span class=\"token punctuation\">,</span> timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 使用时间戳当做版本号，每次打开数据库都可以触发 onupgradeneeded 事件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> fileName <span class=\"token operator\">=</span> <span class=\"token string\">\"雀之灵_招摇啊_20200411_2354\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onupgradeneeded</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> db <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>db<span class=\"token punctuation\">.</span>objectStoreNames<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我需要创建一个新的存储对象\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">let</span> objectStore <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectStore</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token literal-property property\">keyPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"御魂ID\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token literal-property property\">autoIncrement</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 指定可以被索引的字段，unique 字段是否唯一</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"御魂ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"御魂ID\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">m</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据库版本更改为:'</span> <span class=\"token operator\">+</span> timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/ES6_10/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/ES6_10/",
            "title": "ES6-10",
            "date_published": "2022-07-12T22:59:04.000Z",
            "content_html": "<h2 id=\"一-es6-10新特性一览\"><a class=\"markdownIt-Anchor\" href=\"#一-es6-10新特性一览\">#</a> 一、ES6-10 新特性一览</h2>\n<blockquote>\n<p>ES 全称 ECMAScript，ECMAScript 是 ECMA 制定的标准化脚本语言。目前 JavaScript 使用的 ECMAScript 版本为 ECMA-417。关于 ECMA 的最新资讯可以浏览 ECMA news 查看。</p>\n</blockquote>\n<p>ECMA 规范最终由 TC39 敲定。TC39 由包括浏览器厂商在内的各方组成，他们开会推动 JavaScript 提案沿着一条严格的发展道路前进。 从提案到入选 ECMA 规范主要有以下几个阶段：</p>\n<ul>\n<li>Stage 0: strawman—— 最初想法的提交。</li>\n<li>Stage 1: proposal（提案）—— 由 TC39 至少一名成员倡导的正式提案文件，该文件包括 API 事例。</li>\n<li>Stage 2: draft（草案）—— 功能规范的初始版本，该版本包含功能规范的两个实验实现。</li>\n<li>Stage 3: candidate（候选）—— 提案规范通过审查并从厂商那里收集反馈</li>\n<li>Stage 4: finished（完成）—— 提案准备加入 ECMAScript，但是到浏览器或者 Nodejs 中可能需要更长的时间。</li>\n</ul>\n<h2 id=\"二-es6新特性2015\"><a class=\"markdownIt-Anchor\" href=\"#二-es6新特性2015\">#</a> 二、ES6 新特性（2015）</h2>\n<p>ES6 的特性比较多，在 ES5 发布近 6 年（2009-11 至 2015-6）之后才将其标准化。两个发布版本之间时间跨度很大，所以 ES6 中的特性比较多。 在这里列举几个常用的：</p>\n<ul>\n<li>类</li>\n<li>模块化</li>\n<li>箭头函数</li>\n<li>函数参数默认值</li>\n<li>模板字符串</li>\n<li>解构赋值</li>\n<li>延展操作符</li>\n<li>对象属性简写</li>\n<li>Promise</li>\n<li>Let 与 Const</li>\n</ul>\n<h3 id=\"1类class\"><a class=\"markdownIt-Anchor\" href=\"#1类class\">#</a> 1. 类（class）</h3>\n<p>对熟悉 Java，object-c，c# 等纯面向对象语言的开发者来说，都会对 class 有一种特殊的情怀。ES6 引入了 class（类），让 JavaScript 的面向对象编程变得更加简单和易于理解。</p>\n<pre><code>  class Animal &#123;\n    constructor(name,color) &#123;      this.name = name;      this.color = color;    &#125;\n    toString() &#123;      console.log('name:' + this.name + ',color:' + this.color);\n    &#125;  &#125;\n var animal = new Animal('dog','white'); animal.toString();\n console.log(animal.hasOwnProperty('name'));  console.log(animal.hasOwnProperty('toString'));  console.log(animal.__proto__.hasOwnProperty('toString')); \n class Cat extends Animal &#123;  constructor(action) &#123;\n    // 如果没有置顶consructor,默认带super函数的constructor将会被添加、    super('cat','white');    this.action = action;  &#125;  toString() &#123;    console.log(super.toString());  &#125; &#125;\n var cat = new Cat('catch') cat.toString();\n\n console.log(cat instanceof Cat);  console.log(cat instanceof Animal); \n</code></pre>\n<h3 id=\"2模块化module\"><a class=\"markdownIt-Anchor\" href=\"#2模块化module\">#</a> 2. 模块化 (Module)</h3>\n<p>ES5 不支持原生的模块化，在 ES6 中模块作为重要的组成部分被添加进来。模块的功能主要由 export 和 import 组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过 import 来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。</p>\n<h4 id=\"导出export\"><a class=\"markdownIt-Anchor\" href=\"#导出export\">#</a> 导出 (export)</h4>\n<p>ES6 允许在一个模块中使用 export 来导出多个变量或函数。</p>\n<p><strong>导出变量</strong></p>\n<pre><code>export var name = 'Rainbow'\n</code></pre>\n<blockquote>\n<p>心得：ES6 不仅支持变量的导出，也支持常量的导出。  <code>export const sqrt =Math.sqrt;//导出常量</code></p>\n</blockquote>\n<p>ES6 将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。</p>\n<pre><code> var name = 'Rainbow'; var age = '24'; export &#123;name, age&#125;;\n</code></pre>\n<p><strong>导出函数</strong></p>\n<pre><code>export function myModule(someArg) &#123;  return someArg;&#125;  \n</code></pre>\n<h4 id=\"导入import\"><a class=\"markdownIt-Anchor\" href=\"#导入import\">#</a> 导入 (import)</h4>\n<p>定义好模块的输出以后就可以在另外一个模块通过 import 引用。</p>\n<pre><code>import &#123;myModule&#125; from 'myModule';import &#123;name,age&#125; from 'test';\n</code></pre>\n<blockquote>\n<p>心得：一条 import 语句可以同时导入默认函数和其它变量。  <code>importdefaultMethod, &#123; otherMethod &#125; from 'xxx.js';</code></p>\n</blockquote>\n<h3 id=\"3箭头arrow函数\"><a class=\"markdownIt-Anchor\" href=\"#3箭头arrow函数\">#</a> 3. 箭头（Arrow）函数</h3>\n<p>这是 ES6 中最令人激动的特性之一。  <code>=&gt;</code>  不只是关键字 function 的简写，它还带来了其它好处。箭头函数与包围它的代码共享同一个  <code>this</code> , 能帮你很好的解决 this 的指向问题。有经验的 JavaScript 开发者都熟悉诸如  <code>var self = this;</code>  或  <code>var that =this</code>  这种引用外围 this 的模式。但借助  <code>=&gt;</code> ，就不需要这种模式了。</p>\n<h4 id=\"箭头函数的结构\"><a class=\"markdownIt-Anchor\" href=\"#箭头函数的结构\">#</a> 箭头函数的结构</h4>\n<p>箭头函数的箭头 =&gt; 之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过 return 来返回值，否则返回的是 undefined）。</p>\n<pre><code>()=&gt;1v=&gt;v+1(a,b)=&gt;a+b()=&gt;&#123;    alert(&quot;foo&quot;);&#125;e=&gt;&#123;    if (e == 0)&#123;        return 0;    &#125;    return 1000/e;&#125;\n</code></pre>\n<blockquote>\n<p>心得：不论是箭头函数还是 bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。</p>\n</blockquote>\n<h4 id=\"卸载监听器时的陷阱\"><a class=\"markdownIt-Anchor\" href=\"#卸载监听器时的陷阱\">#</a> 卸载监听器时的陷阱</h4>\n<blockquote>\n<p><strong>错误的做法</strong></p>\n</blockquote>\n<pre><code>class PauseMenu extends React.Component&#123;    componentWillMount()&#123;        AppStateIOS.addEventListener('change', this.onAppPaused.bind(this));    &#125;    componentWillUnmount()&#123;        AppStateIOS.removeEventListener('change', this.onAppPaused.bind(this));    &#125;    onAppPaused(event)&#123;    &#125;&#125;\n</code></pre>\n<blockquote>\n<p><strong>正确的做法</strong></p>\n</blockquote>\n<pre><code>class PauseMenu extends React.Component&#123;    constructor(props)&#123;        super(props);        this._onAppPaused = this.onAppPaused.bind(this);    &#125;    componentWillMount()&#123;        AppStateIOS.addEventListener('change', this._onAppPaused);    &#125;    componentWillUnmount()&#123;        AppStateIOS.removeEventListener('change', this._onAppPaused);    &#125;    onAppPaused(event)&#123;    &#125;&#125;\n</code></pre>\n<p>除上述的做法外，我们还可以这样做：</p>\n<pre><code>class PauseMenu extends React.Component&#123;    componentWillMount()&#123;        AppStateIOS.addEventListener('change', this.onAppPaused);    &#125;    componentWillUnmount()&#123;        AppStateIOS.removeEventListener('change', this.onAppPaused);    &#125;    onAppPaused = (event) =&gt; &#123;\n    &#125;&#125;\n</code></pre>\n<blockquote>\n<p>需要注意的是：不论是 bind 还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。</p>\n</blockquote>\n<h3 id=\"4函数参数的默认值\"><a class=\"markdownIt-Anchor\" href=\"#4函数参数的默认值\">#</a> 4. 函数参数的默认值</h3>\n<p>ES6 支持在定义函数的时候为其设置默认值：</p>\n<pre><code>function foo(height = 50, color = 'red')&#123;\n&#125;\n</code></pre>\n<blockquote>\n<p>不使用默认值：</p>\n</blockquote>\n<pre><code>function foo(height, color)&#123;    var height = height || 50;    var color = color || 'red';\n&#125;\n</code></pre>\n<p>这样写一般没问题，但当  <code>参数的布尔值为false</code>  时，就会有问题了。比如，我们这样调用 foo 函数：</p>\n<pre><code>foo(0, &quot;&quot;)\n</code></pre>\n<p>因为  <code>0的布尔值为false</code> ，这样 height 的取值将是 50。同理 color 的取值为‘red’。</p>\n<p>所以说，  <code>函数参数默认值</code> 不仅能是代码变得更加简洁而且能规避一些问题。</p>\n<h3 id=\"5模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#5模板字符串\">#</a> 5. 模板字符串</h3>\n<p>ES6 支持  <code>模板字符串</code> ，使得字符串的拼接更加的简洁、直观。</p>\n<blockquote>\n<p>不使用模板字符串：</p>\n</blockquote>\n<pre><code>var name = 'Your name is ' + first + ' ' + last + '.'\n</code></pre>\n<blockquote>\n<p>使用模板字符串：</p>\n</blockquote>\n<pre><code>var name = `Your name is $&#123;first&#125; $&#123;last&#125;.`\n</code></pre>\n<p>在 ES6 中通过  <code>$&#123;&#125;</code>  就可以完成字符串的拼接，只需要将变量放在大括号之中。</p>\n<p>解构赋值语法是 JavaScript 的一种表达式，可以方便的从数组或者对象中快速提取值赋给定义的变量。</p>\n<h4 id=\"获取数组中的值\"><a class=\"markdownIt-Anchor\" href=\"#获取数组中的值\">#</a> 获取数组中的值</h4>\n<p>从数组中获取值并赋值到变量中，变量的顺序与数组中对象顺序对应。</p>\n<pre><code>var foo = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;];\nvar [one, two, three] = foo;console.log(one); console.log(two); console.log(three); \n//如果你要忽略某些值，你可以按照下面的写法获取你想要的值var [first, , , last] = foo;console.log(first); console.log(last); \n//你也可以这样写var a, b; \n[a, b] = [1, 2];console.log(a); console.log(b); \n</code></pre>\n<p>如果没有从数组中的获取到值，你可以为变量设置一个默认值。</p>\n<pre><code>var a, b;\n[a=5, b=7] = [1];console.log(a); console.log(b); \n</code></pre>\n<p>通过解构赋值可以方便的交换两个变量的值。</p>\n<pre><code>var a = 1;var b = 3;\n[a, b] = [b, a];console.log(a); console.log(b); \n</code></pre>\n<h4 id=\"获取对象中的值\"><a class=\"markdownIt-Anchor\" href=\"#获取对象中的值\">#</a> 获取对象中的值</h4>\n<pre><code>const student = &#123;  name:'Ming',  age:'18',  city:'Shanghai'  &#125;;\nconst &#123;name,age,city&#125; = student;console.log(name); console.log(age); console.log(city); \n</code></pre>\n<h3 id=\"7延展操作符spread-operator\"><a class=\"markdownIt-Anchor\" href=\"#7延展操作符spread-operator\">#</a> 7. 延展操作符 (Spread operator)</h3>\n<p><code>延展操作符...</code>  可以在函数调用 / 数组构造时，将数组表达式或者 string 在语法层面展开；还可以在构造对象时，将对象表达式按 key-value 的方式展开。</p>\n<h4 id=\"语法\"><a class=\"markdownIt-Anchor\" href=\"#语法\">#</a> 语法</h4>\n<blockquote>\n<p>函数调用：</p>\n</blockquote>\n<pre><code>myFunction(...iterableObj);\n</code></pre>\n<blockquote>\n<p>数组构造或字符串：</p>\n</blockquote>\n<pre><code>[...iterableObj, '4', ...'hello', 6];\n</code></pre>\n<blockquote>\n<p>构造对象时，进行克隆或者属性拷贝（ECMAScript 2018 规范新增特性）：</p>\n</blockquote>\n<pre><code>let objClone = &#123; ...obj &#125;;\n</code></pre>\n<h4 id=\"应用场景\"><a class=\"markdownIt-Anchor\" href=\"#应用场景\">#</a> 应用场景</h4>\n<blockquote>\n<p>在函数调用时使用延展操作符</p>\n</blockquote>\n<pre><code>function sum(x, y, z) &#123;  return x + y + z;&#125;const numbers = [1, 2, 3];\n\nconsole.log(sum.apply(null, numbers));\n\nconsole.log(sum(...numbers));\n</code></pre>\n<blockquote>\n<p>构造数组</p>\n</blockquote>\n<p>没有展开语法的时候，只能组合使用 push，splice，concat 等方法，来将已有数组元素变成新数组的一部分。有了展开语法，构造新数组会变得更简单、更优雅：</p>\n<pre><code>const stuendts = ['Jine','Tom']; const persons = ['Tony',... stuendts,'Aaron','Anna'];conslog.log(persions)\n</code></pre>\n<p>和参数列表的展开类似， <code>...</code>  在构造字数组时，可以在任意位置多次使用。</p>\n<blockquote>\n<p>数组拷贝</p>\n</blockquote>\n<pre><code>var arr = [1, 2, 3];var arr2 = [...arr]; arr2.push(4); console.log(arr2)\n</code></pre>\n<p>展开语法和 Object.assign () 行为一致，执行的都是浅拷贝 (只遍历一层)。</p>\n<blockquote>\n<p>连接多个数组</p>\n</blockquote>\n<pre><code>var arr1 = [0, 1, 2];var arr2 = [3, 4, 5];var arr3 = [...arr1, ...arr2];//等同于var arr4 = arr1.concat(arr2);\n</code></pre>\n<h4 id=\"在ecmascript-2018中延展操作符增加了对对象的支持\"><a class=\"markdownIt-Anchor\" href=\"#在ecmascript-2018中延展操作符增加了对对象的支持\">#</a> 在 ECMAScript 2018 中延展操作符增加了对对象的支持</h4>\n<pre><code>var obj1 = &#123; foo: 'bar', x: 42 &#125;;var obj2 = &#123; foo: 'baz', y: 13 &#125;;\nvar clonedObj = &#123; ...obj1 &#125;;\n\nvar mergedObj = &#123; ...obj1, ...obj2 &#125;;\n</code></pre>\n<p>javascript</p>\n<h4 id=\"在react中的应用\"><a class=\"markdownIt-Anchor\" href=\"#在react中的应用\">#</a> 在 React 中的应用</h4>\n<p>通常我们在封装一个组件时，会对外公开一些 props 用于实现功能。大部分情况下在外部使用都应显示的传递 props 。但是当传递大量的 props 时，会非常繁琐，这时我们可以使用  <code>...(延展操作符,用于取出参数对象的所有可遍历属性)</code>  来进行传递。</p>\n<h4 id=\"一般情况下我们应该这样写\"><a class=\"markdownIt-Anchor\" href=\"#一般情况下我们应该这样写\">#</a> 一般情况下我们应该这样写</h4>\n<pre><code>&lt;CustomComponent name ='Jine' age =&#123;21&#125; /&gt;\n</code></pre>\n<blockquote>\n<p>使用 … ，等同于上面的写法</p>\n</blockquote>\n<pre><code>const params = &#123;    name: 'Jine',    age: 21&#125;&lt;CustomComponent &#123;...params&#125; /&gt;\n</code></pre>\n<blockquote>\n<p>配合解构赋值避免传入一些不需要的参数</p>\n</blockquote>\n<pre><code>var params = &#123;    name: '123',    title: '456',    type: 'aaa'&#125;\nvar &#123; type, ...other &#125; = params;\n&lt;CustomComponent type='normal' number=&#123;2&#125; &#123;...other&#125; /&gt;//等同于&lt;CustomComponent type='normal' number=&#123;2&#125; name='123' title='456' /&gt;\n</code></pre>\n<h3 id=\"8对象属性简写\"><a class=\"markdownIt-Anchor\" href=\"#8对象属性简写\">#</a> 8. 对象属性简写</h3>\n<p>在 ES6 中允许我们在设置一个对象的属性的时候不指定属性名。</p>\n<blockquote>\n<p>不使用 ES6</p>\n</blockquote>\n<pre><code>const name='Ming',age='18',city='Shanghai';\nconst student = &#123;    name:name,    age:age,    city:city&#125;;console.log(student);\n</code></pre>\n<p>对象中必须包含属性和值，显得非常冗余。</p>\n<blockquote>\n<p>使用 ES6</p>\n</blockquote>\n<pre><code>const name='Ming',age='18',city='Shanghai';\nconst student = &#123;    name,    age,    city&#125;;console.log(student);\n</code></pre>\n<p>对象中直接写变量，非常简洁。</p>\n<h3 id=\"9promise\"><a class=\"markdownIt-Anchor\" href=\"#9promise\">#</a> 9.Promise</h3>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案 callback 更加的优雅。它最早由社区提出和实现的，ES6 将其写进了语言标准，统一了用法，原生提供了 Promise 对象。</p>\n<blockquote>\n<p>不使用 ES6</p>\n</blockquote>\n<p>嵌套两个 setTimeout 回调函数：</p>\n<pre><code>setTimeout(function()&#123;    console.log('Hello');     setTimeout(function()    &#123;        console.log('Hi');     &#125;, 1000);&#125;, 1000);\n</code></pre>\n<blockquote>\n<p>使用 ES6</p>\n</blockquote>\n<pre><code>var waitSecond = new Promise(function(resolve, reject)&#123;    setTimeout(resolve, 1000);&#125;);\nwaitSecond    .then(function()    &#123;      console.log(&quot;Hello&quot;);       return waitSecond;    &#125;)    .then(function()    &#123;        console.log(&quot;Hi&quot;);     &#125;);\n</code></pre>\n<p>上面的的代码使用两个 then 来进行异步编程串行化，避免了回调地狱：</p>\n<h3 id=\"10支持let与const\"><a class=\"markdownIt-Anchor\" href=\"#10支持let与const\">#</a> 10. 支持 let 与 const</h3>\n<p>在之前 JS 是没有块级作用域的，const 与 let 填补了这方便的空白，const 与 let 都是块级作用域。</p>\n<blockquote>\n<p>使用 var 定义的变量为函数级作用域：</p>\n</blockquote>\n<pre><code>&#123;  var a = 10;&#125;\nconsole.log(a); \n</code></pre>\n<blockquote>\n<p>使用 let 与 const 定义的变量为块级作用域：</p>\n</blockquote>\n<pre><code>&#123;  let a = 10;&#125;\nconsole.log(a); \n</code></pre>\n<h2 id=\"三-es7新特性2016\"><a class=\"markdownIt-Anchor\" href=\"#三-es7新特性2016\">#</a> 三、ES7 新特性（2016）</h2>\n<p>ES2016 添加了两个小的特性来说明标准化过程：</p>\n<ul>\n<li>数组 includes () 方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。</li>\n<li>a ** b 指数运算符，它与 Math.pow (a, b) 相同。</li>\n</ul>\n<h3 id=\"1arrayprototypeincludes\"><a class=\"markdownIt-Anchor\" href=\"#1arrayprototypeincludes\">#</a> 1.Array.prototype.includes()</h3>\n<p><code>includes()</code>  函数用来判断一个数组是否包含一个指定的值，如果包含则返回  <code>true</code> ，否则返回  <code>false</code> 。</p>\n<p><code>includes</code>  函数与  <code>indexOf</code>  函数很相似，下面两个表达式是等价的：</p>\n<pre><code>arr.includes(x)arr.indexOf(x) &gt;= 0\n</code></pre>\n<p>接下来我们来判断数字中是否包含某个元素：</p>\n<blockquote>\n<p>在 ES7 之前的做法</p>\n</blockquote>\n<p>使用  <code>indexOf()</code>  验证数组中是否存在某个元素，这时需要根据返回值是否为 - 1 来判断：</p>\n<pre><code>let arr = ['react', 'angular', 'vue'];\nif (arr.indexOf('react') !== -1)&#123;    console.log('react存在');&#125;\n</code></pre>\n<blockquote>\n<p>使用 ES7 的 includes ()</p>\n</blockquote>\n<p>使用 includes () 验证数组中是否存在某个元素，这样更加直观简单：</p>\n<pre><code>let arr = ['react', 'angular', 'vue'];\nif (arr.includes('react'))&#123;    console.log('react存在');&#125;\n</code></pre>\n<h3 id=\"2指数操作符\"><a class=\"markdownIt-Anchor\" href=\"#2指数操作符\">#</a> 2. 指数操作符</h3>\n<p>在 ES7 中引入了指数运算符  <code>**</code> ，  <code>**</code>  具有与  <code>Math.pow(..)</code>  等效的计算结果。</p>\n<blockquote>\n<p>不使用指数操作符</p>\n</blockquote>\n<p>使用自定义的递归函数 calculateExponent 或者 Math.pow () 进行指数运算：</p>\n<pre><code>function calculateExponent(base, exponent)&#123;    if (exponent === 1)    &#123;        return base;    &#125;    else    &#123;        return base * calculateExponent(base, exponent - 1);    &#125;&#125;\nconsole.log(calculateExponent(2, 10)); console.log(Math.pow(2, 10)); \n</code></pre>\n<blockquote>\n<p>使用指数操作符</p>\n</blockquote>\n<p>使用指数运算符 **，就像 +、- 等操作符一样：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"四-es8新特性2017\"><a class=\"markdownIt-Anchor\" href=\"#四-es8新特性2017\">#</a> 四、ES8 新特性（2017）</h2>\n<ul>\n<li>async/await</li>\n<li><code>Object.values()</code></li>\n<li><code>Object.entries()</code></li>\n<li>String padding:  <code>padStart()</code>  和  <code>padEnd()</code> ，填充字符串达到当前长度</li>\n<li>函数参数列表结尾允许逗号</li>\n<li><code>Object.getOwnPropertyDescriptors()</code></li>\n<li><code>ShareArrayBuffer</code>  和  <code>Atomics</code>  对象，用于从共享内存位置读取和写入</li>\n</ul>\n<h3 id=\"1asyncawait\"><a class=\"markdownIt-Anchor\" href=\"#1asyncawait\">#</a> 1.async/await</h3>\n<p>ES2018 引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了  <code>next()</code>  方法返回一个 Promise。因此  <code>await</code>  可以和  <code>for...of</code>  循环一起使用，以串行的方式运行异步操作。例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2objectvalues\"><a class=\"markdownIt-Anchor\" href=\"#2objectvalues\">#</a> 2.Object.values()</h3>\n<p><code>Object.values()</code>  是一个与  <code>Object.keys()</code>  类似的新函数，但返回的是 Object 自身属性的所有值，不包括继承的值。</p>\n<p>假设我们要遍历如下对象  <code>obj</code>  的所有值：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>不使用 Object.values () :ES7</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> vals<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token operator\">=></span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>vals<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 Object.values () :ES8</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> values<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从上述代码中可以看出  <code>Object.values()</code>  为我们省去了遍历 key，并根据这些 key 获取 value 的步骤。</p>\n<h3 id=\"3objectentries\"><a class=\"markdownIt-Anchor\" href=\"#3objectentries\">#</a> 3.Object.entries()</h3>\n<p><code>Object.entries()</code>  函数返回一个给定对象自身可枚举属性的键值对的数组。</p>\n<p>接下来我们来遍历上文中的  <code>obj</code>  对象的所有属性的 key 和 value：</p>\n<blockquote>\n<p>不使用 Object.entries () :ES7</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key:'</span><span class=\"token operator\">+</span>key<span class=\"token operator\">+</span><span class=\"token string\">' value:'</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//key:b value:2</span></pre></td></tr></table></figure><blockquote>\n<p>使用 Object.entries () :ES8</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> value:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//key:b value:2</span></pre></td></tr></table></figure><h3 id=\"4string-padding\"><a class=\"markdownIt-Anchor\" href=\"#4string-padding\">#</a> 4.String padding</h3>\n<p>在 ES8 中 String 新增了两个实例函数  <code>String.prototype.padStart</code>  和  <code>String.prototype.padEnd</code> ，允许将空字符串或其他字符串添加到原始字符串的开头或结尾。</p>\n<blockquote>\n<p>String.padStart(targetLength,[padString])</p>\n</blockquote>\n<ul>\n<li>targetLength: 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li>\n<li>padString:(可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 &quot; &quot;。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0.0'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0.0'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>String.padEnd(targetLength,padString])</p>\n</blockquote>\n<ul>\n<li>targetLength: 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。</li>\n<li>padString:(可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 &quot; &quot;；</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0.0'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0.0'</span><span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"5函数参数列表结尾允许逗号\"><a class=\"markdownIt-Anchor\" href=\"#5函数参数列表结尾允许逗号\">#</a> 5. 函数参数列表结尾允许逗号</h3>\n<p>主要作用是方便使用 git 进行多人协作开发时修改同一个函数减少不必要的行变更。</p>\n<h3 id=\"6objectgetownpropertydescriptors\"><a class=\"markdownIt-Anchor\" href=\"#6objectgetownpropertydescriptors\">#</a> 6.Object.getOwnPropertyDescriptors()</h3>\n<p><code>Object.getOwnPropertyDescriptors()</code>  函数用来获取一个对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。</p>\n<blockquote>\n<p>函数原型：</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>返回  <code>obj</code>  对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Jine'</span><span class=\"token punctuation\">,</span>    <span class=\"token keyword\">get</span> <span class=\"token function\">age</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'18'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//   age: &#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//     enumerable: true,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//     set: undefined</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//   name: &#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//     enumerable: true,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//        writable:true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr></table></figure><h3 id=\"7sharedarraybuffer对象\"><a class=\"markdownIt-Anchor\" href=\"#7sharedarraybuffer对象\">#</a> 7.SharedArrayBuffer 对象</h3>\n<p>SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。</p>\n<pre><code>new SharedArrayBuffer(length)\n</code></pre>\n<h3 id=\"8atomics对象\"><a class=\"markdownIt-Anchor\" href=\"#8atomics对象\">#</a> 8.Atomics 对象</h3>\n<p>Atomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作。</p>\n<p>这些原子操作属于 Atomics 模块。与一般的全局对象不同，Atomics 不是构造函数，因此不能使用 new 操作符调用，也不能将其当作函数直接调用。Atomics 的所有属性和方法都是静态的（与 Math 对象一样）。</p>\n<p>多个共享内存的线程能够同时读写同一位置上的数据。原子操作会确保正在读或写的数据的值是符合预期的，即下一个原子操作一定会在上一个原子操作结束后才会开始，其操作过程不会中断。</p>\n<blockquote>\n<p>将指定位置上的数组元素与给定的值相加，并返回相加前该元素的值。</p>\n<p>将指定位置上的数组元素与给定的值相与，并返回与操作前该元素的值。</p>\n</blockquote>\n<ul>\n<li>Atomics.compareExchange()</li>\n</ul>\n<blockquote>\n<p>如果数组中指定的元素与给定的值相等，则将其更新为新的值，并返回该元素原先的值。</p>\n<p>将数组中指定的元素更新为给定的值，并返回该元素更新前的值。</p>\n<p>返回数组中指定元素的值。</p>\n<p>将指定位置上的数组元素与给定的值相或，并返回或操作前该元素的值。</p>\n<p>将数组中指定的元素设置为给定的值，并返回该值。</p>\n<p>将指定位置上的数组元素与给定的值相减，并返回相减前该元素的值。</p>\n<p>将指定位置上的数组元素与给定的值相异或，并返回异或操作前该元素的值。</p>\n</blockquote>\n<p>wait () 和 wake () 方法采用的是 Linux 上的 futexes 模型（fast user-space mutex，快速用户空间互斥量），可以让进程一直等待直到某个特定的条件为真，主要用于实现阻塞。</p>\n<blockquote>\n<p>检测数组中某个指定位置上的值是否仍然是给定值，是则保持挂起直到被唤醒或超时。返回值为 “ok”、“not-equal” 或 “time-out”。调用时，如果当前线程不允许阻塞，则会抛出异常（大多数浏览器都不允许在主线程中调用 wait ()）。</p>\n<p>唤醒等待队列中正在数组指定位置的元素上等待的线程。返回值为成功唤醒的线程数量。</p>\n<p>可以用来检测当前系统是否支持硬件级的原子操作。对于指定大小的数组，如果当前系统支持硬件级的原子操作，则返回 true；否则就意味着对于该数组，Atomics 对象中的各原子操作都只能用锁来实现。此函数面向的是技术专家。–&gt;</p>\n</blockquote>\n<h2 id=\"五-es9新特性2018\"><a class=\"markdownIt-Anchor\" href=\"#五-es9新特性2018\">#</a> 五、ES9 新特性（2018）</h2>\n<h3 id=\"1异步迭代\"><a class=\"markdownIt-Anchor\" href=\"#1异步迭代\">#</a> 1. 异步迭代</h3>\n<p>在  <code>async/await</code>  的某些时刻，你可能尝试在同步循环中调用异步函数。例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token keyword\">await</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码不会正常运行，下面这段同样也不会：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  array<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token keyword\">await</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码中，循环本身依旧保持同步，并在在内部异步函数之前全部调用完成。</p>\n<p>ES2018 引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了  <code>next()</code>  方法返回一个 Promise。因此  <code>await</code>  可以和  <code>for...of</code>  循环一起使用，以串行的方式运行异步操作。例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2promisefinally\"><a class=\"markdownIt-Anchor\" href=\"#2promisefinally\">#</a> 2.Promise.finally()</h3>\n<p>一个 Promise 调用链要么成功到达最后一个  <code>.then()</code> ，要么失败触发  <code>.catch()</code> 。在某些情况下，你想要在无论 Promise 运行成功还是失败，运行相同的代码，例如清除，删除对话，关闭数据库连接等。</p>\n<p><code>.finally()</code>  允许你指定最终的逻辑：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token function\">doSomething1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>doSomething2<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>doSomething3<span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3restspread-属性\"><a class=\"markdownIt-Anchor\" href=\"#3restspread-属性\">#</a> 3.Rest/Spread 属性</h3>\n<p>ES2015 引入了 Rest 参数和扩展运算符。三个点（…）仅用于数组。Rest 参数语法允许我们将一个不定数量的参数表示为一个数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">restParam</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">restParam</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>p3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// p2 = 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>展开操作符以相反的方式工作，将数组转换成可传递给函数的单独参数。例如  <code>Math.max()</code>  返回给定数字中的最大值：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span></pre></td></tr></table></figure><p>ES2018 为对象解构提供了和数组一样的 Rest 参数（）和展开操作符，一个简单的例子：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> myObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>x <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> myObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// x = &#123; b: 2, c: 3 &#125;</span></pre></td></tr></table></figure><p>或者你可以使用它给函数传递参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">restParam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>  <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>  <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">restParam</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>x <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// x = &#123; b: 2, c: 3 &#125;&#125;</span></pre></td></tr></table></figure><p>跟数组一样，Rest 参数只能在声明的结尾处使用。此外，它只适用于每个对象的顶层，如果对象中嵌套对象则无法适用。</p>\n<p>扩展运算符可以在其他对象内使用，例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">const</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>obj1<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">z</span><span class=\"token operator\">:</span> <span class=\"token number\">26</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以使用扩展运算符拷贝一个对象，像是这样  <code>obj2 = &#123;...obj1&#125;</code> ，但是 <strong>这只是一个对象的浅拷贝</strong>。另外，如果一个对象 A 的属性是对象 B，那么在克隆后的对象 cloneB 中，该属性指向对象 B。</p>\n<h3 id=\"4正则表达式命名捕获组\"><a class=\"markdownIt-Anchor\" href=\"#4正则表达式命名捕获组\">#</a> 4. 正则表达式命名捕获组</h3>\n<p>JavaScript 正则表达式可以返回一个匹配的对象 —— 一个包含匹配字符串的类数组，例如：以  <code>YYYY-MM-DD</code>  的格式解析日期：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span>  reDate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">([0-9]&#123;4&#125;)-([0-9]&#123;2&#125;)-([0-9]&#123;2&#125;)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-04-30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>   day    <span class=\"token operator\">=</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样的代码很难读懂，并且改变正则表达式的结构有可能改变匹配对象的索引。</p>\n<p>ES2018 允许命名捕获组使用符号  <code>?&lt;name&gt;</code> ，在打开捕获括号  <code>(</code> 后立即命名，示例如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span>  reDate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year>[0-9]&#123;4&#125;)-(?&lt;month>[0-9]&#123;2&#125;)-(?&lt;day>[0-9]&#123;2&#125;)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>  match  <span class=\"token operator\">=</span> reDate<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2018-04-30'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  year   <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span>    month  <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span>groups<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 04  day    = match.groups.day;</span></pre></td></tr></table></figure><p>任何匹配失败的命名组都将返回  <code>undefined</code> 。</p>\n<p>命名捕获也可以使用在  <code>replace()</code>  方法中。例如将日期转换为美国的 MM-DD-YYYY 格式：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span>  reDate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;year>[0-9]&#123;4&#125;)-(?&lt;month>[0-9]&#123;2&#125;)-(?&lt;day>[0-9]&#123;2&#125;)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      d <span class=\"token operator\">=</span> <span class=\"token string\">'2018-04-30'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      usDate <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'$&lt;month>-$&lt;day>-$&lt;year>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"5正则表达式反向断言\"><a class=\"markdownIt-Anchor\" href=\"#5正则表达式反向断言\">#</a> 5. 正则表达式反向断言</h3>\n<p>目前 JavaScript 在正则表达式中支持先行断言（lookahead）。这意味着匹配会发生，但不会有任何捕获，并且断言没有包含在整个匹配字段中。例如从价格中捕获货币符号：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span>  reLookahead <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\D(?=\\d+)</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>match <span class=\"token operator\">=</span> reLookahead<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ES2018 引入以相同方式工作但是匹配前面的反向断言（lookbehind），这样我就可以忽略货币符号，单纯的捕获价格的数字：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span>  reLookbehind <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;=\\D)\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>match <span class=\"token operator\">=</span> reLookbehind<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上是 <strong>肯定反向断言</strong>，非数字  <code>\\D</code>  必须存在。同样的，还存在 <strong>否定反向断言</strong>，表示一个值必须不存在，例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span>  reLookbehindNeg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(?&lt;!\\D)\\d+</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>match <span class=\"token operator\">=</span> reLookbehind<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$123.89'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> match<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"6正则表达式dotall模式\"><a class=\"markdownIt-Anchor\" href=\"#6正则表达式dotall模式\">#</a> 6. 正则表达式 dotAll 模式</h3>\n<p>正则表达式中点  <code>.</code>  匹配除回车外的任何单字符，标记  <code>s</code>  改变这种行为，允许行终止符的出现，例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hello.world</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">hello.world</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">s</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello\\nworld'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"7正则表达式-unicode-转义\"><a class=\"markdownIt-Anchor\" href=\"#7正则表达式-unicode-转义\">#</a> 7. 正则表达式 Unicode 转义</h3>\n<p>到目前为止，在正则表达式中本地访问 Unicode 字符属性是不被允许的。ES2018 添加了 Unicode 属性转义 —— 形式为  <code>\\p&#123;...&#125;</code>  和  <code>\\P&#123;...&#125;</code> ，在正则表达式中使用标记  <code>u</code>  (unicode) 设置，在  <code>\\p</code>  块儿内，可以以键值对的方式设置需要匹配的属性而非具体内容。例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> reGreekSymbol <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\p&#123;Script=Greek&#125;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">u</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>reGreekSymbol<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'π'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此特性可以避免使用特定 Unicode 区间来进行内容类型判断，提升可读性和可维护性。</p>\n<h3 id=\"8非转义序列的模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#8非转义序列的模板字符串\">#</a> 8. 非转义序列的模板字符串</h3>\n<p>之前，  <code>\\u</code>  开始一个 unicode 转义，  <code>\\x</code>  开始一个十六进制转义，  <code>\\</code>  后跟一个数字开始一个八进制转义。这使得创建特定的字符串变得不可能，例如 Windows 文件路径  <code>C:\\uuu\\xxx\\111</code> 。更多细节参考模板字符串。</p>\n<h2 id=\"六-es10新特性2019\"><a class=\"markdownIt-Anchor\" href=\"#六-es10新特性2019\">#</a> 六、ES10 新特性（2019）</h2>\n<ul>\n<li>行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与 JSON 匹配</li>\n<li>更加友好的 JSON.stringify</li>\n<li>新增了 Array 的  <code>flat()</code>  方法和  <code>flatMap()</code>  方法</li>\n<li>新增了 String 的  <code>trimStart()</code>  方法和  <code>trimEnd()</code>  方法</li>\n<li><code>Object.fromEntries()</code></li>\n<li><code>Symbol.prototype.description</code></li>\n<li><code>String.prototype.matchAll</code></li>\n<li><code>Function.prototype.toString()</code>  现在返回精确字符，包括空格和注释</li>\n<li>简化  <code>try &#123;&#125; catch &#123;&#125;</code> , 修改  <code>catch</code>  绑定</li>\n<li>新的基本数据类型  <code>BigInt</code></li>\n<li>globalThis</li>\n<li>import()</li>\n<li>Legacy RegEx</li>\n<li>私有的实例方法和访问器</li>\n</ul>\n<h3 id=\"1行分隔符u-2028和段分隔符u-2029符号现在允许在字符串文字中与json匹配\"><a class=\"markdownIt-Anchor\" href=\"#1行分隔符u-2028和段分隔符u-2029符号现在允许在字符串文字中与json匹配\">#</a> 1. 行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与 JSON 匹配</h3>\n<p>以前，这些符号在字符串文字中被视为行终止符，因此使用它们会导致 SyntaxError 异常。</p>\n<h3 id=\"2更加友好的-jsonstringify\"><a class=\"markdownIt-Anchor\" href=\"#2更加友好的-jsonstringify\">#</a> 2. 更加友好的 JSON.stringify</h3>\n<p>如果输入 Unicode 格式但是超出范围的字符，在原先 JSON.stringify 返回格式错误的 Unicode 字符串。现在实现了一个改变 JSON.stringify 的第 3 阶段提案，因此它为其输出转义序列，使其成为有效 Unicode（并以 UTF-8 表示）</p>\n<h3 id=\"3新增了array的-flat方法和-flatmap方法\"><a class=\"markdownIt-Anchor\" href=\"#3新增了array的-flat方法和-flatmap方法\">#</a> 3. 新增了 Array 的  <code>flat()</code>  方法和  <code>flatMap()</code>  方法</h3>\n<p><code>flat()</code>  和  <code>flatMap()</code>  本质上就是是归纳（reduce） 与 合并（concat）的操作。</p>\n<h4 id=\"arrayprototypeflat\"><a class=\"markdownIt-Anchor\" href=\"#arrayprototypeflat\">#</a> Array.prototype.flat()</h4>\n<p><code>flat()</code>  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>arr3<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 使用 Infinity 作为深度，展开任意深度的嵌套数组 arr3.flat (Infinity);</span></pre></td></tr></table></figure><ul>\n<li>其次，还可以利用  <code>flat()</code>  方法的特性来去除数组的空项</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>arr4<span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"arrayprototypeflatmap\"><a class=\"markdownIt-Anchor\" href=\"#arrayprototypeflatmap\">#</a> Array.prototype.flatMap()</h4>\n<p><code>flatMap()</code>  方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值 1 的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。 这里我们拿 map 方法与 flatMap 方法做一个比较。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 只会将 flatMap 中的函数返回的数组 “压平” 一层 arr1.flatMap (x => [[x * 2]]);</span></pre></td></tr></table></figure><h3 id=\"4新增了string的-trimstart方法和-trimend方法\"><a class=\"markdownIt-Anchor\" href=\"#4新增了string的-trimstart方法和-trimend方法\">#</a> 4. 新增了 String 的  <code>trimStart()</code>  方法和  <code>trimEnd()</code>  方法</h3>\n<p>新增的这两个方法很好理解，分别去除字符串首尾空白字符，这里就不用例子说声明了。</p>\n<h3 id=\"5-objectfromentries\"><a class=\"markdownIt-Anchor\" href=\"#5-objectfromentries\">#</a> 5.  <code>Object.fromEntries()</code></h3>\n<p><code>Object.entries()</code>  方法的作用是返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。</p>\n<p><strong>而 Object.fromEntries () 则是 Object.entries () 的反转。</strong></p>\n<p><code>Object.fromEntries()</code>  函数传入一个键值对的列表，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现 @iterator 方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类似数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。</p>\n<ul>\n<li>通过 Object.fromEntries， 可以将 Map 转化为 Object:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'baz'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 Object.fromEntries， 可以将 Array 转化为 Object:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"6-symbolprototypedescription\"><a class=\"markdownIt-Anchor\" href=\"#6-symbolprototypedescription\">#</a> 6.  <code>Symbol.prototype.description</code></h3>\n<p>通过工厂函数 Symbol（）创建符号时，您可以选择通过参数提供字符串作为描述：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sym <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以前，访问描述的唯一方法是将符号转换为字符串：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Symbol(The description)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在引入了 getter Symbol.prototype.description 以直接访问描述：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>sym<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">,</span> <span class=\"token string\">'The description'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"7-stringprototypematchall\"><a class=\"markdownIt-Anchor\" href=\"#7-stringprototypematchall\">#</a> 7.  <code>String.prototype.matchAll</code></h3>\n<p><code>matchAll()</code>  方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。 在 matchAll 出现之前，通过在循环中调用 regexp.exec 来获取所有匹配项信息（regexp 需使用 /g 标志：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> regexp <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo*'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'table football, foosball'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>matches <span class=\"token operator\">=</span> regexp<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Found </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>matches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">. Next starts at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>regexp<span class=\"token punctuation\">.</span>lastIndex<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// expected output: \"Found foo. Next starts at 19.\"&#125;</span></pre></td></tr></table></figure><p>如果使用 matchAll ，就可以不必使用 while 循环加 exec 方式（且正则表达式需使用／g 标志）。使用 matchAll 会得到一个迭代器的返回值，配合 for…of, array spread, or Array.from () 可以更方便实现功能：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> regexp <span class=\"token operator\">=</span> <span class=\"token function\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo*'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'table football, foosball'</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> match <span class=\"token keyword\">of</span> matches<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// Array [ \"foo\" ]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// Call matchAll again to create a new iteratormatches = str.matchAll(regexp);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">,</span> <span class=\"token parameter\">m</span> <span class=\"token operator\">=></span> m<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"matchall可以更好的用于分组\"><a class=\"markdownIt-Anchor\" href=\"#matchall可以更好的用于分组\">#</a> matchAll 可以更好的用于分组</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> regexp <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">t(e)(st(\\d?))</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'test1test2'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">matchAll</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>array<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"8-functionprototypetostring现在返回精确字符包括空格和注释\"><a class=\"markdownIt-Anchor\" href=\"#8-functionprototypetostring现在返回精确字符包括空格和注释\">#</a> 8.  <code>Function.prototype.toString()</code>  现在返回精确字符，包括空格和注释</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token comment\">/* comment */</span> foo <span class=\"token comment\">/* another comment */</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// ES2019 会把注释一同打印 console.log (foo.toString ()); </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 箭头函数 const bar  = /* another comment */ () => &#123;&#125;;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"9修改-catch-绑定\"><a class=\"markdownIt-Anchor\" href=\"#9修改-catch-绑定\">#</a> 9. 修改  <code>catch</code>  绑定</h3>\n<p>在 ES10 之前，我们必须通过语法为 catch 子句绑定异常变量，无论是否有必要。很多时候 catch 块是多余的。 ES10 提案使我们能够简单的把变量省略掉。</p>\n<p>不算大的改动。</p>\n<p>之前是</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在是</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"10新的基本数据类型-bigint\"><a class=\"markdownIt-Anchor\" href=\"#10新的基本数据类型-bigint\">#</a> 10. 新的基本数据类型  <code>BigInt</code></h3>\n<p>现在的基本数据类型（值类型）不止 5 种（ES6 之后是六种）了哦！加上 BigInt 一共有七种基本数据类型，分别是： String、Number、Boolean、Null、Undefined、Symbol、BigInt</p>\n",
            "tags": []
        },
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/cookie_%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/cookie_%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "cookie_本地存储_设计模式",
            "date_published": "2022-07-12T22:59:02.000Z",
            "content_html": "<h1 id=\"网络知识\"><a class=\"markdownIt-Anchor\" href=\"#网络知识\">#</a> 网络知识</h1>\n<h2 id=\"通信协议\"><a class=\"markdownIt-Anchor\" href=\"#通信协议\">#</a> 通信协议</h2>\n<p>通信规则，设备与设备之间通信时共同遵守的规则</p>\n<h2 id=\"tcpudpip\"><a class=\"markdownIt-Anchor\" href=\"#tcpudpip\">#</a> TCP/UDP/IP</h2>\n<p>IP： Internet Protocol（网络之间互连的协议），规定了计算机在因特网上进行通信时应当遵守的规则</p>\n<ul>\n<li>IP 地址：4 个字节，一共 32 位 ，用来标识设备在网络中的位置</li>\n<li>本机 ip 127.0.0.1</li>\n</ul>\n<p>TCP：Transmission Control Protocol（传输控制协议）</p>\n<ul>\n<li>TCP 面向连接的协议（通信之前必须先建立连接）</li>\n<li>TCP 相对可靠，它建立连接的过程称为 3 次握手</li>\n<li>经历 3 次握手，才能建立连接</li>\n<li>所有的消息传送，需要对方确认送达</li>\n</ul>\n<blockquote>\n<p>// 正常通信<br>\n A：“土豆，土豆，我是茄子，收到请回答”<br>\nB：“茄子，茄子，我是土豆，收到消息，有什么指示？”<br>\nA：“没事，没事，我以为你挂了呢”<br>\nA：“开始传送消息…”</p>\n</blockquote>\n<blockquote>\n<p>// 如果对方没回应，则不断重复发送当前消息，直至对方收到回应为止。<br>\nA：“茄子，茄子，我是土豆，我被人油炸了，现在改名叫薯片，收到请回答”<br>\n…<br>\nA：“茄子，茄子，我是土豆，我被人油炸了，现在改名叫薯片，收到请回答，第 2 遍”<br>\n…<br>\nA：“茄子，茄子，我是土豆，我被人油炸了，现在改名叫薯片，收到请回答，第 3 遍”<br>\n…<br>\nB：“薯片，薯片，我收到消息”<br>\n 因此可以确保数据的准确送达</p>\n</blockquote>\n<p>UDP: 面向数据报的协议 (不可靠的协议)，如果 TCP 比作是打电话，那么 UDP 就是在发短信</p>\n<ul>\n<li>无需建立连接，发送消息也无需对方确认</li>\n<li>无法保证数据的发送顺序，以及准确率</li>\n<li>UDP 通常用于视频、语音等通信（丢掉了一帧画面是无所谓的）</li>\n</ul>\n<h2 id=\"httphttps\"><a class=\"markdownIt-Anchor\" href=\"#httphttps\">#</a> http/https</h2>\n<p>超文本传输协议 HyperText Transfer Protocol，基于 TCP 协议的一种高级协议，用于客户端和服务器直接的通信.</p>\n<p>http 的特点是，请求完成后就立即断开与服务器的连接</p>\n<blockquote>\n<p>缺点:<br>\n 通信使用明文（不加密），内容可能会被窃听<br>\n不适用特定的 Web 服务器，如：聊天室，消息广播</p>\n</blockquote>\n<h2 id=\"socket\"><a class=\"markdownIt-Anchor\" href=\"#socket\">#</a> socket</h2>\n<p>是一种通信模式，客户端与服务端一直保持着连接，用于随时传输数据</p>\n<h1 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> cookie</h1>\n<h2 id=\"cookie的概念\"><a class=\"markdownIt-Anchor\" href=\"#cookie的概念\">#</a> cookie 的概念</h2>\n<p>cookie 是客户端与服务器端进行通讯使用的一个能够在浏览器本地化存储的技术</p>\n<blockquote>\n<p>PS：chrome 不支持本地文件的 cookie 读写</p>\n<p>数量 50 个（不同浏览器值不同）</p>\n<p>大小 4k（不同浏览器值不同）</p>\n<p>只能写入字符串</p>\n</blockquote>\n<h2 id=\"cookie的基本设置及获取\"><a class=\"markdownIt-Anchor\" href=\"#cookie的基本设置及获取\">#</a> cookie 的基本设置及获取</h2>\n<p>一次只能写入一个 cookie</p>\n<p>一次性读取所有 cookie，是一个字符串。里面的多个 cookir 值用分号；隔开</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'name=value'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 读取：读取根目录下能访问的所有 cookie</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie</pre></td></tr></table></figure><h2 id=\"cookie的组成部分\"><a class=\"markdownIt-Anchor\" href=\"#cookie的组成部分\">#</a> cookie 的组成部分</h2>\n<p>格式： <code>name=value[;expire=xx][;path=/][;domain=xx]</code></p>\n<ul>\n<li>expire 有效期\n<ul>\n<li>默认 Session，临时 cookie，关闭浏览器会被清除</li>\n<li>格式 <code>'expire=' + d.toUTCString</code></li>\n</ul>\n</li>\n<li>path 保存 cookie 的位置\n<ul>\n<li>默认当前 html 所在目录</li>\n<li>格式 <code>path=/</code></li>\n</ul>\n</li>\n<li>domain 域名\n<ul>\n<li>默认当前域名</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"案例\"><a class=\"markdownIt-Anchor\" href=\"#案例\">#</a> 案例</h2>\n<p>封装 cookie 的操作</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> Cookie <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// 1. 先获取所有 cookie，若 cookie 没有值，返回空字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> cookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 2. 拆分每一个 cookie</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        cookies <span class=\"token operator\">=</span> cookies<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'; '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>cookies<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> cookies<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>date<span class=\"token punctuation\">,</span>path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    \t<span class=\"token comment\">// 拼接字符串</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> key <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            str <span class=\"token operator\">+=</span> <span class=\"token string\">';expires='</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toUTCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            str <span class=\"token operator\">+=</span> <span class=\"token string\">';path='</span><span class=\"token operator\">+</span>path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function-variable function\">remove</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span>path</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    \t<span class=\"token comment\">// 获取过期的日期，重新设置 cookie</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        d<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 清空 cookie</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function-variable function\">clear</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>保存图片拖拽位置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 鼠标松开，保存图片位置。即设置 cookie：保存 left,top</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'left='</span> <span class=\"token operator\">+</span> girl<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span><span class=\"token comment\">//100px</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'top='</span> <span class=\"token operator\">+</span> girl<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">;</span><span class=\"token comment\">//100px</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 页面加载，获取 cookie：获取 top,left</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> cookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span><span class=\"token comment\">// 得到所有 cookie</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cookies <span class=\"token operator\">=</span> cookies<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'; '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//3. 遍历数组，找出 top,left, 给图片设置位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cookies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cookie</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">||</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'top'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \tgirl<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>七天免登陆</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btnSubmit<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 5. 表单 submit 按下即提交，不管满不满足条件。所以阻止默认行为</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\te<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 1. 获取用户名密码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> _username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> _password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//2. 若用户名长度为 0，退出函数。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_username<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'用户名不能为空'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//3. 判断是否勾选 \"7 天内免登陆\" 选项。若勾选保存 cookie</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>checkbox<span class=\"token punctuation\">.</span>checked<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        d<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//d 此时是一个 UTC 时间对象，转成字符串格式</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    \tdocument<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'username='</span> <span class=\"token operator\">+</span> _username <span class=\"token operator\">+</span> <span class=\"token string\">';expires='</span><span class=\"token operator\">+</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">toUTCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//4. 不管有没有勾选，点击提交，显示跳转页面</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tlocation<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 6. 下一次访问：判断页面是否存在 cookie，是否存在 username 的 cookie，若存在自动登录，即自动跳转到百度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">var</span> cookies <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//（1）判断页面是否存在 cookie，即 cookie 长度不为 0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cookies<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    cookies <span class=\"token operator\">=</span> cookies<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'; '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cookies<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//（2）是否存在 username 的 cookie</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> <span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        \tlocation<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"本地存储web-storage\"><a class=\"markdownIt-Anchor\" href=\"#本地存储web-storage\">#</a> 本地存储 Web Storage</h1>\n<h2 id=\"好处\"><a class=\"markdownIt-Anchor\" href=\"#好处\">#</a> 好处</h2>\n<p>减少网络流量：一旦数据保存在本地后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要地来回传递。</p>\n<p>快速显示数据：性能好，从本地读数据比通过网络从服务器获得数据快得多，本地数据可以即时获得。再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示。</p>\n<p>临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用 sessionStorage 非常方便。</p>\n<h2 id=\"局限\"><a class=\"markdownIt-Anchor\" href=\"#局限\">#</a> 局限</h2>\n<p>1、浏览器的大小不统一，并且在 IE8 以上的 IE 版本才支持 localStorage 这个属性</p>\n<p>2、目前所有的浏览器中都会把 localStorage 的值类型限定为 string 类型，这个在对我们日常比较常见的 JSON 对象类型需要一些转换</p>\n<h2 id=\"增删改查\"><a class=\"markdownIt-Anchor\" href=\"#增删改查\">#</a> 增删改查</h2>\n<h3 id=\"写入\"><a class=\"markdownIt-Anchor\" href=\"#写入\">#</a> 写入</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>！window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浏览器不支持localstorage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> storage<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 写入 a 字段</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    storage<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 写入 b 字段</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    storage<span class=\"token punctuation\">.</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 写入 c 字段</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> storage<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> storage<span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> storage<span class=\"token punctuation\">[</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"读取\"><a class=\"markdownIt-Anchor\" href=\"#读取\">#</a> 读取</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> storage<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>storage<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第一种方法读取</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span>storage<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 第二种方法读取</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>storage<span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 第三种方法读取</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"修改同写入\"><a class=\"markdownIt-Anchor\" href=\"#修改同写入\">#</a> 修改（同写入）</h3>\n<h3 id=\"删除\"><a class=\"markdownIt-Anchor\" href=\"#删除\">#</a> 删除</h3>\n<p>1、将 localStorage 的所有内容清除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> storage<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>storage<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、 将 localStorage 中的某个键值对删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> storage<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>storage<span class=\"token punctuation\">.</span>a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>storage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"获取键\"><a class=\"markdownIt-Anchor\" href=\"#获取键\">#</a> 获取键</h2>\n<p>使用 key () 方法，向其中出入索引即可获取对应的键</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> storage<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span>localStorage<span class=\"token punctuation\">;</span>     </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>storage<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> key<span class=\"token operator\">=</span>storage<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sessionstorage-localstorage-cookie的区别\"><a class=\"markdownIt-Anchor\" href=\"#sessionstorage-localstorage-cookie的区别\">#</a> sessionStorage、localStorage、cookie 的区别</h1>\n<h2 id=\"共同点\"><a class=\"markdownIt-Anchor\" href=\"#共同点\">#</a> 共同点：</h2>\n<p>都是保存在浏览器端，并且是同源的（URL 的协议、端口、主机名是相同的，只要有一个不同就属于不同源）</p>\n<h2 id=\"不同点\"><a class=\"markdownIt-Anchor\" href=\"#不同点\">#</a> 不同点：</h2>\n<p>1、cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递，而 sessionStorage 和 localStorage 不会自动把数据发送给服务器，仅在本地保存。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下。</p>\n<p>2、存储大小限制也不同，cookie 数据不能超过 4K，同时因为每次 http 请求都会携带 cookie、所以 cookie 只适合</p>\n<p>保存很小的数据，如会话标识。sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。</p>\n<p>3、数据有效期不同，sessionStorage 仅仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或者</p>\n<p>浏览器关闭之后也一直保存，因此作用持久数据；cookie，只在设置 cookie 过期时间之前有效，即使窗口关闭或者浏览器关闭。</p>\n<p>4、作用域不同：sessionStorage 在不同的浏览器窗口中不共享，即使是同一个页面，localStorage 在所有的同源窗口中是共享的，cookie 也是在所有同源的窗口中共享的。（只要 URL 的协议、端口、主机名三者中有一个不同，就属于不同的文档源）</p>\n<h1 id=\"json\"><a class=\"markdownIt-Anchor\" href=\"#json\">#</a> JSON</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>* 转换</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    * 对象/数组 -<span class=\"token operator\">></span> json字符串：JSON.stringify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * json字符串 -<span class=\"token operator\">></span> 对象/数组：JSON.parse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 格式：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    * 属性名和字符串必须使用双引号</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    * 不能有注释</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    * 不能存在多余逗号</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>* 属性值必须为以下类型</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    * String</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    * Number</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    * Boolean</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    * Object</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    * Array</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * Null</pre></td></tr></table></figure><h2 id=\"案例-2\"><a class=\"markdownIt-Anchor\" href=\"#案例-2\">#</a> 案例</h2>\n<p>将商品添加到购物车列表</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 3. 每次刷新，拿到上一次的存放值。第一次是为空数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// * 若已经存在值，默认为 JSON 字符串，要转回数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> goodslist <span class=\"token operator\">=</span> Cookie<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goodslist'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> goodslist <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    goodslist <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>goodslist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 利用事件委托实现添加到购物车的效果</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>goods<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    e <span class=\"token operator\">=</span> e <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>className <span class=\"token operator\">===</span> <span class=\"token string\">'add2cart'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 2. 若当前为按钮被点击</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// （1）生成一个商品信息对象 &#123;guid，name，imgurl，price，qty（商品数量）&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// （2）推入数组，将数组添加到 cookie 里面</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// （3）考虑如果商品信息已经添加过，则应该增加数组里面的该商品数量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// \t* 第一步：判断当前的 guid 是否在数组存在。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//  * 第二步：若存在，拿到该商品信息在数组中的索引，利用索引将 qty++</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">var</span> currentLi <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">var</span> guid <span class=\"token operator\">=</span> currentLi<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-guid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">var</span> idx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">var</span> has <span class=\"token operator\">=</span> goodslist<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">g<span class=\"token punctuation\">,</span>i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">.</span>guid <span class=\"token operator\">===</span> guid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>has<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            goodslist<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>qty<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">var</span> goods <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token literal-property property\">guid</span><span class=\"token operator\">:</span>guid<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>currentLi<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token literal-property property\">imgurl</span><span class=\"token operator\">:</span>currentLi<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>src<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span>currentLi<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token comment\">// 商品数量</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token literal-property property\">qty</span><span class=\"token operator\">:</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            goodslist<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>goods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">'goodslist='</span><span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>goodslist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>显示购物车列表</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 获取 goodslist 的 cookie，根据 cookie 数据生成 html 结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//2. 遍历时同时计算总价给 subPrice 元素赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> goodslist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    goodslist <span class=\"token operator\">=</span> Cookie<span class=\"token punctuation\">.</span><span class=\"token function\">getCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goodslist'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> goodslist <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \tgoodslist <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>goodslist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//2. 遍历时，同时计算商品金额</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">var</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    ul<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> goodslist<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">goods</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        total <span class=\"token operator\">+=</span> goods<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> goods<span class=\"token punctuation\">.</span>qty<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">'&lt;li data-guid=\"'</span><span class=\"token operator\">+</span>goods<span class=\"token punctuation\">.</span>guid<span class=\"token operator\">+</span><span class=\"token string\">'\">'</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token string\">'&lt;img src=\"'</span><span class=\"token operator\">+</span>goods<span class=\"token punctuation\">.</span>imgurl<span class=\"token operator\">+</span><span class=\"token string\">'\">'</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token string\">'&lt;h4>'</span><span class=\"token operator\">+</span>goods<span class=\"token punctuation\">.</span>name<span class=\"token operator\">+</span><span class=\"token string\">'&lt;/h4>'</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token string\">'&lt;p class=\"price\">价格：&lt;span>'</span><span class=\"token operator\">+</span>goods<span class=\"token punctuation\">.</span>price<span class=\"token operator\">+</span><span class=\"token string\">'&amp;times;'</span><span class=\"token operator\">+</span>goods<span class=\"token punctuation\">.</span>qty<span class=\"token operator\">+</span><span class=\"token string\">'&lt;/span>&lt;/p>'</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token string\">'&lt;span class=\"btn-close\">&amp;times;&lt;/span>'</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token string\">'&lt;/li>'</span>；</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    carList<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    carList<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    subPrice<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> total<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 3. 点击按钮，移除 cookie 数据，重新渲染商品列表。同时阻止浏览器默认行为</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>btnClear<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    Cookie<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goodslist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//4. 当点击某个商品的删除时</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//（1）获取到当前商品的 guid，遍历数组 goodslist，根据 guid 值相同，找到被删除的元素在数组中的索引。</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//（2）通过索引，删除 goodslist 的中的某个商品。之后推出循环</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//（3）重新生成 cookie 后，渲染</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>carList<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    e <span class=\"token operator\">=</span> e <span class=\"token operator\">||</span> window<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">var</span> target <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target <span class=\"token operator\">||</span> e<span class=\"token punctuation\">.</span>srcElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>className <span class=\"token operator\">===</span> <span class=\"token string\">'btn-close'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">var</span> currentLi <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">var</span> guid <span class=\"token operator\">=</span> currentLi<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-guid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>goodslist<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>goodslist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>guid <span class=\"token operator\">===</span> guid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                goodslist<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        Cookie<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goodslist'</span><span class=\"token punctuation\">,</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>goodslist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"重载刷新当前页面\"><a class=\"markdownIt-Anchor\" href=\"#重载刷新当前页面\">#</a> 重载 / 刷新当前页面</h1>\n<p>1、reload 方法，该方法强迫浏览器刷新当前页面。<br>\n语法：location.reload ([bForceGet])<br>\n 参数： bForceGet， 可选参数， 默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面，相当于客户端点击 F5 (“刷新”)<br>\n 2、 replace 方法，该方法通过指定 URL 替换当前缓存在历史里（客户端）的项目，因此当使用 replace 方法之后，你不能通过 “前进” 和 “后退” 来访问已经被替换的 URL。<br>\n语法： location.replace (URL)<br>\n 通常使用： location.reload () 或者是 history.go (0) 来做。<br>\n此方法类似客户端点 F5 刷新页面，所以页面 method=”post” 时，会出现” 网页过期” 的提示。<br>\n因为 Session 的安全保护机制。<br>\n当调用 location.reload () 方法时， aspx 页面此时在服务端内存里已经存在， 因此必定是 IsPostback 的。<br>\n如果有这种应用： 需要重新加载该页面，也就是说期望页面能够在服务端重新被创建，期望是 Not IsPostback 的。<br>\n这里，location.replace () 就可以完成此任务。被 replace 的页面每次都在服务端重新生成。<br>\n代码： location.replace (location.href);<br>\n3、返回并刷新页面：<br>\nlocation.replace(document.referrer);<br>\ndocument.referrer// 前一个页面的 URL</p>\n<p>不要用 history.go (-1)，或 history.back (); 来返回并刷新页面，这两种方法不会刷新页面。</p>\n<p>4、Javascript 刷新页面的几种方法：</p>\n<p>1，history.go(0)</p>\n<p>2，location.reload()</p>\n<p>3，location=location</p>\n<p>4，location.assign(location)</p>\n<p>5，document.execCommand(‘Refresh’)</p>\n<p>6，window.navigate(location)</p>\n<p>7，location.replace(location)</p>\n<p>8，document.URL=location.href</p>\n<h1 id=\"设计模式\"><a class=\"markdownIt-Anchor\" href=\"#设计模式\">#</a> 设计模式</h1>\n<h2 id=\"一-工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#一-工厂模式\">#</a> 一、工厂模式</h2>\n<p>简单版工厂模式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createBuwawa</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>eyes<span class=\"token punctuation\">,</span>mouth</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">eyes</span><span class=\"token operator\">:</span>eyes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">mouth</span><span class=\"token operator\">:</span>mouth</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> peiqi<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">createBuwawa</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"佩奇\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"big\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>进阶版工厂模式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>生产人员与取餐窗口相分离</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span><span class=\"token function\">麦当劳的工作人员</span><span class=\"token punctuation\">(</span>生产汉堡包<span class=\"token punctuation\">,</span>薯条<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Creator</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 相当于在构造函数书写属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">food</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 生产食物</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chuangkou</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>food<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2.</span><span class=\"token function\">取餐窗口</span><span class=\"token punctuation\">(</span>提示、取餐<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chuangkou</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">food</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>food<span class=\"token operator\">=</span>food<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>food<span class=\"token operator\">+</span><span class=\"token string\">\"已做好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">3.</span>调用</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">var</span> xiaoming<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Creator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">var</span> shutiao<span class=\"token operator\">=</span>xiaomming<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"薯条\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>shutiao<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>设计思想</p>\n<p>工人与服务员相分离</p>\n<p>符合开放封闭原则</p>\n<h2 id=\"二-单例模式\"><a class=\"markdownIt-Anchor\" href=\"#二-单例模式\">#</a> 二、单例模式</h2>\n<p>如果不存在实例对象，那么就创建实例对象，如果存在实例对象，那么就用该对象</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Single</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Single<span class=\"token punctuation\">.</span>getInstance<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">var</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Single</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> s1<span class=\"token operator\">=</span>Single<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> s2<span class=\"token operator\">=</span>Single<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token operator\">==</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"三-适配者模式\"><a class=\"markdownIt-Anchor\" href=\"#三-适配者模式\">#</a> 三、适配者模式</h2>\n<p>旧接口格式和使用者不兼容</p>\n<p>中间加一个适配转换接口</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">specificRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'德国标准插口'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Adapter</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">let</span> info <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">specificRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>info<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">-转换器-中国标准接口</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Adater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"四-代理模式\"><a class=\"markdownIt-Anchor\" href=\"#四-代理模式\">#</a> 四、代理模式</h2>\n<p>使用者无权访问目标对象</p>\n<p>中间加代理，通过代理做授权和控制</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（<span class=\"token keyword\">function</span>（）<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReadImg</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filename <span class=\"token operator\">=</span> filename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadFromDisk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 模拟从硬盘中加载</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">loadFromDisk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"loading...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"display...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 代理</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProxyImg</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">filename</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readImg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadImg</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readImg<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">return</span> ProxyImg；</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span>）（）</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">let</span> proxyImg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProxyImg</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>proxyImg<span class=\"token punctuation\">.</span><span class=\"token function\">display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>场景</p>\n<p>事件代理</p>\n<p>$.proxy</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#dv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>$<span class=\"token punctuation\">.</span><span class=\"token function\">proxy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 使用外部函数的 this</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>ES6 proxy</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> star <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">name</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"张**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">age</span> <span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token literal-property property\">phone</span> <span class=\"token operator\">:</span> <span class=\"token string\">'13900001111'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 明星经纪人</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> agent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>star<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function-variable function\">get</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token comment\">// 返回经纪人自己的电话</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'16899997777'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">\"price\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token comment\">// 经纪人报价</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'120000'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 此时 target 为 stat 对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token function-variable function\">set</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>val</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token string\">\"customPrice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"价格太低\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\ttarget<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16899997777</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>agent<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//120000</span></pre></td></tr></table></figure><p>适配器模式 vs 代理模式</p>\n<p>适配器模式：提供一个不同的接口（如不同版本的插头）</p>\n<p>代理模式：提供一模一样的接口</p>\n<h2 id=\"五-观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#五-观察者模式\">#</a> 五、观察者模式</h2>\n<p>发布 &amp; 订阅，一对多</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 主题：保存状态，状态变化之后触发所有观察者对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyAllObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token function\">notifyAllObservers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observers</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tobservers<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">observer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>observer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>subject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject  <span class=\"token operator\">=</span> subject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">attach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">update,state:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>subject<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Subject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 主题，大盒子保存所有观察者</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o1\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//o1 是观察者</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"o2\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//02 是观察者</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只要其中一个观察者状态概念，</span></pre></td></tr></table></figure><p>网页事件绑定</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#dv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#dv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#dv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>promise</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"六-组合模式\"><a class=\"markdownIt-Anchor\" href=\"#六-组合模式\">#</a> 六、组合模式</h2>\n<p>生成树形结构，表示 &quot;整体 - 部分&quot; 关系</p>\n<p>让整体和部分都具有一致的操作方式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'div1'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token literal-property property\">className</span><span class=\"token operator\">:</span> <span class=\"token string\">'container'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">tag</span><span class=\"token operator\">:</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'456'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//====== 对应的 html 结构 ===============</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"div1\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token number\">123</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token number\">456</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"七-策略模式\"><a class=\"markdownIt-Anchor\" href=\"#七-策略模式\">#</a> 七、策略模式</h2>\n<p>不同策略分开处理</p>\n<p>避免出现大量的 if…else 或者 switch…case</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'ordinary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'普通用户购买'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'member'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'会员用户购买'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> <span class=\"token string\">'vip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vip用户购买'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> u1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ordinary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>u1<span class=\"token punctuation\">.</span><span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> u2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ordinary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>u2<span class=\"token punctuation\">.</span><span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> u3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ordinary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>u3<span class=\"token punctuation\">.</span><span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span>money</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>money <span class=\"token operator\">=</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">buy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tstrategies<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>money<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> strategies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">ordinary</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">money</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> money<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function-variable function\">member</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">money</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> money<span class=\"token operator\">*</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function-variable function\">vip</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">money</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> money<span class=\"token operator\">*</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/Ajax/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/Ajax/",
            "title": "Ajax",
            "date_published": "2022-07-12T22:59:00.000Z",
            "content_html": "<h2 id=\"一-概念\"><a class=\"markdownIt-Anchor\" href=\"#一-概念\">#</a> 一、概念</h2>\n<pre><code>1.AJAX\n\tAsynchronous Javascript And Xml，Ajax 技术的核心是XMLHttpRequest对象（简称XHR），这是由微软首先引入的一个特性，其他浏览器提供商后来都提供了相同的实现\n\n2.起源\n\t最早出现在2005年的google搜索建议\n3.优点\n\t* 增加速度：减轻服务器的负担,按需加载数据,最大程度的减少冗余请求\n\t* 改善的用户体验：局部刷新页面,减少用户等待时间,带来更好的用户体验\n\t* 页面和数据分离：前后端分离，操作更灵活，后期维护更方便\n4.后端语言和服务器配置\n\t* php + Apache + mySQL\n\t* NodeJS + MongoDB\n\t* Java + tomcat + Oracle\n\t* .NET + IIS + SQL Server\n</code></pre>\n<h2 id=\"二-json\"><a class=\"markdownIt-Anchor\" href=\"#二-json\">#</a> 二、json</h2>\n<h3 id=\"1json数据json字符串\"><a class=\"markdownIt-Anchor\" href=\"#1json数据json字符串\">#</a> 1.json 数据 (json 字符串)</h3>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">21465461461461</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"id\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">21465461461461</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h3 id=\"2json字符串与对象的转换\"><a class=\"markdownIt-Anchor\" href=\"#2json字符串与对象的转换\">#</a> 2.json 字符串与对象的转换</h3>\n<pre><code>1.json字符串转成对象的转换\n(1)eval(&quot;(&quot;+json字符串+&quot;)&quot;); \n\t它的作用是，将一个普通的json格式(不标准的json字符串)的字符串，转换成Json格式的对象\n\tvar list = eval(&quot;(&quot;+request.responseText+&quot;)&quot;);\n(2)JSON.parse(); //把JSON字符串转成JSON对象(js对象/数组)【es5】\n2.把JSON对象转成JSON字符串\n\tJSON.stringify(); \n</code></pre>\n<h3 id=\"3json文件存在的意义\"><a class=\"markdownIt-Anchor\" href=\"#3json文件存在的意义\">#</a> 3.json 文件存在的意义</h3>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 模拟数据 (与后端先商量)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"G001\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Thermos 膳魔师 Funtainer系列水杯 12盎司（340g） 粉红色\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token property\">\"imgurl\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"images/g1.jpg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span><span class=\"token number\">899</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"三-ajax请求步骤\"><a class=\"markdownIt-Anchor\" href=\"#三-ajax请求步骤\">#</a> 三、Ajax 请求步骤</h2>\n<p>1. 创建请求对象</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回一个异步请求对象</span></pre></td></tr></table></figure><p>2. 处理服务器返回数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//responseText：保存服务器返回的数据（从服务器返回的数据是 “字符串”）。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3. 设置请求参数，建立与服务器的连接</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost/api/ajaxtest\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4. 向服务器发送请求</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"四-xmlhttprequest\"><a class=\"markdownIt-Anchor\" href=\"#四-xmlhttprequest\">#</a> 四、XMLHttpRequest</h2>\n<h3 id=\"1opentypeurlasync\"><a class=\"markdownIt-Anchor\" href=\"#1opentypeurlasync\">#</a> 1.open(type,url,async)</h3>\n<p>open (type,url（同源策略）,async（同步、异步）)</p>\n<pre><code>1.open(type,url,async): 建立与服务器的连接\n    type：请求的类型，get获取、post发送\n    \t* 区别? \n    \t\tget请求数据接在url后面，post请求数据通过send方法传递\n    \t\tget传递的数据会比较少，post没有限制\n    \t\tget传递的数据会暴露出来\n    url：数据请求的地址（API地址），一般由后端开发人员提供\n    \t* 相对路径的情况下，必须在同一个根目录(端口配置的目录)下。\n        * 当前页面访问地址，API地址两者一定要同域\n        * 同域（同源策略）：协议，域名，端口三者一致\n        * 报错： No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.\n\tasync：是否异步发送请求（true,false），默认为true\n        * 同步：按步骤顺序执行，前面的代码执行完后，后面的代码才会执行\n        \t做完前一件事情, 才能下一件事情（排队）\n        * 异步：与其他操作同时执行，也叫并发（图片加载，ajax请求，定时器）\n</code></pre>\n<h3 id=\"2senddata\"><a class=\"markdownIt-Anchor\" href=\"#2senddata\">#</a> 2.send(data)</h3>\n<pre><code>2.send(data): 向服务器发送请求\n\tdata：可选参数，post请求时才生效，表示发请求时传送的数据字符串。\n    \t xhr.send('size=20&amp;type=music');\n\t\t在某些浏览器中，如果不需要通过post请求主体发送数据，则必须传入null\n//备注：get请求的数据写在url地址后\n\trequest.open(&quot;get&quot;, &quot;http://localhost/api/getdata.php?type=get&amp;qty=10&quot;, true);\n\tsetRequestHeader(key,val)：设置请求头\n//备注：利用请求头设置POST提交数据格式(form表单)：\n\txhr.setRequestHeader('content-type','application/x-www-form-urlencoded');//open方法后设置\n</code></pre>\n<p>在请求收到服务器的响应后，响应的数据会自动填充 xhr 对象的属性，相关的属性简介如下</p>\n<h3 id=\"3readystate\"><a class=\"markdownIt-Anchor\" href=\"#3readystate\">#</a> 3.readyState</h3>\n<pre><code>0 － （未初始化）尚未调用open()方法。\n1 － （启动）已经调用open()方法，但尚未调用send()方法。\n2 － （发送）send()方法执行完成，但尚未接收到响应。\n3 － （接收）已经接收到部分响应数据。\n4 － （完成）响应内容解析完成，可以在客户端调用了\n只要readyState 属性的值由一个值变成另一个值，都会触发一次readystatechange 事件。必须在调用open()之前指定onreadystatechange事件处理程序才能确保跨浏览器兼容性。\n</code></pre>\n<h3 id=\"4responsetext\"><a class=\"markdownIt-Anchor\" href=\"#4responsetext\">#</a> 4.responseText</h3>\n<p>保存服务器返回的数据（从服务器返回的数据是 “字符串”）。</p>\n<h3 id=\"5status\"><a class=\"markdownIt-Anchor\" href=\"#5status\">#</a> 5.status</h3>\n<pre><code>* 响应的HTTP 状态。\n200（OK）：服务器成功返回了页面\n304（Not Modified）：数据与服务器相同，不需要重服务器请求（直接使用缓存的数据）\n400（Bad Request）：语法错误导致服务器不识别\n401（Unauthorized）：请求需要用户认证\n404（Not found）：请求地址不存在\n500（Internal Server Error）：服务器出错或无响应\n503（ServiceUnavailable）：由于服务器过载或维护导致无法完\n</code></pre>\n<h2 id=\"五-跨域解决方案\"><a class=\"markdownIt-Anchor\" href=\"#五-跨域解决方案\">#</a> 五、跨域解决方案</h2>\n<h3 id=\"1jsonp\"><a class=\"markdownIt-Anchor\" href=\"#1jsonp\">#</a> 1.JSONP</h3>\n<p>原理：利用 script 标签能加载其他域名的 js 文件的原理，实现跨域数据请求</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>* JSONP 是JSON with padding（填充式JSON 或参数式JSON）的简写。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* JSONP是一种可以绕过浏览器的安全限制，从不同的域请求数据的方法。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* JSONP请求不是ajax请求，是利用script标签能加载其他域名的js文件的原理，来实现跨域数据的请求 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* 局限性：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  - 只能为get请求</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  - 接口必须有回调函数的执行</pre></td></tr></table></figure><p>案例练习 1：使用 script 标签其他 js 文件调用本地 js 的某个函数；</p>\n<p>案例练习 2：使用 script 标签其他 php 文件调用本地 js 的未知名方法，返回数据</p>\n<p>案例练习 3：利用 JSONP 原理调用百度建议</p>\n<pre><code>msg.oninput = function()&#123;\n    let _msg = msg.value;\n    clearTimeout(timer);\n    timer = setTimeout(()=&gt;&#123;\n    let script = document.createElement('script');\n    script.src='https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/sujson=1&amp;cb=getData&amp;wd='+_msg;\n    document.body.appendChild(script);\n    &#125;,500);\n&#125;\nwindow.getData = function(data)&#123;\n    suggest.innerHTML = data.s.map(item=&gt;&#123;\n        return `&lt;li&gt;$&#123;item&#125;&lt;/li&gt;`\n        &#125;).join(&quot;&quot;);\n    &#125;\n&#125;)\n//原理性代码：\n//1.script的src中回调函数的传递\nscript.src='https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/sujson=1&amp;cb=getData&amp;wd='+_msg;\n//2.声明全局函数\nwindow.getData = function(data)&#123;处理数据&#125;\n</code></pre>\n<h3 id=\"2cors\"><a class=\"markdownIt-Anchor\" href=\"#2cors\">#</a> 2.CORS</h3>\n<p>原理：在后端响应头添加词字段 header (‘Access-Control-Allow-Origin: *’)</p>\n<pre><code>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing），它允许浏览器向跨源服务器发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。\n\nCORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。服务器需要设置响应头，允许该域名访问\n</code></pre>\n<pre><code>1.Access-Control-Allow-Origin\n\theader('Access-Control-Allow-Origin: *');  \n该字段是必须的。需要在后端响应头添加词字段，值要么是一个*，表示接受任意域名的请求，要么指定一个域名http://localhost。\n2.Access-Control-Allow-Methods\n3.Access-Control-Allow-Headers\n    header('Access-Control-Allow-Methods:POST');  \n    header('Access-Control-Allow-Headers:x-requested-with,content-type'); \n</code></pre>\n<p>案例 1：天气预报</p>\n<p>案例 2：百度地图</p>\n<h3 id=\"3服务器代理\"><a class=\"markdownIt-Anchor\" href=\"#3服务器代理\">#</a> 3. 服务器代理</h3>\n<p>原理：file_get_contents ($url) // 获取网站内容</p>\n<p>后端不存在跨域问题，所以可以利用后端间接获取其他网站的数据</p>\n<pre><code>ajax跨域请求之服务端代理（爬虫）\n原理：获取页面所有内容，并利用正则匹配所需内容\nfile_get_contents($url) //获取网站内容\npreg_match_all($reg,$str,$res) \npreg_match($reg,$str,$res)   //$str代表被匹配的内容，$res为结果\n$content = iconv(原字符编码,新字符编码,$content);//修改$content字符编码\n</code></pre>\n<p>案例 1：利用服务器代理获取外网 IP</p>\n<p>案例 2：根据 IP 获取所在城市（ajax 嵌套）</p>\n<p>案例 3：根据城市获取天气预报（ajax 嵌套）</p>\n<p>案例 4：POST 请求数据</p>\n<h2 id=\"六-异步处理方法promise\"><a class=\"markdownIt-Anchor\" href=\"#六-异步处理方法promise\">#</a> 六、异步处理方法 Promise</h2>\n<h3 id=\"1promise\"><a class=\"markdownIt-Anchor\" href=\"#1promise\">#</a> 1.Promise</h3>\n<p>Promise 是一个构造函数，所谓的 Promise 对象，就是通过 new Promise () 实例化得到的对象，用来传递异步操作的数据。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理。</p>\n<p>1. 创建对象</p>\n<pre><code>var p=new Promise(function(resolve,reject)&#123;\n    //成功拿到数据执行resolve,失败执行reject\n&#125;)\n\t*规定好了哪个阶段执行哪个函数\nPromise的三种状态\n    * Pending(未完成)可以理解为Promise对象实例new创建时候的初始状态\n    * Resolved(成功)可以理解成功的状态\n    * Rejected(失败)可以理解为失败的状态\n</code></pre>\n<p>2. 执行方法</p>\n<pre><code>p.then(成功时要执行的代码).catch(失败时执行的代码)\n</code></pre>\n<p>3. 静态方法</p>\n<p>Promise.all([p1,p2,p3,p4])</p>\n<p>将多个 Promise 实例，包装成一个新的 Promise 实例</p>\n<p>所有参数中的 Promise 状态都为 resolved 时，新的 promise 状态才为 resolved</p>\n<p>只要 p1,p2,p3… 之中有一个被 rejected, 新的 promise 的状态就变成 rejected</p>\n<pre><code>Promise.all([p1,p2,p3]).then(function(res)&#123;\n\tconsole.log(res);\n&#125;)\n</code></pre>\n<p>Promise.race ([p1,p2,p3…]) 竞速，完成一个即可</p>\n<h3 id=\"2trycatch\"><a class=\"markdownIt-Anchor\" href=\"#2trycatch\">#</a> 2.try…catch</h3>\n<p>尝试执行代码，如果有错误则执行 catch 捕获错误 (不报错)</p>\n<pre><code>try&#123;\n\tconsole.log(666)\n\t//先尝试执行这里的代码\n\tshow();\n\t//无报错，则忽略catch\n\t//如果报错，则执行catch，并传递错误信息\n&#125;catch(error)&#123;\n\tconsole.log(error)\n&#125;\nconsole.log('end');\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%BB%A7%E6%89%BF/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%BB%A7%E6%89%BF/",
            "title": "面向对象与继承",
            "date_published": "2022-07-12T22:59:00.000Z",
            "content_html": "<h1 id=\"一-面向对象\"><a class=\"markdownIt-Anchor\" href=\"#一-面向对象\">#</a> 一、面向对象</h1>\n<h2 id=\"概念oop\"><a class=\"markdownIt-Anchor\" href=\"#概念oop\">#</a> 概念 oop</h2>\n<p>利用对象进行编程的一种思想。object-oriented programming，简称 oop</p>\n<h2 id=\"创建对象\"><a class=\"markdownIt-Anchor\" href=\"#创建对象\">#</a> 创建对象</h2>\n<p>1. 字面量</p>\n<blockquote>\n<p>var obj={}</p>\n</blockquote>\n<p>2. 通过 new 关键字实例化对象</p>\n<blockquote>\n<p>var obj=new Object();</p>\n</blockquote>\n<p>3.Object.create()</p>\n<pre><code>\n</code></pre>\n<p>(1) 工厂模式</p>\n<p>在 ECMAScript 中是无法创建类的，开发人员就发明了一种函数，用函数来封装特定接口创建对象的细节。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> job</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    o<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    o<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    o<span class=\"token punctuation\">.</span>job <span class=\"token operator\">=</span> job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> person1 <span class=\"token operator\">=</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zxj'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Software Engineer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>缺点：没有解决对象识别的问题 (得到的都是 o 对象，对象的类型都是 Object)</p>\n<p>(2) 自定义构造函数（类的概念）</p>\n<p>ECMAScript 中的构造函数可以用来创建特定类型的对象。像 Object 和 Array 的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"王铁锤\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 可以通过控制台查看一下 person1 与 s1 的区别，更好理解。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//person1: \t__proto__ 直接指向对象 Object 的原型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//\ts1: \t__proto__ 指向 Student 的原型 -> Student 的原型才指向对象 Object 的原型</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 如此可以识别对象</span></pre></td></tr></table></figure><h2 id=\"构造函数与普通函数的区别\"><a class=\"markdownIt-Anchor\" href=\"#构造函数与普通函数的区别\">#</a> 构造函数与普通函数的区别</h2>\n<blockquote>\n<p>唯一区别：调用方式不同</p>\n</blockquote>\n<ul>\n<li>任何函数，只要通过 new 操作符来调用，它就可以作为构造函数；</li>\n<li>而任何构造函数，如果不通过 new 操作符来调用，那它跟普通函数无区别。</li>\n</ul>\n<blockquote>\n<p>约定：构造函数名首字母大写</p>\n</blockquote>\n<h2 id=\"new-调用自定义构造函数相当于执行了哪些步骤\"><a class=\"markdownIt-Anchor\" href=\"#new-调用自定义构造函数相当于执行了哪些步骤\">#</a> new 调用自定义构造函数，相当于执行了哪些步骤</h2>\n<ul>\n<li>创建一个新对象 (在内部隐式调用了 new Object ())</li>\n<li>将构造函数的作用域赋给新对象 (把 this 绑定到实例对象)</li>\n<li>执行构造函数中的代码 (为这个新对象添加属性)</li>\n<li>返回新对象</li>\n</ul>\n<h2 id=\"this-的三种指向\"><a class=\"markdownIt-Anchor\" href=\"#this-的三种指向\">#</a> this 的三种指向</h2>\n<ul>\n<li>函数名 ()： this 指的是调用函数的当前对象</li>\n<li>ele. 事件 = 函数名 ：this 指的是 ele</li>\n<li>new 函数名 ()： this 为实例对象 (new 出来的对象)</li>\n</ul>\n<h1 id=\"二-对象的三大重要概念\"><a class=\"markdownIt-Anchor\" href=\"#二-对象的三大重要概念\">#</a> 二、对象的三大重要概念</h1>\n<p>(一) 构造函数</p>\n<ul>\n<li>每个函数都有一个 prototype 指向原型对象</li>\n</ul>\n<p>(二) 实例对象</p>\n<ul>\n<li>new 出来的对象就是实例对象，实例会复制构造函数内所有的属性和方法</li>\n<li>可以实例对象获取原型对象</li>\n</ul>\n<pre><code>实例对象__proto__\n</code></pre>\n<p>(三) 原型对象</p>\n<ul>\n<li>每个函数都有一个 prototype 指向原型对象</li>\n<li>原型对象默认包含一个 constructor 属性，指向构造函数</li>\n<li>任何写在原型对象中的属性和方法，都可以让所有实例对象共享</li>\n</ul>\n<h2 id=\"判断原型和实例的关系返回布尔值\"><a class=\"markdownIt-Anchor\" href=\"#判断原型和实例的关系返回布尔值\">#</a> 判断原型和实例的关系（返回布尔值）</h2>\n<p>constructor: 得到构造函数的引用，一般用于判断该实例是否由某一构造函数生成</p>\n<pre><code>实例.constructor == Student //true\n</code></pre>\n<p>instanceof: 检测某个对象是不是某一构造函数的实例，适用于原型链中的所有实例</p>\n<pre><code>实例 instanceof Student //true\n实例 instanceof Object //true\n</code></pre>\n<p>isPrototypeOf: 判断当前对象是否为实例的原型对象</p>\n<pre><code>原型对象.isPrototypeOf(实例) //true\n</code></pre>\n<h1 id=\"三-解决方案\"><a class=\"markdownIt-Anchor\" href=\"#三-解决方案\">#</a> 三、解决方案</h1>\n<p>构造函数 + 原型对象</p>\n<ul>\n<li>使用构造函数添加私有属性</li>\n<li>使用原型对象添加共享方法</li>\n</ul>\n<p>优点</p>\n<ul>\n<li>实例对象都有自己的独有属性</li>\n<li>实例共享了原型中的方法，最大限度的节省了内存</li>\n<li>支持向构造函数传递参数</li>\n</ul>\n<h1 id=\"四-对象的属性特性es5对象扩展\"><a class=\"markdownIt-Anchor\" href=\"#四-对象的属性特性es5对象扩展\">#</a> 四、对象的属性特性 (ES5 对象扩展)</h1>\n<h2 id=\"值属性的属性特性\"><a class=\"markdownIt-Anchor\" href=\"#值属性的属性特性\">#</a> 值属性的属性特性</h2>\n<ul>\n<li>configurable</li>\n</ul>\n<blockquote>\n<p>可配置性，控制着其描述的属性的修改，表示能否修改属性特性</p>\n</blockquote>\n<ul>\n<li>enumerable</li>\n</ul>\n<blockquote>\n<p>可枚举性，表示能否通过 for…in 遍历得到属性</p>\n</blockquote>\n<ul>\n<li>writable</li>\n</ul>\n<blockquote>\n<p>可写性，表示能够修改属性的值</p>\n</blockquote>\n<ul>\n<li>value</li>\n</ul>\n<blockquote>\n<p>数据属性，表示属性的值，默认值为 undefined</p>\n</blockquote>\n<p>obj.** 创建属性，默认值属性为 true</p>\n<p>Object.defineProperty (obj,proper) 创建属性，默认值属性为 false</p>\n<h2 id=\"与属性特性相关的方法\"><a class=\"markdownIt-Anchor\" href=\"#与属性特性相关的方法\">#</a> 与属性特性相关的方法</h2>\n<pre><code>设置属性特性：\nObject.defineProperty(obj, property, descriptor) 给对象的某个属性设置属性特性\nObject.defineProperties(object, descriptors) 给对象的所有属性设置属性特性\n\n获取属性特性：\nObject.getOwnPropertyDescriptor(object, propertyname)\n\n获取对象的所有属性：\nObject.keys(object) 只获取到可枚举的属性\nObject.getOwnPropertyNames(object) 获取所有属性的名称（包含不能枚举的属性）\n</code></pre>\n<pre><code>var obj = &#123;\n    a:1,\n    b:&quot;lemon&quot;\n&#125;\n//1.给对象添加一个属性，同时设置属性特性。此时其他的属性特性不设置默认都为false。\n//即configurable为false，不可以修改属性特性。\n//即enumerable为false，不可以枚举\n//即writable为false，不可写，不可以修改属性值\nObject.defineProperty(obj,&quot;c&quot;,&#123;value:&quot;laoxie&quot;&#125;)； //以上属性特性均可改成true，实现相应的功能。\n\n// 2.同时修改多个属性特性\nObject.defineProperties(obj, &#123;\n    b:&#123;value:'css4',enumerable:false&#125;,\n    c:&#123;writable:true&#125;  //报错，因为上面定义该属性的configurable为false，意思是不可以修改属性特性\n&#125;)\n\n//建议：用传统方式添加属性，利用defineProperty修改属性特性（configurable为true的前提下）\n</code></pre>\n<h2 id=\"对象属性的遍历与判断\"><a class=\"markdownIt-Anchor\" href=\"#对象属性的遍历与判断\">#</a> 对象属性的遍历与判断</h2>\n<ul>\n<li>for…in</li>\n</ul>\n<p>遍历对象中的所有可枚举属性，无论该属性存在于实例中还是原型中</p>\n<ul>\n<li>in</li>\n</ul>\n<pre><code>if(name in s1)&#123;\n\t//只要通过对象能够访问到属性就返回true, 无论该属性存在于实例中还是原型中\n&#125;\n</code></pre>\n<ul>\n<li>对象.hasOwnProperty (属性)\n<ul>\n<li>检测一个属性是存在于对象本身中</li>\n<li>返回 true，说明属性存在对象中</li>\n<li>返回 false，说明属性不存在或在原型中</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>检测一个属性是否存在于原型中：!obj.hasOwnProperty (name) &amp;&amp; (name in obj)</p>\n</blockquote>\n<h1 id=\"五-原型对象\"><a class=\"markdownIt-Anchor\" href=\"#五-原型对象\">#</a> 五、原型对象</h1>\n<h2 id=\"重置原型对象\"><a class=\"markdownIt-Anchor\" href=\"#重置原型对象\">#</a> 重置原型对象</h2>\n<p>重置原型对象，可以一次性给原型对象添加多个方法，但切断了与原来原型对象的联系</p>\n<pre><code>function Popover()&#123;&#125;\nPopover.prototype = &#123;\n    show:function()&#123;&#125;,\n    hide:function()&#123;&#125;\n&#125;\n//- 注意覆盖问题（系统的原型对象不建议重写）\n//- 注意识别问题（不可枚举性）\nObject.defineProperty(Popover.prototype,&quot;constructor&quot;,&#123;value:&quot;Popover&quot;,configurable:true&#125;)；\n</code></pre>\n<h2 id=\"内置的原型对象\"><a class=\"markdownIt-Anchor\" href=\"#内置的原型对象\">#</a> 内置的原型对象</h2>\n<p>使用内置原型可以给已有构造函数添加方法</p>\n<ul>\n<li>数组 / 字符串 / 数字等方法调用原理</li>\n<li>扩展内置方法</li>\n</ul>\n<pre><code>if(!Array.prototype.norepeat)&#123;\n    Array.prototype.norepeat = function()&#123;\n        return Array.from(new Set(this)); // this：指向实例arr\n\t&#125;\n&#125;\n</code></pre>\n<h1 id=\"六-原型链\"><a class=\"markdownIt-Anchor\" href=\"#六-原型链\">#</a> 六、原型链</h1>\n<p>实例与 Object 原型对象之间的链条称为原型链</p>\n<ul>\n<li>原型模式的访问机制（原型搜索机制)</li>\n</ul>\n<p>读取实例对象的属性时，先从实例对象本身开始搜索。如果在实例中找到了这个属性，则返回该属性的值；</p>\n<p>如果没有找到，则继续搜索实例的原型对象，如果在原型对象中找到了这个属性，则返回该属性的值</p>\n<p>如果还是没找到，则向原型对象的原型对象查找，依此类推，直到 Object 的原型对象（最顶层对象）；</p>\n<p>如果在 Object 的原型对象中还搜索不到，则抛出错误；</p>\n<h1 id=\"七-继承\"><a class=\"markdownIt-Anchor\" href=\"#七-继承\">#</a> 七、继承</h1>\n<p>继承是面向对象中一个非常重要的特征。指的是：子类继承父类的属性和方法。</p>\n<blockquote>\n<p>我们可以通过继承的方式，在父类的属性和方法基础上，让子类也拥有这些属性和方法，并可以扩展。</p>\n</blockquote>\n<h2 id=\"继承的好处\"><a class=\"markdownIt-Anchor\" href=\"#继承的好处\">#</a> 继承的好处:</h2>\n<ol>\n<li>子类拥有父类所有的属性和方法（代码复用）；</li>\n<li>子类可以扩展自己的属性和方法（更灵活）；</li>\n<li>子类可以重写父类的方法</li>\n</ol>\n<h2 id=\"原型链继承\"><a class=\"markdownIt-Anchor\" href=\"#原型链继承\">#</a> 原型链继承</h2>\n<ul>\n<li>核心：拿父类实例来充当子类原型对象</li>\n<li>缺点：\n<ul>\n<li>无法操作父类构造函数的属性</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>gender</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">大家好，我叫</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">，欢迎跟大家交朋友</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span><span class=\"token string\">'constructor'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span>Person</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> lemon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lemon'</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//=============== 原型链继承 ==========</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Man</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">Man</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> laoxie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laoxie'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"借用构造函数\"><a class=\"markdownIt-Anchor\" href=\"#借用构造函数\">#</a> 借用构造函数</h2>\n<p>核心：借父类的构造函数来增强子类实例，相当于把父类的实例属性复制一份给子类实例</p>\n<ul>\n<li>\n<p>call：</p>\n<ul>\n<li>格式：父类构造函数.call (子类实例，参数 1, 参数 2, 参数 3…)</li>\n</ul>\n</li>\n<li>\n<p>apply：</p>\n<ul>\n<li>\n<p>格式：父类构造函数.apply (子类实例，[参数 1, 参数 2, 参数 3…])<br>\n call 与 apply 的唯一区别：传参方式不同，call 多个参数，apply 只有两个参数，第二个参数为数组</p>\n<pre><code>//aplly用法：借用方法\nvar arr = [20,2,40,33,21,8,22,46,32]\nMath.max.apply(null,arr)\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"组合继承\"><a class=\"markdownIt-Anchor\" href=\"#组合继承\">#</a> 组合继承</h2>\n<p>由于以上继承方法的缺点，实际开发中不可能单纯的只使用一种继承方法，而是利用它们的优点，规避它们的缺点，所以就有了组合继承法</p>\n<ul>\n<li>继承属性：借用构造函数\n<ul>\n<li>只在构造函数中定义属性</li>\n</ul>\n</li>\n<li>继承方法：原型链继承\n<ul>\n<li>把所有的方法写入原型对象</li>\n</ul>\n</li>\n</ul>\n<p><strong>组合继承是最常用的继承模式。</strong></p>\n<ul>\n<li>缺点（原型链继承法的缺点）：\n<ul>\n<li>在原型对象中生成多余的属性</li>\n<li>多次执行父类构造函数</li>\n</ul>\n</li>\n</ul>\n<pre><code>//原型链继承基础上补充借用构造函数\nfunction Man(name,age)&#123;\n    Person.call(this,name,age,'男');\n&#125;\n</code></pre>\n<h2 id=\"原型式继承\"><a class=\"markdownIt-Anchor\" href=\"#原型式继承\">#</a> 原型式继承</h2>\n<ul>\n<li>\n<p>核心：先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例</p>\n</li>\n<li>\n<p>解决原型链继承法的缺点：生成多余的属性</p>\n<pre><code>function object(o)&#123;\n    function F()&#123;&#125;\n    F.prototype = o;\n    return new F();\n&#125;\nMan.prototype = object(Person.prototype);\n</code></pre>\n</li>\n</ul>\n<p>ES5 版本的原型式继承：Object.create ()</p>\n<h2 id=\"寄生组合继承法\"><a class=\"markdownIt-Anchor\" href=\"#寄生组合继承法\">#</a> 寄生组合继承法</h2>\n<p>完美的继承方法</p>\n<ul>\n<li>核心：\n<ul>\n<li>继承属性：借用构造函数</li>\n<li>继承方法：原型式继承</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 父类：构造函数中添加属性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 父类：原型上添加方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">eat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat!\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 子类：借用构造函数继承父类属性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Duke</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">,</span> hobby</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> hobby<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 子类：寄生式继承父类的原型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">inheritFather</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child<span class=\"token punctuation\">,</span> parent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> prototype <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    child<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> prototype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">inheritFather</span><span class=\"token punctuation\">(</span>Duke<span class=\"token punctuation\">,</span> Person<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 子类：添加子类私有方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">Duke</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">let</span> duke <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Duke</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"duke\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"coding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>duke<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>duke <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Duke</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//  age: 18</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">//  gender: \"男\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//  hobby: \"coding\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">//  name: \"duke\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//  __proto__:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//      constructor: ƒ Duke(name, age, gender, hobby)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//      eat: ƒ ()</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">//      say: ƒ ()</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">//      __proto__: Object</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr></table></figure><h2 id=\"es6继承\"><a class=\"markdownIt-Anchor\" href=\"#es6继承\">#</a> ES6 继承</h2>\n<ul>\n<li>class 定义类\n<ul>\n<li>写在类里面的方法实际是给 Person.prototype 添加方法</li>\n<li>constructor 方法是类的默认方法，相当于在构造函数内生成属性</li>\n</ul>\n</li>\n</ul>\n<pre><code>//定义类\nclass Person &#123;\n    constructor(name,age) &#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n    getInfo() &#123;\n         return `我叫$&#123;this.name&#125;,今年$&#123;this.age&#125;岁`;;\n    &#125;\n&#125;\n</code></pre>\n<ul>\n<li>extends 实现继承\n<ul>\n<li>子类继承了父类，在子类构造函数中必须调用 super 方法。</li>\n<li>子类的 constructor 方法没有调用 super 之前，不能使用 this 关键字，否则报错，而放在 super 方法之后就是正确的。</li>\n</ul>\n</li>\n</ul>\n<pre><code>// class 子类 extends 父类&#123;&#125;\nclass Person &#123;\n    constructor(name, age) &#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n&#125;\n\nclass Man extends Person &#123;\n    constructor(name, age, gender) &#123;\n        //this.gender = gender; // 报错\n        super(name, age);\n        this.gender = gender; // 正确\n    &#125;\n&#125;   \n</code></pre>\n<p>3. 注意</p>\n<ul>\n<li>\n<p>子类继承了父类，在子类 constructor 中必须调用 super 方法</p>\n</li>\n<li>\n<p>没有调用 super 之前，不能使用 this 关键字</p>\n</li>\n</ul>\n<p>4.static 静态方法</p>\n<p>如果在一个方法前，加上 static 关键字，这就称为 “静态方法”</p>\n<ul>\n<li>\n<p>静态方法不会被实例继承，而是直接通过类来调用 <code>Person.getInfo()</code></p>\n</li>\n<li>\n<p>父类的静态方法，可以被子类继承 <code>Man.getInfo()</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>gender</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 此处的方法写入原型对象中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>大家好<span class=\"token punctuation\">,</span>我叫$<span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>；</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是吃货'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> lemon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'lemon'</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 继承方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Man</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>gender</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 继承属性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>gender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'吃'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'喝'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">let</span> laoxie <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Man</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laoxie'</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"九-bind-call-apply\"><a class=\"markdownIt-Anchor\" href=\"#九-bind-call-apply\">#</a> 九、bind、call、apply</h1>\n<p>相同点：三者都是改变函数执行时的上下文，即改变 this 指向</p>\n<p>1.bind (对象)</p>\n<p>改变函数的 this 指向，同时返回一个新函数</p>\n<p>2.call (对象，参数 1, 参数 2)</p>\n<p>改变函数的 this 指向，并且执行该函数</p>\n<p>3.apply (对象，[参数 1, 参数 2])</p>\n<ul>\n<li>\n<p>改变函数的 this 指向，并且执行该函数</p>\n</li>\n<li>\n<p>apply (null,arr) 表示不改变 this 的指向</p>\n</li>\n<li>\n<p>允许通过数组将实参传递给形参</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 应用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 求数组中最大数最小数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 类数组转为数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> trueArr <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 判断引用数据类型的具体类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"str\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"[object String]\"</span></pre></td></tr></table></figure><h1 id=\"十-闭包\"><a class=\"markdownIt-Anchor\" href=\"#十-闭包\">#</a> 十、闭包</h1>\n<p>1. 闭包：定义在一个函数内部的函数</p>\n<p>闭包是这样一种机制：函数嵌套函数，内部函数可以引用外部函数的参数和变量，参数和变量不会被垃圾回收机制所收回.</p>\n<p>这里涉及到几个概念:</p>\n<ol>\n<li>函数嵌套函数</li>\n<li>作用域 (全局变量和局部变量)<br>\n 变量的访问规则</li>\n<li>垃圾回收机制 (garbage collection)<br>\n js 内部不断扫描内存，并清理无引用对象 (自动完成);</li>\n</ol>\n<p>2. 好处</p>\n<ol>\n<li>可以让一个变量长期驻扎在内存当中不被释放</li>\n<li>避免全局变量的污染，和全局变量不同，闭包中的变量无法被外部使用</li>\n<li>私有成员的存在，无法被外部调用，只可以自己内部使用</li>\n</ol>\n<blockquote>\n<p>结论：</p>\n</blockquote>\n<ul>\n<li>闭包是指有权访问另一函数作用域中的变量的函数</li>\n<li>闭包，可以访问函数内部的局部变量，并让其长期驻留内存</li>\n<li>由于闭包会携带包含它的作用域 (运行环境)，因此会比其他函数占用更多内存，过度使用闭包可能会造成性能问题。</li>\n</ul>\n<p>3. 缺点：由于闭包会携带包含它的作用域 (运行环境), 因此会比其他函数占用更多内存，过度使用闭包可能造成性能问题</p>\n",
            "tags": []
        },
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/",
            "title": "Javascript进阶",
            "date_published": "2022-07-12T22:59:00.000Z",
            "content_html": "<h1 id=\"一-函数\"><a class=\"markdownIt-Anchor\" href=\"#一-函数\">#</a> 一、函数</h1>\n<h2 id=\"1概念\"><a class=\"markdownIt-Anchor\" href=\"#1概念\">#</a> 1. 概念</h2>\n<p>函数就是把特定功能的代码抽取出并进行封装，用来重复执行一些功能。</p>\n<h2 id=\"2优点\"><a class=\"markdownIt-Anchor\" href=\"#2优点\">#</a> 2. 优点</h2>\n<p>函数可以重复执行某一部分代码（通过函数名调用）；</p>\n<p>使代码清晰有层次，利于维护；</p>\n<h2 id=\"3创建方式\"><a class=\"markdownIt-Anchor\" href=\"#3创建方式\">#</a> 3. 创建方式</h2>\n<h4 id=\"a关键字声明\"><a class=\"markdownIt-Anchor\" href=\"#a关键字声明\">#</a> a. 关键字声明</h4>\n<p 执行的功能代码=\"\">​\tfunction 函数名 (形参)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"b赋值式声明\"><a class=\"markdownIt-Anchor\" href=\"#b赋值式声明\">#</a> b. 赋值式声明</h4>\n<p 执行的功能代码=\"\">​\tvar 函数名 = function (形参)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"c构造函数法\"><a class=\"markdownIt-Anchor\" href=\"#c构造函数法\">#</a> c. 构造函数法</h4>\n<p>​\t var 函数名 = new Function (); 不推荐使用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4分类\"><a class=\"markdownIt-Anchor\" href=\"#4分类\">#</a> 4. 分类</h2>\n<p>1\t内置函数</p>\n<p>2\t自定义函数</p>\n<p>3\t匿名函数</p>\n<p 执行的功能代码=\"\">function (形参)</p>\n<h2 id=\"5函数的执行\"><a class=\"markdownIt-Anchor\" href=\"#5函数的执行\">#</a> 5. 函数的执行</h2>\n<p>1\t主动执行：</p>\n<p>​\t函数名 ()</p>\n<p>2\t事件驱动：</p>\n<p>​\tele.onclick = 函数名；</p>\n<p>​\tele.onclick=function(){}</p>\n<h2 id=\"6作用域\"><a class=\"markdownIt-Anchor\" href=\"#6作用域\">#</a> 6. 作用域</h2>\n<p>（一）分类</p>\n<h3 id=\"1全局作用域\"><a class=\"markdownIt-Anchor\" href=\"#1全局作用域\">#</a> 1\t全局作用域</h3>\n<p>全局变量：在函数外定义的变量称为全局变量</p>\n<h3 id=\"2局部作用域\"><a class=\"markdownIt-Anchor\" href=\"#2局部作用域\">#</a> 2\t局部作用域</h3>\n<p>局部变量：在函数内定义的变量</p>\n<h3 id=\"3变量的访问规则\"><a class=\"markdownIt-Anchor\" href=\"#3变量的访问规则\">#</a> 3\t变量的访问规则</h3>\n<p>​\t(1)\t若在某个函数内部使用一个变量，那么先查找该函数内是否有变量声明；</p>\n<p>​\t(2)\t如果当前函数无变量 a，则往父级函数查找，如果找到则使用，并停止查找；</p>\n<p>​\t(3)\t如果在父级函数还是无法找到，则继续往上一层函数查找，以此类推；</p>\n<p>​\t(4)\t直到最顶层 (全局作用域)，如果还是没找到，则报错误 ** is not defined；</p>\n<p>在函数内若没有通过 var 声明变量，相当于在全局作用域用 var 声明了该变量</p>\n<h3 id=\"4作用域链\"><a class=\"markdownIt-Anchor\" href=\"#4作用域链\">#</a> 4\t作用域链</h3>\n<p>​\t当函数访问变量时，根据就近原则从内到外查询变量，这个路径称为作用域链；</p>\n<h2 id=\"7函数的实参与形参\"><a class=\"markdownIt-Anchor\" href=\"#7函数的实参与形参\">#</a> 7. 函数的实参与形参</h2>\n<p>1\t形参：函数定义时的参数（变量）</p>\n<p>2\t实参：函数执行时的参数（值）</p>\n<p>形参与实参个数可以不一致</p>\n<p>函数内部隐藏的对象（是一个类数组），保存着实参的信息</p>\n<p>一、声明提前</p>\n<p>概念：代码从上往下顺序执行之前，会将所有的声明提升到当前作用域的最顶端，之后顺序执行</p>\n<p>在变量赋值之前使用变量，变量的值为 undefined</p>\n<p>用赋值式声明函数，若在声明之前调用函数，会报错，** is not  a function；</p>\n<p>用关键字声明函数，可以在声明之前调用函数</p>\n<h2 id=\"基本数据类型与引用数据类型的区别\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型与引用数据类型的区别\">#</a> 基本数据类型与引用数据类型的区别</h2>\n<pre><code>基本数据类型放在栈中,引用数据类型放在堆中\n</code></pre>\n<h3 id=\"1-案例\"><a class=\"markdownIt-Anchor\" href=\"#1-案例\">#</a> ①　案例：</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10,11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> brr<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>brr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">===</span>brr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><h3 id=\"2-数据类型作为函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#2-数据类型作为函数的参数\">#</a> ②　数据类型作为函数的参数</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基本数据类型，传递的是值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 引用数据类型，传递的是地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10,2</span></pre></td></tr></table></figure><h2 id=\"函数的返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数的返回值\">#</a> 函数的返回值</h2>\n<p>1\t概念：通过 return 将函数内部的值返回到函数外，函数外若要使用，必须接收。</p>\n<p>2\t如果函数没有 return，执行完后返回 undefined</p>\n<p>3\treturn 后面的代码不会被执行</p>\n<h2 id=\"this\"><a class=\"markdownIt-Anchor\" href=\"#this\">#</a> this</h2>\n<p>1\t表示当前对象，取决于谁调用了这个函数</p>\n<p>2\t直接执行，this 为 window；事件驱动，this 为绑定的元素。</p>\n<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h2>\n<p>（自己调用自己）</p>\n<p>1\t容易出现死循环</p>\n<p>2\t递归避免死循环，设置好临界点 return</p>\n<h2 id=\"回调函数\"><a class=\"markdownIt-Anchor\" href=\"#回调函数\">#</a> 回调函数</h2>\n<p>（函数作为参数传递）</p>\n<h1 id=\"二-数组\"><a class=\"markdownIt-Anchor\" href=\"#二-数组\">#</a> 二、数组</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念：</h2>\n<p>一系列数据的集合，每一项（数组的元素）可以保存任何类型的数据，每个元素之间用逗号隔开<br>\n 2. 数组的声明<br>\n (1）字面量 var arr = [1,2,3];<br>\n(2）构造函数</p>\n<pre><code>var arr = new Array(3); 创建长度为3的数组\nvar arr = new Array(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;);  创建数组及定义好每一项的值\n</code></pre>\n<p>3. 数组的操作 (增删改查)</p>\n<p>数组的索引:arr [索引]，索引从 0 开始计数</p>\n<p>数组的长度:arr.length<br>\n 数组的遍历：遍历索引从 0-arr.length-1，通过 arr [索引] 拿到每一项的值</p>\n<h2 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\">#</a> 方法</h2>\n<h3 id=\"1-增删改\"><a class=\"markdownIt-Anchor\" href=\"#1-增删改\">#</a> 1. 增删改</h3>\n<pre><code>(1)增删改方法,改变原数组,返回值为长度或改变项\n\tpush() ： 往最后添加项\n\tpop() ： 删除最后项\n\tunshift() ： 往前添加项\n\tshift() ： 删除最前项\n\tsplice(startIdx,num,item) : 增、删、换\n\treverse() : 数组倒序\n</code></pre>\n<h3 id=\"2-传递与复制\"><a class=\"markdownIt-Anchor\" href=\"#2-传递与复制\">#</a> 2. 传递与复制</h3>\n<pre><code>(2)传递、复制方法,不改变原数组\n\tslice(startIdx,endIdx) : 截取数组\n\tjoin('拼接符') ： 数组拼接为字符串,默认逗号拼接\n\tconcat(数组1,数组2,...) ： 合并数组,返回调用方法的新数组\n</code></pre>\n<h2 id=\"数组的排序算法\"><a class=\"markdownIt-Anchor\" href=\"#数组的排序算法\">#</a> 数组的排序算法</h2>\n<h3 id=\"1冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#1冒泡排序\">#</a> 1. 冒泡排序</h3>\n<p>​\t外层遍历的是轮数<br>\n​\t内层是每一轮，遍历当前索引，与索引 + 1 进行比较换位置。每一轮将一个最大的数排在最后</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">var</span> box<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2选择排序\"><a class=\"markdownIt-Anchor\" href=\"#2选择排序\">#</a> 2. 选择排序</h3>\n<ul>\n<li>\n<p>固定被比较的索引，与后面的每个索引对应的值进行比较</p>\n</li>\n<li>\n<p>外层循环是固定的被比较的索引 i：0-arr.length-2</p>\n</li>\n<li>\n<p>内层循环是比较 i 的索引 j，从 i+1 到 arr.length 进行遍历</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">343</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3快速排序\"><a class=\"markdownIt-Anchor\" href=\"#3快速排序\">#</a> 3. 快速排序</h3>\n<p>（递归）</p>\n<pre><code>var arr=[1,9,2,23,10,55,33];\nfastSort(arr);\nfunction fastSort(arr)&#123;\n\tif(arr.length&lt;=1)&#123;\n\t\treturn arr;\n\t&#125;\n\tvar midIdx=parseInt(arr.length/2);\n\tvar midNum=arr.splice(midIdx,1)[0];\n\tvar ltArr=[];\n\tvar gtArr=[];\n\tfor(var i=0;i&lt;arr.length;i++)&#123;\n\t\tif(arr[i]&lt;=midNum)&#123;\n\t\t\tltArr.push(arr[i]);\n\t\t&#125;else if(arr[i]&gt;midNum)&#123;\n\t\t\tgtArr.push(arr[i]);\n\t\t&#125;\n\t&#125;\n\treturn fastSort(ltArr).concat([midNum],fastSort(gtArr));\n&#125;\nconsole.log(fastSort(arr));\n</code></pre>\n<h3 id=\"4sort排序\"><a class=\"markdownIt-Anchor\" href=\"#4sort排序\">#</a> 4.sort () 排序</h3>\n<p>arr.sort () 将原数组中的元素排序，并返回排序后的数组</p>\n<ul>\n<li>\n<p>默认以字符串的排列方式（转换成 ASCII 码进行对比)</p>\n</li>\n<li>\n<p>sort (function (a,b){return a-b;}) 从小到大排序</p>\n<p>var res = arr.sort(function(a,b){<br>\n//return 值&gt; 0 a,b 互换<br>\n //return 值 &lt;=0 不动<br>\n return a-b;<br>\n});<br>\nconsole.log(arr,res);</p>\n</li>\n</ul>\n<h2 id=\"数组的传递与复制\"><a class=\"markdownIt-Anchor\" href=\"#数组的传递与复制\">#</a> 数组的传递与复制</h2>\n<h3 id=\"1传递\"><a class=\"markdownIt-Anchor\" href=\"#1传递\">#</a> 1. 传递</h3>\n<ul>\n<li>基本数据类型中，传递的是值 (数字，字符串，布尔类型，null,undefined)</li>\n<li>引用数据类型中，传递的是在堆中的地址 (数组，对象)</li>\n</ul>\n<h3 id=\"2复制\"><a class=\"markdownIt-Anchor\" href=\"#2复制\">#</a> 2. 复制</h3>\n<p>基本数据类型：改变复制的值，不影响原值</p>\n<pre><code>var a = 10;\nvar b = a;//var b = 10\nb = 30;\nconsole.log(a,b);//10,30\n</code></pre>\n<p>引用数据类型：改变复制的值，会影响原值（浅复制）</p>\n<pre><code>var arr = [10,20,30];\nvar brr = arr;\nbrr[0] = 66;\nconsole.log(arr,brr);//[66,20,30][66,20,30]\n</code></pre>\n<p>引用数据类型：改变复制的值，不影响原值（深复制）</p>\n<ul>\n<li>for 循环拷贝数组的每一项 (不适用多维数组)</li>\n<li>slice(0)</li>\n</ul>\n<pre><code>var arr = [10,20,30];\n// var res = [];\n// for(var i=0;i&lt;arr.length;i++)&#123;\n// \tres.push(arr[i]);\n// &#125;\n// console.log(res);//10,20,30\n// res[0] = 40;\n// console.log(arr,res);\n//=======================================\nvar res = arr.slice(0);\nres[0] = 40;\nconsole.log(arr,res);\n</code></pre>\n<h2 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\">#</a> 多维数组</h2>\n<p>数组嵌套数组</p>\n<pre><code>// var arr = [[&quot;hzh&quot;,&quot;hyd&quot;],[&quot;lm&quot;,&quot;jh&quot;],[&quot;xw&quot;,&quot;rw&quot;],[&quot;lz&quot;,&quot;zlh&quot;],[&quot;hhm&quot;,&quot;dz&quot;]];\nvar arr = [];\nvar brr = [];\nvar n = 0;\nfor(var i=1;i&lt;=25;i++)&#123;\n\tbrr.push(i);\n\tn++;\n\tif(n % 5==0)&#123;\n\t\tarr.push(brr);\n\t\tbrr = [];\n\t&#125;\n&#125;\nconsole.log(arr);\n</code></pre>\n<h1 id=\"三-对象\"><a class=\"markdownIt-Anchor\" href=\"#三-对象\">#</a> 三、对象</h1>\n<h2 id=\"创建对象\"><a class=\"markdownIt-Anchor\" href=\"#创建对象\">#</a> 创建对象</h2>\n<p>1. 字面量</p>\n<pre><code>var obj = &#123;\n\tname : &quot;xiaofang&quot;,\n\tage : 17,\n\thobby : &quot;学习&quot;\n&#125;\n</code></pre>\n<p>2. 构造函数</p>\n<pre><code>var obj1 = new Object();\n</code></pre>\n<h2 id=\"对象的操作\"><a class=\"markdownIt-Anchor\" href=\"#对象的操作\">#</a> 对象的操作</h2>\n<p>操作对象键对应的值</p>\n<p>obj. 键</p>\n<p>obj [“具题的键”] obj [变量]<br>\n 对象的遍历</p>\n<pre><code> for(var key in obj)&#123;\n\tkey代表键;\n\tobj[key]获取每个键对应的值\n&#125;\n</code></pre>\n<p>对于单个键值对而言，键是变量，值就是值</p>\n<p>对于整个对象而言，对象是变量，键是具体的属性</p>\n<h3 id=\"1添加-修改属性\"><a class=\"markdownIt-Anchor\" href=\"#1添加-修改属性\">#</a> (1) 添加、修改属性</h3>\n<pre><code>obj.sex = '男';\nobj['weight'] = 60；\n</code></pre>\n<h3 id=\"2删除属性\"><a class=\"markdownIt-Anchor\" href=\"#2删除属性\">#</a> (2) 删除属性</h3>\n<pre><code>var obj = &#123;name:'laoxie',age:18,gender:'man'&#125;\n//删除age属性\ndelete obj.age;\n</code></pre>\n<h3 id=\"3读取属性值\"><a class=\"markdownIt-Anchor\" href=\"#3读取属性值\">#</a> (3) 读取属性值</h3>\n<pre><code>obj.name;//==&gt;小明\n//如果读取一个不存在的属性，返回undefined\n</code></pre>\n<h3 id=\"4遍历对象forin\"><a class=\"markdownIt-Anchor\" href=\"#4遍历对象forin\">#</a> (4) 遍历对象 for…in</h3>\n<pre><code>    var obj = &#123;name:'laoxie'，age:18，gender:'男'&#125;；  \n    for(var key in obj)&#123;\n        //遍历obj对象里面所有的键key,Obj[key]操作所有键对应的值。\n        document.write(obj[key]);//分别输出：'laoxie',18,'男'\n    &#125;\n</code></pre>\n<h3 id=\"数组与对象的组合\"><a class=\"markdownIt-Anchor\" href=\"#数组与对象的组合\">#</a> 数组与对象的组合</h3>\n<pre><code> [&#123;\n        id:'001',\n        name:'iphone7 plugs',\n        nickname:'肾7',\n        imgurl:'img/ip7.jpg',\n        price:5899.00,\n        sale:5888.00,\n        color:'土豪金'\n    &#125;,&#123;\n        id:'002',\n        name:'Note7',\n        nickname:'爆炸7',\n        imgurl:'img/note7.jpg',\n        price:3899.00,\n        sale:998.00,\n        color:'黑色'\n    &#125;,&#123;\n        id:'003',\n        name:'荣耀7',\n        nickname:'牛x7',\n        imgurl:'img/honor7.jpg',\n        price:1999.00,\n        sale:1899.00,\n        color:'白色'\n    &#125;]\n</code></pre>\n<h1 id=\"四-es5数组新增方法\"><a class=\"markdownIt-Anchor\" href=\"#四-es5数组新增方法\">#</a> 四、ES5 数组新增方法</h1>\n<h2 id=\"迭代遍历方法\"><a class=\"markdownIt-Anchor\" href=\"#迭代遍历方法\">#</a> 迭代（遍历）方法</h2>\n<h3 id=\"1-foreach\"><a class=\"markdownIt-Anchor\" href=\"#1-foreach\">#</a> 1. forEach()</h3>\n<p>forEach (function (item,idx,arr){})  遍历数组，与 for 循环没有太大差别，比 for 循环方便</p>\n<ul>\n<li>item 代表数组中的每一项</li>\n<li>idx 代表索引</li>\n<li>arr 代表当前数组</li>\n</ul>\n<pre><code>var arr = [777,10,44,66];\nfor(var i=0;i&lt;arr.length;i++)&#123;\n\tconsole.log(arr[i]);\n&#125;\narr.forEach(function(item,idx,arr)&#123;\n\tconsole.log(item,idx,arr);\n&#125;)\n</code></pre>\n<h3 id=\"2map\"><a class=\"markdownIt-Anchor\" href=\"#2map\">#</a> 2.map()</h3>\n<p>map (function (item,idx,arr){return ;})  返回一个数量相等的数组，内容是什么取决于在 fn 中的返回值</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.map(function(item,idx,arr)&#123;\n\t\t\tconsole.log(item);\n\t\t\treturn item*2;\n\t\t&#125;)\n\t\tconsole.log(res);\n</code></pre>\n<h3 id=\"3filter\"><a class=\"markdownIt-Anchor\" href=\"#3filter\">#</a> 3.filter()</h3>\n<p>filter (function (item,idx,arr){}) 返回一个数组，存放执行 fn 后返回 true 的数组元素 (过滤)</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.filter(function(item,idx,arr)&#123;\n\t\t\treturn item&gt;55;\n\t\t&#125;)\n\t\tconsole.log(res);\n</code></pre>\n<h3 id=\"4some\"><a class=\"markdownIt-Anchor\" href=\"#4some\">#</a> 4.some()</h3>\n<p>some (function (item,idx,arr){}) 返回布尔值，如果 fn 对数组任何一项返回 true，则返回 true。</p>\n<p>查找数组中是否有满足条件的项。</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.some(function(item,idx,arr)&#123;\n\t\t\tconsole.log(idx);//0\n\t\t\treturn item&gt;666;//777&gt;666直到找到true就不再遍历\n\t\t&#125;)\n</code></pre>\n<h3 id=\"5every\"><a class=\"markdownIt-Anchor\" href=\"#5every\">#</a> 5.every()</h3>\n<p>every (function (item,idx,arr){}) 返回布尔值，若 fn 对数组中有一项返回 false，则返回 false</p>\n<p>检查数组所有项，是否都满足条件，是则返回 true，否则返回 false。</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.every(function(item,idx,arr)&#123;\n\t\t\treturn item&gt;666;\n\t\t&#125;)\n\t\tconsole.log(res);\n</code></pre>\n<h2 id=\"归并方法\"><a class=\"markdownIt-Anchor\" href=\"#归并方法\">#</a> 归并方法</h2>\n<h3 id=\"reducefninitval\"><a class=\"markdownIt-Anchor\" href=\"#reducefninitval\">#</a> reduce(fn,initVal)</h3>\n<p>fn(prev,current,idx,arr)</p>\n<ul>\n<li>prev: fn 上一次执行的返回值，第一次为 initVal，若 initVal 没有定义，为数组的第一个元素值</li>\n<li>current: 当前索引对应的值</li>\n<li>idx: 当前索引</li>\n<li>arr: 数组</li>\n</ul>\n<p>应用： 数组求和</p>\n<pre><code>//对数组求和\nvar res = arr.reduce(function(prev,current,idx,arr)&#123;\n\treturn prev+current;\n&#125;,0);\n</code></pre>\n<h3 id=\"reducerightfninitval\"><a class=\"markdownIt-Anchor\" href=\"#reducerightfninitval\">#</a> reduceRight(fn,initVal)</h3>\n<ul>\n<li>fn (prev,cur,index,array): fn 是每一项调用的函数，函数接受 4 个参数分别是\n<ul>\n<li>prev：函数上一次的返回值。（第一次的值参考 initVal）</li>\n<li>cur：当前值，</li>\n<li>index：索引值，</li>\n<li>array：当前数组，</li>\n</ul>\n</li>\n<li>函数需要返回一个值，这个值会在下一次迭代中作为 prev 的值</li>\n<li>initVal: 迭代初始值（可省略），如果缺省，prev 的值为数组第一项</li>\n</ul>\n<h2 id=\"静态方法\"><a class=\"markdownIt-Anchor\" href=\"#静态方法\">#</a> 静态方法</h2>\n<p>只能由构造函数自己去调用</p>\n<h3 id=\"arrayisarray\"><a class=\"markdownIt-Anchor\" href=\"#arrayisarray\">#</a> Array.isArray()</h3>\n<p>Array.isArray () 判断是否为数组，返回布尔值</p>\n<h2 id=\"索引方法\"><a class=\"markdownIt-Anchor\" href=\"#索引方法\">#</a> 索引方法</h2>\n<h3 id=\"indexoflastindexofa3\"><a class=\"markdownIt-Anchor\" href=\"#indexoflastindexofa3\">#</a> indexOf/lastIndexOf(“a”,3)</h3>\n<p>indexOf (keyword [,startIdx]) 返回 keyword 所在数组中的索引值；</p>\n<ul>\n<li>\n<p>如果数组不存在 keyword，则返回 - 1</p>\n</li>\n<li>\n<p>startIdx 规定开始查找的索引值</p>\n</li>\n<li>\n<p>应用：判断数组中是否存在某个值</p>\n</li>\n</ul>\n<pre><code>var arr=[10,20,50,40,50]\nconsole.log(arr.indexOf(50))\n//2\nconsole.log(arr.indexOf(50,3))\n//4\n</code></pre>\n<h1 id=\"五-字符串\"><a class=\"markdownIt-Anchor\" href=\"#五-字符串\">#</a> 五、字符串</h1>\n<p>1. 定义：字符串就是一串字符，由双（单）引号括起来</p>\n<p>2. 创建字符串</p>\n<p>​\t字面量 var str=“hello”</p>\n<p>​\t构造函数 var str=new String (“hello”);</p>\n<p>3. 字符串的操作</p>\n<p>​\t字符串的长度 str.length</p>\n<p>​\t字符串的索引 str [索引]   ==&gt;es5</p>\n<p>​\tstr.charAt (索引)</p>\n<p>4. 字符串的方法</p>\n<p>（1）split (分隔符)，将字符串根据分隔符，拆分成数组。原字符串不变</p>\n<p>（2）replace (需要被替换的字符，替换后的字符)，字符串的替换方法。原字符串不变</p>\n<p>（3）slice (start [,end]) 字符串的截取方法，截取 start 到 end，不包括 end 的字符串，支持负数</p>\n<p>substring (start [,end]) 与 slice 一样，但不支持负数</p>\n<p>substr (start [,len]) 支持负数，len 为截取的数量</p>\n<p>（4）字符串大小写转换</p>\n<p>toLowerCase ()  转换成小写</p>\n<p>toUpperCase ()  转换成大写</p>\n<p>（5）trim () 删除前后所有空格，返回新的字符串 (es5)</p>\n<p>5. 字符与字符编码</p>\n<h1 id=\"六-正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#六-正则表达式\">#</a> 六、正则表达式</h1>\n<p>1. 字面量创建</p>\n<p>/ 字符串 /</p>\n<p>例如：var reg = / 傻逼 /</p>\n<p>​\tg 全局匹配</p>\n<p>​\ti 不区分大小写</p>\n<p>2. 构造函数创建</p>\n<p>​\tnew RegExp (“字符串”,“gi”)</p>\n<p>​\tnew RegExp (变量，“gi”)</p>\n<h1 id=\"七-math\"><a class=\"markdownIt-Anchor\" href=\"#七-math\">#</a> 七、Math</h1>\n<p>1. 概念：一个保存数学公式和信息的对象</p>\n<p>2. 属性：</p>\n<p>Math.PI\t\tπ  3.1415926…</p>\n<p>3. 方法：</p>\n<p>Math.random ()  // 返回 0-1 之间的随机数（不包括 1）</p>\n<p>Math.round ()  // 四舍五入</p>\n<p>Math.ceil ()  // 向上取整</p>\n<p>Math.floor ()  // 向下取整</p>\n<p>Math.max (num1,num2,…) // 最大的数</p>\n<p>Math.min (num1,num2,…) // 最小的数</p>\n<p>Math.abs () // 绝对值</p>\n<p>Math.pow (x,y)  //x 的 y 次方</p>\n<h1 id=\"八-date\"><a class=\"markdownIt-Anchor\" href=\"#八-date\">#</a> 八、Date</h1>\n<h2 id=\"创建日期时间对象\"><a class=\"markdownIt-Anchor\" href=\"#创建日期时间对象\">#</a> 创建日期时间对象</h2>\n<p>构造函数 new Date ();</p>\n<p>不带参数，得到的是代码执行时的时间（本地时间）</p>\n<p>带参数：字符串，指定日期；数字，指定毫秒数（距离纪元时间的毫秒数）。</p>\n<pre><code>var d=new Date();//代码运行时的本地时间\nvar d=new Date(&quot;2017/10/10 12:00:00&quot;);\nvar d=new Date(2000); //距离纪元时间的毫秒数\n</code></pre>\n<h2 id=\"时间日期对象的方法\"><a class=\"markdownIt-Anchor\" href=\"#时间日期对象的方法\">#</a> 时间日期对象的方法</h2>\n<p>1. 获取方法</p>\n<p>获取年月日</p>\n<pre><code>var d=new Date();\nvar year=d.getFullYear();//2019\nvar month=d.getMonth(); //月份0-11，得到的月份记得+1才是真实月份;\nvar date=d.getDate()\n</code></pre>\n<p>获取星期</p>\n<pre><code>var d=new Date();\nvar day=d.getDay();  //0-6:星期天-星期六\n</code></pre>\n<p>获取时分秒</p>\n<pre><code>var d=new Date();\nvar hour=d.getHours();\nvar minute=d.getMinutes();\nvar second=d.getSeconds();\n</code></pre>\n<p>date.getTime (); 获取距离纪元时间的毫秒数</p>\n<h2 id=\"静态方法-2\"><a class=\"markdownIt-Anchor\" href=\"#静态方法-2\">#</a> 静态方法</h2>\n<p>Date.parse (“2015-08-24”)// 返回指定日期距 1970-1-1 零时的毫秒数</p>\n<blockquote>\n<p>PS：转换格式默认支持 2015-08-24 或 2015/08/24</p>\n</blockquote>\n<p>Date.now ();// 返回执行这行代码时距 1970-1-1 零时的毫秒数</p>\n<h2 id=\"定时器\"><a class=\"markdownIt-Anchor\" href=\"#定时器\">#</a> 定时器</h2>\n<p>1.var timer=setInterval (function (){}, 毫秒数)；每隔多少毫秒执行一次函数</p>\n<p>2.setTimeout (function (){}, 毫秒数)；延迟多少毫秒执行函数，只执行一次</p>\n<p>3.clearInterval (timer)；清除指定 id 标识的定时器操作</p>\n<p>4.clearTimeout (timer)；清除指定 id 标识的延迟操作</p>\n<h1 id=\"九-bom\"><a class=\"markdownIt-Anchor\" href=\"#九-bom\">#</a> 九、BOM</h1>\n<h2 id=\"概念-2\"><a class=\"markdownIt-Anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<p>BOM 是 Browser Object Model（浏览器对象模型）的缩写，提供与浏览器窗口进行交互的对象。JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C, 而 BOM 缺乏标准。这也是各种浏览器不兼容的根源所在；</p>\n<p>1.window 对象</p>\n<p>window 对象是 BOM 的核心，是最顶层的对象，所有对象都是通过它延伸出来的</p>\n<p>2. 全局作用域下定义的变量都是 window 对象的属性；</p>\n<p>尽量避免声明全局变量，减少命名冲突，避免全局污染；</p>\n<p>在函数内部不用 var 声明的变量会成为全局变量，即 window 对象的属性</p>\n<p>window 对象可以在代码中省略，如 window.alert () 可以写成 alert ();</p>\n<p>delete 不能删除全局变量；</p>\n<pre><code>var obj = &#123;name:'xxx'&#125;\n\n//删除对象的属性用delete：\ndelete obj.name;\n</code></pre>\n<h2 id=\"window对象下的属性\"><a class=\"markdownIt-Anchor\" href=\"#window对象下的属性\">#</a> window 对象下的属性</h2>\n<p>1. 浏览器窗口尺寸</p>\n<p>innerWidth/innerHeight, // 表示浏览器窗口” 可视区域” 尺寸</p>\n<p>outerWidth/outerHeight// 表示整个浏览器窗口的尺寸</p>\n<p>2. 滚动相关</p>\n<ul>\n<li>scrollX/scrollY// 获取浏览器窗口滚动条滚动过的距离</li>\n<li>scrollTo (x,y) // 设置浏览器滚动距离</li>\n<li>scrollBy (xnum,ynum) // 设置基于当前位置滚动的距离，可以为负数</li>\n</ul>\n<h2 id=\"window的常用事件\"><a class=\"markdownIt-Anchor\" href=\"#window的常用事件\">#</a> window 的常用事件</h2>\n<ul>\n<li>onload // 页面资源全部加载完成后触发这个事件（开发中不常用）（document.addEventListener (“DOMContentLoaded”,function (){})）</li>\n<li>onscroll// 窗口滚动条滚动时触发</li>\n<li>onresize // 窗口大小改变时触发</li>\n</ul>\n<h2 id=\"系统弹窗\"><a class=\"markdownIt-Anchor\" href=\"#系统弹窗\">#</a> 系统弹窗</h2>\n<h3 id=\"1alertmsg\"><a class=\"markdownIt-Anchor\" href=\"#1alertmsg\">#</a> 1.alert(msg)</h3>\n<p>// 弹出对话框</p>\n<h3 id=\"2confirmmsg\"><a class=\"markdownIt-Anchor\" href=\"#2confirmmsg\">#</a> 2.confirm(msg)</h3>\n<p>// 弹出警告弹窗，返回布尔值</p>\n<h3 id=\"3promptmsgdefault\"><a class=\"markdownIt-Anchor\" href=\"#3promptmsgdefault\">#</a> 3.prompt(msg,default)</h3>\n<p>// 弹出输入框，返回消息或 null</p>\n<p>以上三个方法都会暂停代码的执行</p>\n<h3 id=\"4openurlnameoptions\"><a class=\"markdownIt-Anchor\" href=\"#4openurlnameoptions\">#</a> 4.open(url,name,[options])</h3>\n<p>打开一个新窗口并返回新 window 对象</p>\n<p>name: 不命名会每次打开新窗口，命名的第一次打开新窗口，之后在这个窗口中加载</p>\n<p>options 为字符串：width=400,height=400,top=200,left=200’</p>\n<p>opener 父窗口对象，通过 open 方法打开的窗口才有 opener 对象</p>\n<h3 id=\"5close\"><a class=\"markdownIt-Anchor\" href=\"#5close\">#</a> 5.close():</h3>\n<p>关闭窗口</p>\n<h3 id=\"6print\"><a class=\"markdownIt-Anchor\" href=\"#6print\">#</a> 6.print():</h3>\n<p>调出打印对话框</p>\n<h2 id=\"属性对象-location\"><a class=\"markdownIt-Anchor\" href=\"#属性对象-location\">#</a> 属性对象 location</h2>\n<p>location 是 BOM 最有用的对象之一，保存着当前窗口中加载文档的相关信息，还提供一些导航功能，它是个很特别的对象，既是 window 的属性，也是 document 的属性</p>\n<pre><code>var src=https://www.baidu.com/s?wd=yangmi\nlocation.href='整个网址/src'\nlocation.hash='#后面的字符'\nlocation.search='?wd=yangmi'\n</code></pre>\n<h1 id=\"十-dom\"><a class=\"markdownIt-Anchor\" href=\"#十-dom\">#</a> 十、DOM</h1>\n<h2 id=\"概念-3\"><a class=\"markdownIt-Anchor\" href=\"#概念-3\">#</a> 概念</h2>\n<p>DOM 是 Document Object Model（文档对象模型）的缩写，它是 W3C 国际组织的一套 Web 标准。是针对 HTML 和 XML 文档的一个 API，它定义了访问 HTML 文档对象的一套属性、方法和事件。</p>\n<p>1. 节点</p>\n<p>元素节点</p>\n<p>属性节点</p>\n<p>文本节点</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bb<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>bilibili<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>//此处4个节点，1元素，2属性，1文本</pre></td></tr></table></figure><h2 id=\"获取元素节点\"><a class=\"markdownIt-Anchor\" href=\"#获取元素节点\">#</a> 获取元素节点</h2>\n<h3 id=\"1通过id名\"><a class=\"markdownIt-Anchor\" href=\"#1通过id名\">#</a> 1. 通过 id 名</h3>\n<p>document.getElementById (“id 名”)</p>\n<ul>\n<li>通过 ID 获取元素的节点（速度最快）</li>\n<li>必须通过 document 调用</li>\n<li>返回 DOM 节点对象，如果 id 不存在返回 null</li>\n</ul>\n<h3 id=\"2通过类名\"><a class=\"markdownIt-Anchor\" href=\"#2通过类名\">#</a> 2. 通过类名</h3>\n<p>getElementsByClassName (“类名”); // 通过类名获取；可以通过其他元素节点获取</p>\n<ul>\n<li>通过 class 类名获取节点列表</li>\n<li>返回类数组，如果类名不存在返回空数组 []</li>\n</ul>\n<pre><code>var box=document.getElementById(&quot;box&quot;);\nvar bb=box.getElementsByClassName(&quot;bb&quot;);\n</code></pre>\n<h3 id=\"3通过标签名\"><a class=\"markdownIt-Anchor\" href=\"#3通过标签名\">#</a> 3. 通过标签名</h3>\n<p>getElementByTagName (“标签名”)；</p>\n<ul>\n<li>通过标签名获取元素节点列表</li>\n<li>返回类数组，如果 tagname 不存在返回空数组 []</li>\n</ul>\n<h3 id=\"4通过name属性\"><a class=\"markdownIt-Anchor\" href=\"#4通过name属性\">#</a> 4. 通过 name 属性</h3>\n<p>document.getElementsByName()</p>\n<ul>\n<li>通过 name 属性获取元素节点列表</li>\n<li>必须通过 document 调用</li>\n<li>返回类数组，如果 name 属性不存在返回空数组 []</li>\n</ul>\n<p>注意：如果确认元素存在，但是返回 null 或 []，一定是代码执行顺序的问题</p>\n<h3 id=\"5利用节点关系\"><a class=\"markdownIt-Anchor\" href=\"#5利用节点关系\">#</a> 5. 利用节点关系，</h3>\n<p>获取其他节点（包含文本节点）</p>\n<h4 id=\"获取父级节点\"><a class=\"markdownIt-Anchor\" href=\"#获取父级节点\">#</a> 获取父级节点</h4>\n<p>ele.parentNode  // 得到节点的父节点</p>\n<h4 id=\"获取子节点\"><a class=\"markdownIt-Anchor\" href=\"#获取子节点\">#</a> 获取子节点</h4>\n<p>ele.childNodes  // 得到 ele 元素的全部子节点列表（类数组）</p>\n<p>ele.firstChild  // 获得 ele 元素的第一个子节点</p>\n<p>ele.lastChild  // 获得 ele 元素的最后一个子节点</p>\n<h4 id=\"获取兄弟节点\"><a class=\"markdownIt-Anchor\" href=\"#获取兄弟节点\">#</a> 获取兄弟节点</h4>\n<p>ele.nextSibling  // 获得 ele 元素的下一个兄弟节点</p>\n<p>ele.previousSibling  // 获得 ele 元素的上一个兄弟节点</p>\n<h3 id=\"6节点的三个属性\"><a class=\"markdownIt-Anchor\" href=\"#6节点的三个属性\">#</a> 6. 节点的三个属性</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">nodeType</th>\n<th style=\"text-align:center\">nodeName</th>\n<th style=\"text-align:center\">nodeValue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1. 元素节点</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">标签名大写</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2. 属性节点</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">属性名</td>\n<td style=\"text-align:center\">属性值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3. 文本节点</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">#text</td>\n<td style=\"text-align:center\">文本内容</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7利用元素节点关系\"><a class=\"markdownIt-Anchor\" href=\"#7利用元素节点关系\">#</a> 7. 利用元素节点关系</h3>\n<h4 id=\"获取父级节点元素\"><a class=\"markdownIt-Anchor\" href=\"#获取父级节点元素\">#</a> 获取父级节点元素</h4>\n<p>parentElement</p>\n<h4 id=\"获取子级元素节点\"><a class=\"markdownIt-Anchor\" href=\"#获取子级元素节点\">#</a> 获取子级元素节点</h4>\n<p>children 获取元素的全部子元素</p>\n<p>firstElementChild 获取第一个子元素</p>\n<p>lastElementChild 获取最后一个子元素</p>\n<h4 id=\"获取兄弟元素节点\"><a class=\"markdownIt-Anchor\" href=\"#获取兄弟元素节点\">#</a> 获取兄弟元素节点</h4>\n<p>nextElementSibling 获取下一个元素</p>\n<p>previousElementSibling 获取上一个元素</p>\n<h3 id=\"8节点的创建与插入方法\"><a class=\"markdownIt-Anchor\" href=\"#8节点的创建与插入方法\">#</a> 8. 节点的创建与插入方法</h3>\n<p>创建：</p>\n<ul>\n<li>document.createElement () 创建一个元素节点</li>\n<li>document.createTextNode () 创建一个文本节点</li>\n<li>document.createAttribute () 创建一个属性节点（了解）</li>\n</ul>\n<p>插入：</p>\n<ul>\n<li>parent.appendChild ()  向节点的子节点列表的结尾添加新的子节点</li>\n<li>parent.insertBefore (new,node)  在指定的子节点 node 前插入新的子节点 new。</li>\n<li>ele.setAttributeNode (attrNode) 在指定元素中插入一个属性节点（了解）</li>\n</ul>\n<p>对页面已存在节点的处理</p>\n<p>复制</p>\n<ul>\n<li>cloneNode (boolean)  复制节点，为 true 是深复制。</li>\n</ul>\n<p>删除：</p>\n<ul>\n<li>parent.removeChild (ele)  删除（并返回）当前节点 parent 的指定子节点 ele。</li>\n</ul>\n<p>判断：</p>\n<ul>\n<li>parent.hasChildNodes () 判断当前节点是否拥有子节点，返回布尔值</li>\n</ul>\n<h2 id=\"元素节点对象的属性及方法\"><a class=\"markdownIt-Anchor\" href=\"#元素节点对象的属性及方法\">#</a> 元素节点（对象）的属性及方法</h2>\n<h3 id=\"1常用属性\"><a class=\"markdownIt-Anchor\" href=\"#1常用属性\">#</a> 1. 常用属性</h3>\n<p>可以通过点语法或方括号访问</p>\n<ul>\n<li>tagName 获取元素元素的标签名</li>\n<li>id 设置 / 获取元素 id 属性</li>\n<li>name 设置 / 获取元素 name 属性</li>\n<li>style 设置 / 获取元素的内联样式</li>\n<li>className 设置 / 获取元素的 class 属性</li>\n<li>innerHTML 设置 / 获取元素的内容（包含 html 代码）</li>\n<li>outerHTML 设置或获取元素及其内容（包含 html 代码）</li>\n<li>innerText 设置或获取位于元素标签内的文本</li>\n<li>outerText 设置 (包括标签) 或获取 (不包括标签) 元素的文本</li>\n</ul>\n<h3 id=\"2元素方法修改html属性\"><a class=\"markdownIt-Anchor\" href=\"#2元素方法修改html属性\">#</a> 2. 元素方法（修改 html 属性）</h3>\n<ul>\n<li>ele.getAttribute (attr) // 获取元素的属性值（自定义属性获取）</li>\n<li>ele.setAttribute (attr,val); // 设置元素的属性</li>\n<li>ele.removeAttribute (attr) // 删除属性 attr</li>\n<li>ele.hasAttribute (attr) // 判断是否存在属性 attr</li>\n</ul>\n<h3 id=\"3盒模型相关\"><a class=\"markdownIt-Anchor\" href=\"#3盒模型相关\">#</a> 3. 盒模型相关</h3>\n<pre><code>offsetTop: 当前元素离&lt;定位父级&gt;元素顶部的距离。\noffsetLeft: 当前元素离&lt;定位父级&gt;元素左边的距离。\n\t以上两个属性如果没定位的父级，则相对于根元素html的距离\noffsetWidth: 当前元素的宽度（border + padding + content）\noffsetHeight: 当前元素的高度（border + padding + content）\n</code></pre>\n<h2 id=\"table对象了解\"><a class=\"markdownIt-Anchor\" href=\"#table对象了解\">#</a> table 对象 (了解)</h2>\n<h3 id=\"1-table对象属性方法\"><a class=\"markdownIt-Anchor\" href=\"#1-table对象属性方法\">#</a> 1. table 对象属性 &amp; 方法</h3>\n<ul>\n<li>rows 返回包含表格中所有行的一个数组</li>\n<li>tBodies 返回包含表格中所有 tbody 的一个数组</li>\n<li>insertRow (index) 在表格中插入一个新行。</li>\n<li>deleteRow (index) 从表格删除一行。</li>\n</ul>\n<h3 id=\"2-tr对象属性方法\"><a class=\"markdownIt-Anchor\" href=\"#2-tr对象属性方法\">#</a> 2. tr 对象属性 &amp; 方法</h3>\n<ul>\n<li>cells 返回包含表格中所有单元格的一个数组</li>\n<li>rowIndex 返回该行在表中的位置</li>\n<li>sectionRowIndex 返回在 tBody 、tHead 或 tFoot 中行的位置。</li>\n<li>insertCell (index) 在一行中的指定位置插入一个空的列</li>\n<li>deleteCell (index) 删除行中的指定的单元格</li>\n</ul>\n<h3 id=\"3-tdth对象属性方法\"><a class=\"markdownIt-Anchor\" href=\"#3-tdth对象属性方法\">#</a> 3. td/th 对象属性 &amp; 方法</h3>\n<ul>\n<li>cellIndex 返回单元格在表格行的单元格集合中的位置。</li>\n</ul>\n<h1 id=\"十一-事件\"><a class=\"markdownIt-Anchor\" href=\"#十一-事件\">#</a> 十一、事件</h1>\n<h2 id=\"鼠标事件\"><a class=\"markdownIt-Anchor\" href=\"#鼠标事件\">#</a> 鼠标事件</h2>\n<p>onclick 当用户点击某个对象时调用的事件。</p>\n<p>ondblclick 当用户双击某个对象时调用的事件。</p>\n<p>onmousedown 鼠标按钮被按下。</p>\n<p>onmouseup 鼠标按键被松开。</p>\n<p>onmouseover 鼠标移到某元素之上。</p>\n<p>onmouseout 鼠标从某元素移开。</p>\n<p>onmousemove 鼠标被移动时触发。</p>\n<p>onmouseenter 在鼠标光标从元素外部移动到元素范围之内时触发。这个事件不冒泡</p>\n<p>onmouseleave 在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡</p>\n<p>oncontextmenu 鼠标右键菜单展开时触发</p>\n<p>PS：click = mousedown + mouseup, dblclick = click*2 (短时间内两次单击);<br>\n 执行顺序：mouseover=&gt;mouseenter; mouseout =&gt; mouseleave</p>\n<h2 id=\"事件对象\"><a class=\"markdownIt-Anchor\" href=\"#事件对象\">#</a> 事件对象</h2>\n<p>事件执行过程中的状态，用来保存当前事件的信息的对象</p>\n<pre><code>ele.事件 = function(e)&#123;\n\te = e || window.event;//获取event对象的兼容写法。IE8-：window.event\n&#125;\n</code></pre>\n<p>兼容性代码：e=e||window.event</p>\n<p>// 标准浏览器：e</p>\n<p>//ie8：false ||window.event ==&gt;window.event</p>\n<h3 id=\"1事件对象的属性与鼠标相关\"><a class=\"markdownIt-Anchor\" href=\"#1事件对象的属性与鼠标相关\">#</a> 1. 事件对象的属性（与鼠标相关）</h3>\n<p>e.button</p>\n<p>当事件被触发时，返回哪个鼠标按钮被点击</p>\n<p>W3C 标准：0 代表鼠标按下左键；1 代表按下了滚轮；2 代表按下了右键；</p>\n<p>IE8：1 鼠标左键，2 鼠标右键，3 左右同时按，4 滚轮，5 左键加滚轮，6 右键加滚轮，7 三个同时；</p>\n<h3 id=\"2光标位置信息\"><a class=\"markdownIt-Anchor\" href=\"#2光标位置信息\">#</a> 2. 光标位置信息</h3>\n<pre><code>e.clientX /e.clientY 光标相对于浏览器可视区域的位置，也就是浏览器坐标。\ne.screenX/e.screenY 光标指针相对于电脑屏幕的水平/垂直坐标。\ne.pageX/e.pageY:鼠标相对于文档的位置。\n\t* 包括滚动条滚动的距离，即：e.clientX+window.scrollX\n\t* IE8-不支持\n\te.offsetX,e.offsetY: 光标相对于事件源对象的相对偏移量。\n\t* 事件源对象：触发事件的对象\n</code></pre>\n<h2 id=\"键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件\">#</a> 键盘事件</h2>\n<p>onkeydown 某个键盘按键被按下。<br>\nonkeyup 某个键盘按键被松开。<br>\nonkeypress 键盘 &lt;字符键&gt; 被按下触发，而且如果按住不放的话，会重复触发此事件。</p>\n<p>1. 事件 对象的属性（与键盘相关）</p>\n<p>（1）which/keyCode</p>\n<p>对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码 (ascii 码)</p>\n<p>对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。</p>\n<p>兼容代码：e.which=e.which||e.keyCode</p>\n<p>（2）altKey 当事件被触发时，ALT 键是否被按下，返回值为布尔值</p>\n<p>（3）ctrlKey 当事件被触发时 CTRL 键是否被按下</p>\n<p>（4）shiftKey 当事件被触发时，Shift 键是否被按下；</p>\n<h2 id=\"阻止浏览器的默认行为\"><a class=\"markdownIt-Anchor\" href=\"#阻止浏览器的默认行为\">#</a> 阻止浏览器的默认行为</h2>\n<p>1. 阻止右键鼠标的默认行为</p>\n<p>oncontextmenu</p>\n<p>2. 文本的选择</p>\n<p>3. 表单的提交</p>\n<p>4. 链接的跳转</p>\n<p>标准： event.preventDefault ();</p>\n<p>IE8-: event.returnValue=false;</p>\n<p>兼容：event.preventDefault? event.preventDefault ():event.returnValue=false</p>\n<pre><code>\t\t//1.全局阻止\n\t\t// document.oncontextmenu=function(e)&#123;\n\t\t// \te.preventDefault();\n\t\t// &#125;\n\t\t//2.元素内阻止\n\t\t// var box=document.getElementById('box');\n\t\t// box.oncontextmenu=function(e)&#123;\n\t\t// \te.preventDefault();\n\t\t// &#125;\n</code></pre>\n<h2 id=\"事件冒泡\"><a class=\"markdownIt-Anchor\" href=\"#事件冒泡\">#</a> 事件冒泡</h2>\n<h3 id=\"什么是事件冒泡\"><a class=\"markdownIt-Anchor\" href=\"#什么是事件冒泡\">#</a> 什么是事件冒泡：</h3>\n<blockquote>\n<p>在一个对象上触发某类事件（如 onclick 事件），那么 click 事件就会沿着 DOM 树向这个对象的父级传播，从里到外，直至它被处理程序处理，或者事件到达了最顶层（document/window）</p>\n</blockquote>\n<h4 id=\"演示从里到外的元素添加相同的事件查看事件冒泡\"><a class=\"markdownIt-Anchor\" href=\"#演示从里到外的元素添加相同的事件查看事件冒泡\">#</a> 演示：从里到外的元素添加相同的事件，查看事件冒泡</h4>\n<p>1）不是所有的事件都能冒泡。</p>\n<p>​\t以下事件不冒泡：blur、focus、load、unload…。</p>\n<p>​\t【onmouseover 与 onmouseenter 的区别】</p>\n<p>2）冒泡到最顶层的目标不同。大部分浏览器到 window 对象，IE8 - 到 document 对象</p>\n<h3 id=\"停止事件的传播\"><a class=\"markdownIt-Anchor\" href=\"#停止事件的传播\">#</a> 停止事件的传播</h3>\n<p>兼容：e.stopPropagation?e.stopPropagation ():e.cancelBubble = true;</p>\n<pre><code> 标准：event.stopPropagation(); \n IE8-：event.cancelBubble = true; \n // 阻止事件冒泡兼容写法：\n if(e.stopPropagation)&#123;\n \te.stopPropagation();\n &#125;else&#123;\n\te.cancelBubble = true;\n &#125;\n</code></pre>\n<h3 id=\"事件委托\"><a class=\"markdownIt-Anchor\" href=\"#事件委托\">#</a> 事件委托</h3>\n<p>​\t利用事件冒泡原理，把本来绑定给某个元素的事件委托给它的父级（已经存在页面元素）处理。</p>\n<h4 id=\"事件源对象触发事件的元素\"><a class=\"markdownIt-Anchor\" href=\"#事件源对象触发事件的元素\">#</a> 事件源对象：触发事件的元素</h4>\n<p>标准：event.target<br>\nIE8-：event.srcElement</p>\n<p>兼容：e.target=e.target || e.srcElement;</p>\n<h4 id=\"案例表格删除当前行\"><a class=\"markdownIt-Anchor\" href=\"#案例表格删除当前行\">#</a> 案例：表格删除当前行</h4>\n<pre><code>//影响页面性能的三大操作：\n\t//* 事件数量\n\t//* dom节点操作次数\n\t//* 请求次数\noutput.onclick = function(e)&#123;\t\n\t//兼容性问题\n    e = e || window.event;\n    var target = e.target || e.srcElement;\n    if(target.className === 'btnDel')&#123;\n    \t//this指的是谁?\n        var currentTr = target.parentNode.parentNode;\n        currentTr.parentNode.removeChild(currentTr);\n    &#125;else if(target.className === 'btnCopy')&#123;\n        var currentTr = target.parentNode.parentNode;\n        currentTr.parentNode.appendChild(currentTr.cloneNode(true));\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"事件捕获\"><a class=\"markdownIt-Anchor\" href=\"#事件捕获\">#</a> 事件捕获</h2>\n<p>从 DOM 树顶端到当前元素，执行事件。</p>\n<h2 id=\"绑定事件的方式\"><a class=\"markdownIt-Anchor\" href=\"#绑定事件的方式\">#</a> 绑定事件的方式</h2>\n<pre><code>//（1）作为html属性\n//\t\t&lt;div onclick=&quot;sum()&quot;&gt;&lt;/div&gt; 不常用，不实用。\n//（2）DOM节点绑定\n//\t\t*同一元素的同名事件会被覆盖\n//  \t*事件处理函数只能冒泡阶段执行\n//\t\tdiv.onclick = function()&#123;&#125;\n//（3）事件监听器\n//\t\taddEventListener(事件,function()&#123;&#125;[,是否捕获])\n//\t\t默认false冒泡不捕获，true捕获\n//\t\t*同名事件不会被覆盖\n//  \t*事件处理函数默认冒泡阶段执行\n</code></pre>\n<h3 id=\"事件监听器\"><a class=\"markdownIt-Anchor\" href=\"#事件监听器\">#</a> 事件监听器</h3>\n<pre><code>//标准浏览器：元素.addEventListener(事件名,事件处理函数,是否捕获（默认false，为冒泡）)\ntarget.addEventListener(&quot;click&quot;, fn, false);\n//IE8-：元素.attachEvent(on+事件名,事件处理函数)没有捕获阶段\ntarget.attachEvent(&quot;onclick&quot;,fun);\n</code></pre>\n<ul>\n<li>可以绑定多个处理函数在一个对象上，执行顺序按照绑定的顺序来 (标准)\n<ul>\n<li>不同元素事件执行顺序跟 html 结构有关</li>\n<li>相同元素事件执行顺序跟绑定先后有关</li>\n</ul>\n</li>\n<li>可以绑定多个函数在一个对象上，执行顺序按照绑定的反序（ie8-）</li>\n</ul>\n<p>封装：绑定事件，兼容浏览器</p>\n<pre><code>function bind(ele,type,handler,isCapture)&#123;\n\t// 优先使用事件监听器\n\tif(ele.addEventListerner)&#123;\n\t\t// 标准浏览器\n\t\tele.addEventListerner(type,handler,isCapture);\n\t&#125;else if(ele.attachEvent)&#123;\n\t\t// IE8-\n\t\tele.attachEvent('on' + type,handler);\n\t&#125;else&#123;\n\t\t// DOM节点绑定方式\n\t\tele['on' + type] = handler\n\t&#125;\n&#125;\n</code></pre>\n<h2 id=\"事件的移除\"><a class=\"markdownIt-Anchor\" href=\"#事件的移除\">#</a> 事件的移除</h2>\n<h3 id=\"dom绑定事件的移除\"><a class=\"markdownIt-Anchor\" href=\"#dom绑定事件的移除\">#</a> DOM 绑定事件的移除</h3>\n<p>​\tele.on + 事件 = null；</p>\n<h3 id=\"事件监听器移除\"><a class=\"markdownIt-Anchor\" href=\"#事件监听器移除\">#</a> 事件监听器移除</h3>\n<ul>\n<li>标准：removeEventListener (type,fn, true) 传入的参数 fn 要跟添加时一样 (同一个函数)，否则不能移除事件</li>\n<li>IE8-：detachEvent (‘on’+type,fun)，传入的参数 fun 要跟添加时一样，否则不能移除事件</li>\n</ul>\n<blockquote>\n<p>注意：<br>\n页面事件绑定数量越多，越影响性能（速度越慢）</p>\n</blockquote>\n<h1 id=\"十二-正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#十二-正则表达式\">#</a> 十二、正则表达式</h1>\n<h2 id=\"概念-4\"><a class=\"markdownIt-Anchor\" href=\"#概念-4\">#</a> 概念</h2>\n<p>正则表达式（regular expression）是一个描述字符模式的对象</p>\n<p>能够进行强大的 “模式匹配” 和 “文本检索与替换” 功能。前端往往有大量的表单数据校验的工作，采用正则表达式会使得数据校验的工作量大大减轻</p>\n<h2 id=\"创建正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#创建正则表达式\">#</a> 创建正则表达式</h2>\n<p>1. 字面量</p>\n<p>var reg=/ 字符串 || 匹配规则 /gi;</p>\n<p>g 全局匹配，i 不区分大小写</p>\n<p>2. 构造函数</p>\n<p>var reg=new RegExp (“字符串 || 匹配规则”,gi);</p>\n<h2 id=\"支持正则表达式的字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#支持正则表达式的字符串方法\">#</a> 支持正则表达式的字符串方法</h2>\n<p>1.search()</p>\n<p>返回第一次匹配时所在的索引值，如果匹配不到则返回 - 1；</p>\n<p>2.match()</p>\n<p>默认匹配字符串，返回一个数组</p>\n<p>0：所匹配的字符</p>\n<p>index: 匹配第一个字符所在的索引</p>\n<p>input: 对字符串的引用</p>\n<p>全局匹配 (g)，返回一个匹配所有字符串的数组，如果匹配不到则返回 null</p>\n<p>3.replace()</p>\n<p>替换字符串</p>\n<h2 id=\"匹配规则\"><a class=\"markdownIt-Anchor\" href=\"#匹配规则\">#</a> 匹配规则</h2>\n<p>1. 字符类（不说数量则默认只匹配一个）</p>\n<p>\\d 数字</p>\n<p>\\D 非数字</p>\n<p>\\w 代表数字、字母、下划线</p>\n<p>\\W 非数字字母和下划线字符</p>\n<p>\\s 空格</p>\n<p>\\S 空格以外的字符</p>\n<p>. 除换行以外的所有字符</p>\n<p>\\b : 匹配一个单词边界，也就是指单词和空格间的位置</p>\n<p>\\B : 匹配非单词边界。</p>\n<p>单词和数字会被认为没有边界</p>\n<p>PS: 以上所有字符类都只是匹配 “一个” 字符</p>\n<p>2. 特殊符号 ^ $ . * + ? = ! : | \\ / () [] {}</p>\n<p>(1) 表示数量：（默认遵循贪婪模式，越多越好）</p>\n<p 1,=\"\">+ 匹配 1 个或多个字符</p>\n<p 0,=\"\">* 匹配 0 个字符以上</p>\n<p 0,1=\"\">? 匹配 0 个或 1 个字符</p>\n<p>{2,4} 最少 2 个，最多 4 个；匹配到 2~4 个字符</p>\n<p>(2)[] 代表任意 “单个字符”，里面的内容表示 “或” 的关系</p>\n<p>- 表示范围</p>\n<p>例如：console.log (str.match (/[a-z]+/g));</p>\n<p>^ 代表非</p>\n<p>(): 表示一个整体，普通括号 (?😃</p>\n<pre><code>var reg=/(?:\\d&#123;17&#125;|\\d&#123;14&#125;)[\\dx]/\n</code></pre>\n<p>(): 表示分组（n 是以最左边括号出现的顺序排列)</p>\n<ul>\n<li>\n<p>$1: 表示第一个分组</p>\n</li>\n<li>\n<p>$n: 表示第 n 个分组（不能写在正则表达式里）</p>\n</li>\n<li>\n<p>\\n: 在正则分组后面使用，表示对第 n 个分组的引用 (一定要写在正则表达式里)</p>\n<p>PS: 编写的正则分组数量越少越好</p>\n</li>\n</ul>\n<p>var str=“张益达，李小璐，张非凡”;</p>\n<p>|: 表示或者</p>\n<p>锚点定位</p>\n<ul>\n<li>^: 表示以什么开头</li>\n<li>$: 表示以什么结尾</li>\n</ul>\n<p>表示数量，对前一个字符计数，</p>\n<ul>\n<li 0,=\"\">*: 代表 0 个或 0 个以上 &lt;===&gt;</li>\n<li 1,=\"\">+: 代表 1 个或 1 个以上 &lt;===&gt;</li>\n<li 0,1=\"\">?: 代表 0 个或 1 个 &lt;===&gt;</li>\n<li>{}:</li>\n</ul>\n<pre><code>\\d&#123;5&#125;: 匹配5个数字\n\\d&#123;5,10&#125;: 匹配5个到10个数字\n\\d&#123;5,&#125;: 匹配5个或5个以上的数字\n</code></pre>\n<p>非贪婪模式，在后面加问号</p>\n<p>/\\d{5,10}?/g</p>\n<h1 id=\"十三-es5\"><a class=\"markdownIt-Anchor\" href=\"#十三-es5\">#</a> 十三、ES5</h1>\n<h2 id=\"支持es5的浏览器\"><a class=\"markdownIt-Anchor\" href=\"#支持es5的浏览器\">#</a> 支持 ES5 的浏览器</h2>\n<p>ie9+</p>\n<h2 id=\"页面加载事件\"><a class=\"markdownIt-Anchor\" href=\"#页面加载事件\">#</a> 页面加载事件</h2>\n<p>1、解析 HTML 结构</p>\n<p>2、加载外部脚本和样式表文件</p>\n<p>3、解析并执行脚本代码</p>\n<p>4、DOM 树构建完成 //DOMContentLoaded</p>\n<p>5、加载图片等外部文件</p>\n<p>6、页面加载完毕 <a href=\"//window.onload\">//window.onload</a></p>\n<pre><code>* readystatechange事件（准备阶段状态改变，两个状态）\n    * interactive \t：DOM树完成执行\n    * complete\t\t：类似window.onload,但比window.onload先执行\n* DOMContentLoaded事件\n\t* DOM树完成执行\n    * 必须使用事件监听器绑定document事件\nPS:以上事件用以取代window.onload事件（实际开发不常用）\n\n</code></pre>\n<h2 id=\"es5的严格模式\"><a class=\"markdownIt-Anchor\" href=\"#es5的严格模式\">#</a> ES5 的严格模式</h2>\n<p>ie9 不支持严格模式</p>\n<p>1、使用严格模式：在当前作用域的最前面 &quot;use strict&quot;</p>\n<p>意义：增加 JS 语法的严谨性</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2</span>、为什么要用严格模式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span> 消除javascript语法的一些不合理，不严谨的地方，减少一些怪异行为；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span> 消除代码运行的一些不安全之处，保证代码运行的安全；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span> 提高编译器效率，增加运行速度；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span> 为未来新版本的javascript做好铺垫；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span>、如何使用严格模式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span> 全局：针对整个js文件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  将”use strict”放在js文件的第一行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">*</span> 局部：针对单个函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  将”use strict”放在函数体的第一行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">strict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    \t<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   \t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"这是严格模式\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">4</span>、执行严格模式后的一些限制</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">*</span> 不使用<span class=\"token keyword\">var</span>声明变量严格模式中将不通过</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">*</span> 删除系统内置的属性会报错</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">*</span> 不能删除<span class=\"token keyword\">var</span>声明的全局变量（会自动成为window的属性）</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">*</span> 对象有重名的属性将报错</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token operator\">*</span> <span class=\"token keyword\">var</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'王大锤'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">*</span> 函数有重名的形参将报错</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">*</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">*</span> arguments严格定义为参数，保存实参信息</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token operator\">*</span> 不允许对arguments赋值</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token operator\">*</span> 禁止使用arguments<span class=\"token punctuation\">.</span>callee（相当于递归）</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">*</span> 函数必须声明在顶层，不能写在条件判断语句或<span class=\"token keyword\">for</span>循环语句中</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 报错&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"获取元素节点-2\"><a class=\"markdownIt-Anchor\" href=\"#获取元素节点-2\">#</a> 获取元素节点</h2>\n<p>1、document.querySelector (css 选择器) 获取匹配选择器的第一个元素节点，返回 DOM 节点</p>\n<p>1、document.querySelectorAll (css 选择器) 获取匹配选择器的所有元素节点，返回类数组</p>\n<h2 id=\"function方法bind\"><a class=\"markdownIt-Anchor\" href=\"#function方法bind\">#</a> Function 方法 bind ()</h2>\n<p>1、bind () 用于将当前函数和指定对象绑定（改变 this 指向），返回一个新函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 应用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> btns <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>btns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    btns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 方式 1 (1)：var self = this;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">//(2)console.log(self.innerHTML);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 方式 2.bind () 改变 this 的指向</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"获取class的属性\"><a class=\"markdownIt-Anchor\" href=\"#获取class的属性\">#</a> 获取 class 的属性</h2>\n<p>操作类名的方法</p>\n<pre><code>classList对象\n\t-length:class类名的个数\n\t-add():添加class方法\n\t-remove():删除class方法\n\t-toggle():切换class方法\n\t-contains():是否含有某个类，返回布尔值\n</code></pre>\n<h2 id=\"data自定义属性\"><a class=\"markdownIt-Anchor\" href=\"#data自定义属性\">#</a> data 自定义属性</h2>\n<pre><code>-w3c规定的自定义属性的格式为[data-**=&quot;&quot;]\n-dataset对象\n\tdata-age=&quot;17&quot; &lt;==&gt;ele.dataset.age=17;\n</code></pre>\n<h1 id=\"十四-es6\"><a class=\"markdownIt-Anchor\" href=\"#十四-es6\">#</a> 十四、ES6</h1>\n<h2 id=\"let变量声明\"><a class=\"markdownIt-Anchor\" href=\"#let变量声明\">#</a> let 变量声明</h2>\n<pre><code>let:声明变量\n-变量声明不会提前\n-let不允许相同作用域内多次声明同一变量\n-块级作用域&#123;&#125;  //花括号内为块级作用域\n</code></pre>\n<h2 id=\"const声明常量\"><a class=\"markdownIt-Anchor\" href=\"#const声明常量\">#</a> const 声明常量</h2>\n<pre><code>-变量声明不会提前\n-const不允许相同作用域内多次声明同一变量\n-块级作用域\n-声明后无法修改值\n*建议命名时全部大写，用_隔开多个单词\n</code></pre>\n<h2 id=\"解构\"><a class=\"markdownIt-Anchor\" href=\"#解构\">#</a> 解构</h2>\n<p>声明变量时，从数组或对象中提取值，对变量进行赋值，这被叫做 &quot;解构&quot;</p>\n<pre><code>（一）数组解构\n1、常规操作\n\tvar [a,b,c]=[1,2,3]; //等同于var a=1,b=2,c=3\n2、...表示获取剩余的所有参数\n\tvar [a,...b]=[1,2,3,4]; //等同于var a=1,b=[2,3,4];\n3、解构失败\n如果变量个数多于赋值数，多余变量为undefined;\n例如：var [a]=1; //报错：1 is not iterable\n解构-左右都要有中括号\n4、指定默认值\n\tvar [a,b,c=1]=[10,30] //若解构失败，为默认值\n\t//a=10,b=30,c=1\n（二）对象解构\n1、常规操作\n\tobj=&#123;\n        guid:&quot;01&quot;,\n        name:&quot;猫爪杯&quot;,\n        price:888\n\t&#125;\n\tvar &#123;guid,name,price&#125;=obj;\n2、解构失败：变量名与属性名不相同，返回值为undefined\n3、如果变量名与属性名不相同，则必须写成以下格式才能取到值\n&#123;原属性名:变量名&#125;\n4、指定默认值\n\tvar &#123;a=10&#125;=&#123;&#125;; //当a解构失败的话，拿到默认值\n（三）应用\n1、交换变量值\nvar x=10;\nvar y=20;\nvar [x,y]=[y,x];\n2、函数返回多个值\n    //数组：\n    function example()&#123;\n         return [1,2,3]\n    &#125;\n    var [x,y,z] = example();\n    //对象：\n    function example()&#123;\n         return &#123;name:&quot;lemon&quot;,age:18&#125;;\n    &#125;\n    var &#123;name,age&#125; = example();\n3、定义函数形参（重点）\n    //数组：\n    function test([x,y,z])&#123;\n        //相当于 var [x,y,z] = [1,2,3];\n    &#125;\n    test([1,2,3]);\n    //对象：\n    function test(&#123;name,age&#125;)&#123;\n        //相当于 var &#123;name,age&#125; = &#123;name:&quot;lemon&quot;,age:18&#125;;\n    &#125;\n    test(&#123;name:&quot;lemon&quot;,age:18&#125;);\n\n    //常规操作：参数可以设置默认值\n    fuction test(&#123;x=0,y=0,z=0&#125;)&#123;\n        //相当于var &#123;x=0,y=0,z=0&#125; = &#123;x:10&#125;\n        //为避免没有实参值传入，给形参默认值\n    &#125;\n    test(&#123;x:10&#125;);\n\n    //扩展：若形参是基本数据类型，函数也可以对形参进行设置默认值的操作。\n    var func1 = function(x=1,y=2)&#123;return x+y&#125;；\n    func1(); // 得到 3\n    //同样，也可以用...表示获取剩余参数\n    var func2 = (x, ...args) =&gt; &#123; console.log(args) &#125;;\n    func2(1,2,3); // 输出 [2,3]\n</code></pre>\n<h2 id=\"字符串扩展\"><a class=\"markdownIt-Anchor\" href=\"#字符串扩展\">#</a> 字符串扩展</h2>\n<pre><code>字符串方法\n1、includes\n\t判断是否包含某个字符，返回布尔值\n'html5'.includes('html');//true\n2、startsWith/endsWith\n\t是否以某一字符或某一字符串开头/结尾\n\tlet str='google';\n    str.startsWith('goo');  //true\n    str.endsWith('e');    //true\n3、repeat(n)\n\t得到字符串重复n次后的结果，n可以为小数，但不能为负数\n    'laoxie'.repeat(2);//laoxielaoxie\n\n</code></pre>\n<h2 id=\"字符串模板\"><a class=\"markdownIt-Anchor\" href=\"#字符串模板\">#</a> 字符串模板</h2>\n<p>template string</p>\n<pre><code>-使用反引号``表示，你可以通过一种更加美观、更加方便的方式向字符串中插入变量\n-格式：$&#123;变量|函数&#125;，\n `你好，我的名字叫$&#123;username&#125;,接下来是我的自我介绍：$&#123;introduce()&#125;` \n 模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。\n</code></pre>\n<h2 id=\"函数扩展\"><a class=\"markdownIt-Anchor\" href=\"#函数扩展\">#</a> 函数扩展</h2>\n<p><strong>（一）箭头函数</strong></p>\n<pre><code>（一）箭头函数\n*可以省略function、return、()、&#123;&#125;\n 1.&#123;&#125;内部只有一句返回代码，可以省略return\n \t没有参数或有多个参数不能省略()\n \t//var sum = () =&gt; 3;var sum = (a,b) =&gt; 3;\n \t只有一个参数，可以省略()\n \t//var sum = a =&gt; 3;\n 2.&#123;&#125;内部有多句代码，不能省略&#123;&#125;、return\n \t=&gt;后紧接着的&#123;&#125;代表代码块\n \t如果返回一个对象，两种写法\n \t(1)var sum=()=&gt;(&#123;name:'lemon'&#125;)\n \t(2)var sum=()=&gt;&#123;return &#123;name:'lemon&#125;&#125;\n 3.箭头函数没有this，它的this继承自外部作用域\n</code></pre>\n<p><strong>（二）生成器函数</strong></p>\n<p><code>next()</code>  方法会执行 generator 的代码，然后，每次遇到 <code>yield x;</code>  就返回一个对象 <code>&#123;value: x, done: true/false&#125;</code> ，然后 “暂停”。返回的 <code>value</code>  就是 <code>yield</code>  的返回值， <code>done</code>  表示这个 generator 是否已经执行结束了。如果 <code>done</code>  为 <code>true</code> ，则 <code>value</code>  就是 <code>return</code>  的返回值。</p>\n<p>当执行到 <code>done</code>  为 <code>true</code>  时，这个 generator 对象就已经全部执行完毕，不要再继续调用 <code>next()</code>  了。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">yield</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">yield</span> i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"over\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> countNum <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:11,done:false&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:12,done:false&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:13,done:false&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:\"over\",done:true&#125;</span></pre></td></tr></table></figure><h2 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"#set集合\">#</a> set 集合</h2>\n<p>类似于数组，但是成员的值都是唯一的，可自动去重，去重的前提是两个值全等于。</p>\n<pre><code>\n（二）set的方法\n    * add(value)：添加某个值，返回Set结构本身。\n    * delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n    * has(value)：返回一个布尔值，表示Set集合中是否存在该值。\n    * clear()：清除所有成员，没有返回值。\n（三）利用set去重数组(对引用类型数据无效)\n    var arr = [1, 2, 3, 4, 5, 5, 5, 5]；\n    let items = new Set(arr);\n    //去重后将set集合重新转成数组\n    arr = Array.from(items)；\n（四）遍历set集合\n\t* forEach()\n\t* for…of\n        set.forEach((item,idx)=&gt;&#123;\n            console.log(item,idx);//索引值与item值相同\n        &#125;)\n\n        var imgs = new Set(['a','b','c']); //根据KEY遍历 \n        for(let item of imgs)&#123;\n             console.log(item); \n        &#125; \n</code></pre>\n<p>for…of</p>\n<ul>\n<li>这是最简洁、最直接的遍历数组元素的语法</li>\n<li>这个方法避开了 for-in 循环的所有缺陷</li>\n<li>for…of 跟 for-in 的区别很明显，就是直接取值，而不再取下标了</li>\n<li>与 forEach () 不同的是，它可以正确响应 break、continue 和 return 语句</li>\n</ul>\n<pre><code>var arr = [10,12,18,30];\nfor (var value of arr) &#123;\n  console.log(value);\n&#125;\n</code></pre>\n<p>只要有 [迭代器 Symbol (Symbol.iterator)  ] 就可以用 for…of 遍历：</p>\n<p>Array、DOM、Set/Map 集合、String、不支持普通对象</p>\n<h2 id=\"对象扩展\"><a class=\"markdownIt-Anchor\" href=\"#对象扩展\">#</a> 对象扩展</h2>\n<pre><code>（一）对象合并方法\nObject.assign(obj1,obj2,...objN);合并对象到obj1，返回obj1\n\tvar obj1 = &#123;a:1&#125;；\n    var newObj1 = Object.assign(obj1,&#123;b:2&#125;);\n    1.合并对象到obj1,所以obj1 = &#123;a:1,b:2&#125;\n    2.返回obj1，传递给newObj1，所以newObj1 = &#123;a:1,b:2&#125;\n\n    var newObj2 = Object.assign(obj1,&#123;b:2&#125;,&#123;b:4,c:3&#125;);\n    *若存在相同属性，后面的覆盖前面的。//newObj=obj1=&#123;a:1,b:4,c:3&#125;\n（二）对象的传递与复制 \n    var obj = &#123;\n        name:&quot;laoxie&quot;,\n        hobby:['大保健','money']\n    &#125;\n    1.对象的传递：\n    var newObj = obj; //此时修改obj的任意属性，也会同时影响newObj\n    2.对象的复制\n    （1）for...in遍历复制\n    for(var key in obj)&#123;\n        newObj2[key] = obj[key];\n    &#125;\n    （2）利用assign（）\n\t\tvar newObj3 = Object.assign(&#123;&#125;,obj);\n    \t注意：以上两种复制方式，都只支持浅拷贝（对于引用类型，只拷贝引用）\n\t\tobj.hobby.push('羽毛球');//此时也会影响newObj2与newObj3\n\n    （3）深拷贝\n\t\tvar newObj3 = JSON.parse(JSON.stringify(person))；\n\t\t//有缺陷，只支持 JSON 格式的数据类型，对于时间对象和正则不友好\n（三）对象的简写\n\tES6允许在对象之中直接写变量\n    1. 属性简写\n        var myName = 'laoxie';\n        var obj = &#123;myName&#125;;//等效于var obj = &#123;myName:'laoxie'&#125;。\n    \t//变量名作为属性名，变量值作为属性值。\n    2.变量值作为属性名\n        var obj = &#123;\n            [myName]:18 //等效于 laoxie:18\n        &#125;\n    3.方法简写\n        var obj = &#123;\n            coding()&#123;&#125; //等效于 coding:function()&#123;&#125;\n        &#125;\n</code></pre>\n<h2 id=\"map对象\"><a class=\"markdownIt-Anchor\" href=\"#map对象\">#</a> Map 对象</h2>\n<p><strong>1. 概念</strong></p>\n<p>js 对象（Object）只能用字符串当作键 (属性名)。这让它的使用有了很大的限制。所以 ES6 推出了一种类似于对象的数据集合：Map 集合，它能让所有类型的数据作为键</p>\n<p><strong>2. 方法</strong></p>\n<pre><code>\t\t* 设置set(key, value)\n\t\t* 获取get(key)\n\t\t* has(key)\n\t\t* delete(key)\n\t\t* clear()\n\t（1）创建：\n        let map = new Map(); \n    （2）设置：\n        map.set('name','laoxie');\n        map.set(6,666);\n        // 把数组作为键\n        var arr = [10,20,30];\n        map.set(arr,'数组');\n        //获取：\n        map.get(arr); //'数组'\n</code></pre>\n<p><strong>3. 遍历方法</strong></p>\n<pre><code>    * keys() 获取所有键，可以用Array.from()转成数组\n    * values() 获取所有值，可以用Array.from()转成数组\n    * entries() 获取所有键值对，可以用Array.from()转成数组\n    * 循环遍历，配合解构赋值 for...of\n    for(var item of map)&#123;\n        console.log(item); //每个item得到的都是一个数组，索引0为键，索引1为值\n    &#125; \n    //解构写法：\n    for(var [key,value] of map)&#123;\n        console.log(key,value);\n    &#125;\n</code></pre>\n<h2 id=\"symbol字符串\"><a class=\"markdownIt-Anchor\" href=\"#symbol字符串\">#</a> Symbol 字符串</h2>\n<pre><code>1.概念\n\tES6引入了一种新的原始数据类型Symbol，表示独一无二的值，一旦创建后就不可更改，是一种类似于字符串的数据类型，但Symbol 值不能与其他类型的值进行运算，否则报错。\n2.创建\n    (1)没有参数的情况\n    var s1 = Symbol();\n    var s2 = Symbol();\n    s1 === s2 // false\n\n    (2)Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了标识和区分，对调式非常有用\n    // 有参数的情况\n    var s1 = Symbol(&quot;foo&quot;);\n    var s2 = Symbol(&quot;foo&quot;);\n    s1 === s2 // false\n\n    (3)Symbol值不能与其他类型的值进行运算\n3.用途\n    * 给对象创建私有属性\n    * 给现有的对象添加属性，可能会产生命名冲突，Symbol的出现解决这个问题\n    var attr = Symbol();\n\n    // 第一种写法,不用加引号\n    var a = &#123;&#125;;\n    a[attr] = 'Nani';\n\n    // 第二种写法（注意加方括号，否则回被当作普通属性）\n    var a = &#123;\n        [attr]: 'Nani';\n    &#125;;\n\n    // 以上写法都得到同样结果\n    a[attr] // &quot;Nani&quot;\n4.Symbol.for() 登记symbol,会先查找当前Symbol是否存在\n    // 存在：则引用，不存在：则创建登记\n    var s11 = Symbol.for('xiaoming');//创建一个Symbol\n    var s12 = Symbol.for('xiaoming');//引用一个Symbol\n    //注意：直接使用Symbol()创建的Symbol值的键不会被登记，所以也就获取不到\n</code></pre>\n",
            "tags": [
                "Javascript"
            ]
        }
    ]
}