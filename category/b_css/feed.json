{
    "version": "https://jsonfeed.org/version/1",
    "title": "你的名字 • All posts by \"b_css\" category",
    "description": "",
    "home_page_url": "https://dukeshao.com",
    "items": [
        {
            "id": "https://dukeshao.com/2022/07/13/B_CSS/CSS/",
            "url": "https://dukeshao.com/2022/07/13/B_CSS/CSS/",
            "title": "CSS",
            "date_published": "2022-07-12T22:59:00.000Z",
            "content_html": "<h1 id=\"二-css基本语法\"><a class=\"markdownIt-Anchor\" href=\"#二-css基本语法\">#</a> 二、CSS 基本语法</h1>\n<h3 id=\"一-css简介\"><a class=\"markdownIt-Anchor\" href=\"#一-css简介\">#</a> 一、css 简介</h3>\n<p>1、cascading style sheets 层叠样式表，主要作用是呈现样式<br>\n​\t\t* 层叠性<br>\n​\t\t\t给同一个元素添加相同的 css 属性，属性值之间会发生层叠问题。<br>\n​\t\t* 样式表</p>\n<h3 id=\"二-css语法\"><a class=\"markdownIt-Anchor\" href=\"#二-css语法\">#</a> 二、css 语法</h3>\n<p>1、格式：选择器 {声明}<br>\n​\t\t* 声明由  css 属性：属性值；组成<br>\n​2、css 属性：<br>\n​\t\t*width 宽度<br>\n​\t\t*height 高度<br>\n​\t\t*background-color 背景颜色<br>\n​\t\t\t*red 红色  blue 蓝色  green 绿色  orange 橙色<br>\n​3、css 注释：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* css 注释 */</span></pre></td></tr></table></figure><h3 id=\"三-样式表\"><a class=\"markdownIt-Anchor\" href=\"#三-样式表\">#</a> 三、样式表</h3>\n<p>1、内部样式表 head&gt;style，在 style 标签里面书写 css 语法格式<br>\n * 作用域：当前页面<br>\n​2、外部样式表<br>\n​\t（1）建立外部样式表：css 文件夹 - 新建 css 文件，在该 css 文件里写 css 语法格式<br>\n​\t（2）在页面中链接该 css 文件，通过 head&gt;link [rel=“stylesheet” href=“css 文件路径”]<br>\n​\t* 作用域：所有链接到该 css 文件的页面<br>\n​3、内联（行内）样式表<br>\n​\t[style=“声明”]<br>\n​\t声明由 css 属性：属性值；组成<br>\n​\t* 作用域：当前元素<br>\n​\t* 优先级：就近原则（内联样式的优先级最高，内部样式与外部样式的优先级是一样大的，谁离该元素近谁就起作用）</p>\n<h3 id=\"四-选择器\"><a class=\"markdownIt-Anchor\" href=\"#四-选择器\">#</a> 四、选择器</h3>\n<p>1、标签选择器（元素选择器、类型选择器）：将标签名字作为选择器</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2、类选择器（class 选择器）：将。类名作为选择器</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3、id 选择器：将 #id 名作为选择器</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">#container</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4、通配符选择器</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">*</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">color</span><span class=\"token punctuation\">:</span>black<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>5、群组（并集）选择器：将选择器用逗号隔开，表示这些选择器同时被获取到</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box,#container</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>6、后代选择器：将选择器用空格隔开</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#header .box1&#123;width:100px;&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>7、伪类选择器<br>\n​\t（1）:link 锚链接未被访问前的样式<br>\n​\t（2）:visited 锚链接被访问后的样式<br>\n​\t（3）:hover 鼠标悬停在元素上，才触发<br>\n​\t（4）:active 鼠标点击元素时，触发样式<br>\n书写顺序：lv-ha<br>\n8、交集选择器</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">div.box</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">width</span><span class=\"token punctuation\">:</span>100px<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"五-选择器的优先级及权重\"><a class=\"markdownIt-Anchor\" href=\"#五-选择器的优先级及权重\">#</a> 五、选择器的优先级及权重</h3>\n<p>​\t（1）基本选择器的优先级<br>\n​\t\t* 前提：给同一个元素添加相同的 css 属性，才有优先级的比较<br>\n​\t!important / 行内样式 &gt; id 选择器 &gt; 类选择器 / 伪类选择器 &gt; 标签选择器 &gt; 通配符选择器<br>\n​\t（2）选择器的权重比较<br>\n​\t\t0000 原则：<br>\n​\t\t\t* 第一个 0 代表！important 或者内联样式<br>\n​\t\t\t* 第二个 0 代表 id 选择器的个数<br>\n​\t\t\t* 第三个 0 表示类选择器的个数<br>\n​\t\t\t* 第四个 0 表示标签选择器的个数<br>\n​\t\t继承的权重最低，为 0000</p>\n<h1 id=\"三-css核心属性\"><a class=\"markdownIt-Anchor\" href=\"#三-css核心属性\">#</a> 三、CSS 核心属性</h1>\n<h3 id=\"一-字体属性-font\"><a class=\"markdownIt-Anchor\" href=\"#一-字体属性-font\">#</a> 一、字体属性 font</h3>\n<p>​\t1、<strong>字体大小 font-size</strong><br>\n​\t\t* 默认的字体大小为 16px，最小为 12px<br>\n​\t\t*9pt=12px，12pt=16px<br>\n​\t2、<strong>字体加粗 font-weight</strong><br>\n​\t\t* 属性值：normal 默认情况下不加粗  bold 加粗<br>\n​\t\t*（100-500 表示 normal，600-900 表示 bold）<br>\n​\t3、<strong>字体倾斜 font-style</strong><br>\n​\t\t* 属性值：normal 默认情况下不倾斜  italic 倾斜 oblique 更加倾斜<br>\n​\t4、<strong>字体家族 font-family</strong><br>\n​\t\t* 属性值为汉字或者多个单词，属性值要加双引号<br>\n​\t\t* 同一个 CSS 分属性的多个属性值用逗号隔开<br>\n​\t5、<strong>字体颜色 color</strong><br>\n​\t\t* 属性值：英文单词、十六进制（光学模式）[#000000]<br>\n​\t\t* 十六进制表示法：#000000<br>\n​\t\t\t* 每位数字的取值可以是 0-9 或者 a-f<br>\n​\t\t\t* 前面两位数字表示红色 #ff0000<br>\n​\t\t\t* 中间两位数字表示绿色 #00ff00<br>\n​\t\t\t* 后面两位数字表示蓝色 #0000ff<br>\n​\t\t\t* 若表示同一个颜色的两位数都相等，可以省略为三位数 #000 黑色 #fff 白色</p>\n<h3 id=\"二-文本属性\"><a class=\"markdownIt-Anchor\" href=\"#二-文本属性\">#</a> 二、文本属性</h3>\n<p>​\t1、<strong>text-transform 检索文本的大小写</strong><br>\n​\t\t* 属性值：<br>\n​\t\t\tnone 默认不改变<br>\n​\t\t\tuppercase 全部转成大写<br>\n​\t\t\tlowercase 全部转成小写<br>\n​\t\t\tcapitalize 首字母大写<br>\n​\t2、text-decoration 文本修饰<br>\n​\t\t* 属性值：<br>\n​\t\t\tnone 默认没有文本修饰<br>\n​\t\t\tunderline 下划线<br>\n​\t\t\toverline 上划线<br>\n​\t\t\tline-through 删除线<br>\n​\t\t\tblink 闪烁：IE、Chrome 或 Safari 不支持 “blink” 属性值。<br>\n​\t3、text-indent 首行缩进<br>\n​\t\t* 单位： em 以一个字体的大小为基准<br>\n​\t\t* 可以为负数</p>\n<pre><code>text-indent:2em;\n</code></pre>\n<p>​\t4、letter-spacing 字间距<br>\n​\t\t* 以字或字母作为分界点<br>\n​\t5、word-spacing 词间距<br>\n​\t\t* 以空格作为分界点<br>\n​\t6、text-align 文本在当前容器的水平方向的对齐方式<br>\n​\t\t* 属性值：left 默认向左对齐 \t center 居中对齐  right 向右对齐   justify 两端对<br>\n​\t\t* 文本：文字、图片<br>\n​\t\t* 容器：块级元素<br>\n​\t7、vertical-align 行内元素在垂直方向上的对齐方式<br>\n​\t\t* 属性值：baseline 默认以基线对齐  top 顶线对齐  bottom 底线对齐  middle 中线对齐<br>\n​\t\t* 常用于将文字与图片垂直方向居中对齐</p>\n<pre><code>vertical-align:center;\n</code></pre>\n<p>​\t8、line-height 行高<br>\n​\t\t* 行高：一行的高度<br>\n​\t\t* 行高 = 文本的上间距 + 文本的下间距 + 字体大小<br>\n​\t\t*1. 在行高中，文字一定是居中显示的<br>\n​\t\t*2. 在同一段文本中，行高中的文本上间距 = 文本下间距<br>\n​\t\t*3. 常用操作：（1）若想一行文本在容器中垂直居中，可以将 line-height 设成容器的高度（2）若单行文本在居中偏上，则 line-height &lt; 容器高度</p>\n<h3 id=\"三-列表属性\"><a class=\"markdownIt-Anchor\" href=\"#三-列表属性\">#</a> 三、列表属性</h3>\n<p>​\t1、list-style-type 列表样式类型<br>\n​\t\t* 属性值：<br>\n​\t\t\tdisc 默认实心圆<br>\n​\t\t\tcircle 空心圆<br>\n​\t\t\tsquare 方块<br>\n​\t\t\tnone 没有样式 (用得最多)<br>\n​\t2、list-style-image: url (路径)  列表样式图片<br>\n​\t3、list-style-position 列表样式位置<br>\n​\t\t* 属性值： outside 在 li 的内容外边 inside 在 li 的内容里面（不稳定，不常用，有其他方式）<br>\n​\t* 总属性</p>\n<pre><code>list-style: 1/2 3;\n</code></pre>\n<p>​\t* 用得最多的是</p>\n<pre><code>list-style:none;\n</code></pre>\n<p>​\t块级元素除了 div、li 以外，基本都有默认的 margin 或 padding 样式</p>\n<h3 id=\"四-背景属性-background\"><a class=\"markdownIt-Anchor\" href=\"#四-背景属性-background\">#</a> 四、背景属性 background</h3>\n<p>​\t1、background-color 背景颜色</p>\n<pre><code>background-color:red;\nbackground-color:#f00;\n</code></pre>\n<p>​\t2、background-image:url (路径) 背景图片<br>\n​\t\t* 当容器的尺寸小于背景图片的尺寸，背景图片会有一部分丢失<br>\n​\t\t* 当容器尺寸大于背景图片的尺寸，背景图片会平铺满整个容器<br>\n​\t\t* 当容器尺寸等于背景图片的尺寸，背景图片能刚好在容器中完整的呈现<br>\n​\t3、background-repeat 背景图片是否平铺<br>\n​\t\t* 属性值： repeat 默认平铺  no-repeat 不平铺  repeat-x 水平方向平铺  repeat-y 垂直方向平铺<br>\n​\t4、background-pisition 背景图片在容器中的定位<br>\n​\t\t（1）数值：<br>\n​\t\t\t* 背景图片往左移，为负值<br>\n​\t\t\t* 背景图片往右移，为负值<br>\n​\t\t（2）方位：<br>\n​\t\t\t* 水平：left 左 center 中 right 右<br>\n​\t\t\t* 垂直： top 上 center 中 bottom 下<br>\n​\t5、background-attachment 背景图片的固定<br>\n​\t\t* 必须配合有滚动条的元素才能使用<br>\n​\t\t* 属性值：<br>\n​\t\t\tscroll 随着滚动条滚动而滚动<br>\n​\t\t\tfixed 滚动条滚动，背景图片固定位置<br>\n总属性 background: 1 2 3 4 5;(可以缺省)</p>\n<h3 id=\"五-浮动float\"><a class=\"markdownIt-Anchor\" href=\"#五-浮动float\">#</a> 五、浮动 float</h3>\n<p>​\t1、属性值：none 默认不浮动 left 向左浮动 right 向右浮动<br>\n​\t2、浮动元素的特点<br>\n​\t\t（1）当元素浮动了，相当于脱离了标准流，但里面的文字不会脱离文档流。<br>\n​\t\t\t* 标准流：元素的摆放顺序为从上往下、从左往右。<br>\n​\t\t（2）浮动的元素会按照行内块级元素进行摆放<br>\n​\t\t\t* 行内块级元素的特点：一行显示多个、可以设置宽高<br>\n​\t\t（3）一行放不下所有的浮动元素，浮动元素会换行显示。该元素在垂直方向上紧跟上一个元素的最低点摆放</p>\n<h3 id=\"六-边框-border\"><a class=\"markdownIt-Anchor\" href=\"#六-边框-border\">#</a> 六、边框 border</h3>\n<p>​\t1、border-width 边框宽度<br>\n​\t2、border-style 边框样式<br>\n​\t\t* 属性值：solid 实线  dashed 虚线  dotted 点线 double 双线<br>\n​\t3、border-color 边框颜色<br>\n​\t* 总属性 border:1 2 3;<br>\n​\t*border - 方位：1 2 3<br>\n​\t\t* 方位：left right top bottom<br>\n​\t*border - 方位 - 分属性<br>\n​\t\t*border - 方位 -(width/style/color)<br>\n​\t* 分属性要覆盖总属性的某个值，则必须写在总属性的后面</p>\n<h1 id=\"四-盒模型\"><a class=\"markdownIt-Anchor\" href=\"#四-盒模型\">#</a> 四、盒模型</h1>\n<h3 id=\"一-盒模型的组成\"><a class=\"markdownIt-Anchor\" href=\"#一-盒模型的组成\">#</a> 一、盒模型的组成</h3>\n<p>1、盒模型 = content+padding +border+margin<br>\n2、标准盒模型：width、height=content<br>\n3、怪异盒模型：width、height=content+padding+border<br>\n4、box-sizing 规定盒模型的解析方式<br>\n * content-box 标准盒模型，以 content 以内为 width、height 大小<br>\n * border-box 怪异盒模型，以 border 以内为 width、height 大小</p>\n<h3 id=\"二-padding内填充\"><a class=\"markdownIt-Anchor\" href=\"#二-padding内填充\">#</a> 二、padding 内填充</h3>\n<p>padding 的取值，遵循原则：上右下左，若某个方向的值缺省，找它的反义词的值。<br>\n​padding - 方位：设置某个方位上的 padding<br>\n​注意事项：<br>\n​\tpadding 不能为负值<br>\n​\t背景是从 padding 的左上角开始摆放的，background-position:0 0; 在 padding 的左上角</p>\n<h3 id=\"三-margin-外间距\"><a class=\"markdownIt-Anchor\" href=\"#三-margin-外间距\">#</a> 三、margin 外间距</h3>\n<p>margin 的取值，遵循原则：上右下左，若某个方向的值缺省，找它的反义词的值。<br>\n​margin - 方位：设置某个方位上的 margin<br>\n​注意事项：<br>\n​\tmargin 可以为负值<br>\n​\tmargin 区域没有背景<br>\n父元素的第一个子元素建议不要设置 margin-top，因为可能存在 margin 塌陷问题</p>\n<h1 id=\"五-元素类型\"><a class=\"markdownIt-Anchor\" href=\"#五-元素类型\">#</a> 五、元素类型</h1>\n<h3 id=\"一-元素类型的分类\"><a class=\"markdownIt-Anchor\" href=\"#一-元素类型的分类\">#</a> 一、元素类型的分类</h3>\n<h4 id=\"一块级元素\"><a class=\"markdownIt-Anchor\" href=\"#一块级元素\">#</a> （一）块级元素</h4>\n<p>​\t1. 特点：块级元素的宽高默认占其父级元素的一整行，若设置了宽度，多余的区域 margin 填充。<br>\n​\t\t* 利用块级元素水平方向多余的 margin 实现块级元素在父容器中水平居中，给当前元素加 margin:0 auto;<br>\n​\t\t* 块级元素可以设置宽高<br>\n​\t\t* 块级元素可以理解成容器，可以容纳所有的行内元素及部分的块级元素<br>\n​\t\t\t例如：ul 里面只能嵌套 li，dl&gt;dt+dd<br>\n​\t\t\t例如：有语义的标签不能在里面嵌套 div、p 不能嵌套 p、标题标签不能嵌套标题<br>\n​\t2. 代表元素<br>\n​\t\tdiv、标题 h1-h6、p、列表 ul、ol&gt;li;dl&gt;dt+dd、form、option</p>\n<h4 id=\"二行内元素内联元素\"><a class=\"markdownIt-Anchor\" href=\"#二行内元素内联元素\">#</a> （二）行内元素（内联元素）</h4>\n<p>​\t1. 特点：一行显示多个；宽高由内容决定，即不能设置宽高；行内元素遵循盒模型规律，但是设置上下的 border、padding、margin 并没有真正的生效。<br>\n​\t2. 代表元素<br>\n​\t\tspan，buis，strong，em，ins，del，a，img，input，select，textarea，label<br>\n​\t3. 实现行内元素在父容器中水平居中<br>\n​\t\t* 给父容器加 text-align:center;</p>\n<h3 id=\"二-元素显示类型的转换\"><a class=\"markdownIt-Anchor\" href=\"#二-元素显示类型的转换\">#</a> 二、元素显示类型的转换</h3>\n<p>​\t属性值：*block  转换成块级元素，拥有块级元素的所有特点<br>\n​\t\t\t*inline 转换 成行内元素，拥有行内元素的所有特点<br>\n​\t\t\t*list-item 块级元素的一种特殊显示类型，为列表项<br>\n​\t\t\t*inline-block 转换成行内块级元素<br>\n​\t\t\t*none 隐藏元素，不占位置<br>\n（二）dispaly:inline-block; 行内元素的一种特殊显示类型<br>\n​\t特点：一行显示多个；可以设置宽高；<br>\n​\t代表元素：img/input/textarea<br>\n​\t存在问题：<br>\n​\t\t1. 设置成行内块，元素之间的换行会被解析成一个空格<br>\n​\t\t\t解决办法：不换行；给父元素设置 font-size 为 0<br>\n​\t\t2. 行内元素之间存在基线对齐的问题<br>\n​\t\t\t解决办法：vertical-align;<br>\n 三、扩展知识</p>\n<p>​\t行内可置换元素 (行内块级元素)：浏览器根据元素的标签和属性，来决定元素的具体显示内容 - img [src]/input [type]/textarea [cols]+[rows]<br>\n​\t行内不可置换元素（行内元素）</p>\n<h6 id=\"隐藏元素的两种方式\"><a class=\"markdownIt-Anchor\" href=\"#隐藏元素的两种方式\">#</a> 隐藏元素的两种方式</h6>\n<p>1.display:none; 隐藏元素，不占位置<br>\n 2.visibility:hidden; 隐藏元素，占位置；<br>\n注：overflow:hidden; 隐藏溢出容器的内容，不会隐藏容器</p>\n<h1 id=\"六-定位\"><a class=\"markdownIt-Anchor\" href=\"#六-定位\">#</a> 六、定位</h1>\n<h3 id=\"一-定位position\"><a class=\"markdownIt-Anchor\" href=\"#一-定位position\">#</a> 一、定位 position</h3>\n<p>（一）. 静态定位 static：<br>\n​\t* 元素的默认定位，不设置就是该定位；<br>\n​\t* 标准流中的定位；</p>\n<p>（二）. 相对定位 relative：<br>\n​\t* 相对定位的元素都是相对于自己本身所在的位置进行定位移动；<br>\n​\t* 配合 top,right,bottom,left 属性使用，若是正值，则从自己的某条边往元素中间移动为正值。<br>\n​\t* 相对定位的元素不脱离标准流。（灵魂出窍）</p>\n<p>（三）. 绝对定位 absolute<br>\n​\t* 绝对定位的元素是相对于有定位的最近的父级元素或者 html 进行定位的<br>\n​\t* 配合 left,right,top,bottom 使用，从包含块的某条边往包含块的中间移动为正值。<br>\n​\t* 脱离了标准流<br>\n​\t扩展：包含块 - 定位参考框；一般子元素设置了绝对定位，父元素的定位一般都是相\t对定位除非有特殊要求。<br>\n4. 实现任意元素类型的元素在父容器中居中显示<br>\n​</p>\n<p>扩展：1. 子元素绝对定位 absolute, 父元素相对定位 relative（子绝父相）；<br>\n​</p>\n<p>2. 给子元素 {left:50%;top:50%;margin-left:- 自己宽度的一半；margin-top:- 自己高度的一半；}<br>\n​</p>\n<p>扩展：盒模型相关的属性设置百分比都是根据父元素的宽高作为基准<br>\n width,height,padding,border,margin,left,top,right,bottom</p>\n<p>（四）. 固定定位 fixed<br>\n​\t* 固定定位的元素相对于浏览器的可视区域进行定位<br>\n​\t* 配合 left,right,top,bottom 使用，从浏览器可视区域的某条边往中间移动为正值<br>\n​\t* 固定定位的元素脱离了标准流<br>\n拓展：子代选择器（ie8+）&gt;<br>\n 例如 ul&gt;li 表示获取 ul 的子元素 li</p>\n<h3 id=\"二-层级z-index\"><a class=\"markdownIt-Anchor\" href=\"#二-层级z-index\">#</a> 二、层级 z-index</h3>\n<p>​\t* 层级越高的元素在越上面<br>\n​\t* 默认情况下，定位的层级 &gt; 标准流中的层级。浮动的层级 &gt; 标准流中的层级（-1,0,1）<br>\n​\t* 只有设置了定位的元素才可以设置 z-index<br>\n​\t* 层级为整数，可以为负数</p>\n<h3 id=\"三-overflow\"><a class=\"markdownIt-Anchor\" href=\"#三-overflow\">#</a> 三、overflow</h3>\n<p>​\t内容溢出容器时的处理方式<br>\n属性值：<br>\n​\tvisible 默认可见<br>\n​\thidden 隐藏溢出内容<br>\n​\tscroll 出现滚动条<br>\n​\tauto 自动判断溢出出现滚动条<br>\n overflow-x: 设置水平方向<br>\n overflow-y：设置垂直方向<br>\n<strong><u>当设置了某个方向的 overflow 不为 visible, 另外一个方向自动为 auto</u></strong></p>\n<h1 id=\"七-图片整合技术\"><a class=\"markdownIt-Anchor\" href=\"#七-图片整合技术\">#</a> 七、图片整合技术：</h1>\n<p>设置块、宽高背景、定位 absolute（记得给它爸爸加 relative）<br>\n宽高不一致就单独设置<br>\n背景的定位 background-position 也不一样，单独设置<br>\n小图标相对于父元素的位置也不一样，单独设置 left、right、top、bottom</p>\n<p>** 原理：** 将一组背景图片有规律的合并成一张背景图（精灵图，雪碧图），再利用 background-position 实现背景图片的定位。</p>\n<p>** 好处：** 减少页面的请求次数，从而提高页面的加载速度；合并后的图片体积减小，从而提高加载速度；</p>\n<p><strong>背景图：</strong></p>\n<p>​\t1.h1：背景图<br>\n​\t2. 小图标：背景图<br>\n​\t3. 轮播图：都可以（建议用背景图）<br>\n​\t4. 每天都要更新的图片：都可以（建议用图片）</p>\n<h1 id=\"八-自适应宽高\"><a class=\"markdownIt-Anchor\" href=\"#八-自适应宽高\">#</a> 八、自适应宽高</h1>\n<p>概念：元素的大小能够根据窗口或子元素自动调整，这就是自适应。<br>\n优点：可以适应在不同设备、不同窗口和不同分辨率下显示。</p>\n<h3 id=\"一-宽度自适应\"><a class=\"markdownIt-Anchor\" href=\"#一-宽度自适应\">#</a> 一、宽度自适应</h3>\n<p>概念：块级元素宽度设置成 100%，或者不设置宽度，宽度都为父元素的一整行</p>\n<h3 id=\"二-高度自适应\"><a class=\"markdownIt-Anchor\" href=\"#二-高度自适应\">#</a> 二、高度自适应</h3>\n<p>概念：父元素高度不设置，或者设置成 {height:auto;} 可以由子元素撑开</p>\n<h6 id=\"一高度塌陷\"><a class=\"markdownIt-Anchor\" href=\"#一高度塌陷\">#</a> （一）高度塌陷：</h6>\n<p>​\t当子元素都浮动了，父元素的高度将没有办法被撑开<br>\n 1\t给父元素加 overflow:hidden; 缺点：造成该容器一部分布局内容丢失<br>\n 2\t给父元素添加最后一个子元素 {height:0;clear:both;overflow:hidden;} 缺点：产生大量的标签，影响页面性能<br>\n 3\t伪元素清除法（万能清除法）：给父元素添加类名 clearfix</p>\n<pre><code>.clearfix:after&#123;\n     content:&quot;&quot;;\n     display:block;\n     height:0;\n     clear:both;\n     overflow:hidden;\n     visibility:hidden;\n     *zoom:1;\n &#125;\n</code></pre>\n<h6 id=\"二内容为空\"><a class=\"markdownIt-Anchor\" href=\"#二内容为空\">#</a> （二）内容为空</h6>\n<p>​\t若子元素内容可能为空的情况下，父元素会出现高度为 0 的情况。<br>\n解决办法：设置最小高度 min-height<br>\n​\t兼容 ie6 办法 1：在高版本浏览器，height 为固定高度，但是在 ie6，height 代表最小高度。<br>\n​\t\t* 所以只能让 ie6 才识别到 height 属性，因此得使用过滤器<br>\n​\t\t*_height 下划线属性过滤器，只有 ie6 才能识别<br>\n​\t兼容 ie6 办法 2：在高版本浏览器，!important 代表最高权重，而在 ie6 没有这个概念，会解析成普通属性<br>\n​\t\t* 设置 height:auto !important 给高版本浏览器识别，再设置 height: 具体值，事项 ie6 时覆盖 auto 属性值</p>\n<h6 id=\"三自适应窗口高度\"><a class=\"markdownIt-Anchor\" href=\"#三自适应窗口高度\">#</a> （三）自适应窗口高度</h6>\n<p height:100%;=\"\">​\t元素高度自适应窗口高度（移动端和 PC 端后台用的较多，平时较少使用）<br>\n* 当元素设置 {height:100%;}，即元素高度为父元素的高度<br>\n * 设置窗口高度为 100%，html,body</p>\n<p height:100%;=\"\">给父元素添加类名 clearfix<br>\n（2）若子元素内容可能为空的情况下，父元素会出现高度为 0 的情况。<br>\n​\t解决办法：设置最小高度 min-height<br>\n​\t\t* 当容器内容高度大于最小高度，按内容高度显示；当容器内容高度小于最小高度，按最小高度显示；<br>\n​\t兼容 ie6 办法 1：在高版本浏览器，height 为固定高度，但是在 ie6，height 代表最小高度。<br>\n​\t\t* 所以只能让 ie6 才识别到 height 属性，因此得使用过滤器<br>\n​\t\t*_height 下划线属性过滤器，只有 ie6 才能识别<br>\n​\t兼容 ie6 办法 2：在高版本浏览器，!important 代表最高权重，而在 ie6 没有这个概念，会解析成普通属性<br>\n​\t\t* 设置 height:auto !important 给高版本浏览器识别，再设置 height: 具体值，事项 ie6 时覆盖 auto 属性值<br>\n 2. 元素高度自适应窗口高度（移动端和 PC 端后台用的较多，平时较少使用）<br>\n​\t* 当元素设置 {height:100%;}，即元素高度为父元素的高度<br>\n​\t* 设置窗口高度为 100%，html,body</p>\n<h3 id=\"三-bfc\"><a class=\"markdownIt-Anchor\" href=\"#三-bfc\">#</a> 三、BFC</h3>\n<h6 id=\"一概念\"><a class=\"markdownIt-Anchor\" href=\"#一概念\">#</a> （一）概念：</h6>\n<p>块级格式化上下文，是一个独立的渲染区域，规定了内部的块如何布局，且不影响外部元素。</p>\n<h6 id=\"二布局规则\"><a class=\"markdownIt-Anchor\" href=\"#二布局规则\">#</a> （二）布局规则</h6>\n<p>内部的块级元素会在垂直方向上一个接一个摆放<br>\n​属于同一个 BFC 的两个相邻块会发生 margin 重叠<br>\n bfc 的区域不会与浮动块重叠 (</p>\n<h6 id=\"三应用场景\"><a class=\"markdownIt-Anchor\" href=\"#三应用场景\">#</a> （三）应用场景：</h6>\n<p>1\t解决高度塌陷：通过给父元素添加最后一个子元素 {height:0;clear:both;overflow:hidden;}<br>\n 2\t自适应两栏布局：左边固定宽度浮动 + 右 overflow:hidden; 左边固定宽度浮动 + 右 margin-left<br>\n3\t计算 BFC 的高度时，里面的浮动元素也参与计算（应用场景：给父元素加 {overflow:hidden;} 解决高度塌陷的问题）<br>\n4\tBFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素（应用场景：解决 margin 重叠问题：给其中一个元素设置 overflow:hidden; 将自己的样式全部给其子元素）</p>\n<h6 id=\"四触发元素成为bfc\"><a class=\"markdownIt-Anchor\" href=\"#四触发元素成为bfc\">#</a> （四）触发元素成为 bfc</h6>\n<p>1\thtml 根元素<br>\n 2\toverflow 不为 visible，常用 overflow:hidden;<br>\n3\t浮动<br>\n 4\t脱离标准流的定位<br>\n 5\tdisplay:inline-block; flex;</p>\n<h1 id=\"十一-css3\"><a class=\"markdownIt-Anchor\" href=\"#十一-css3\">#</a> 十一、CSS3</h1>\n<p>html:5 声明文档类型为 html5<br>\nhtml:4t 声明文档类型为 html4.01 过渡版本<br>\n html:4s 声明文档类型为 html4.01 严格版本<br>\n html:xt 声明文档类型为 xhtml1.0 过渡版本<br>\n html:xs 声明文档类型为 xhtml1.0 严格版本</p>\n<h3 id=\"一-选择器\"><a class=\"markdownIt-Anchor\" href=\"#一-选择器\">#</a> 一、选择器</h3>\n<p>（一）基本选择器<br>\n​\t通配符，标签，类，id，群组 选择器</p>\n<p>（二）层次（关系）选择器</p>\n<p>1. 后代选择器<br>\n E F: 匹配到 F 元素，且 F 元素是 E 元素的后代</p>\n<p>2. 子代选择器<br>\n E&gt;F: 匹配到 F 元素，且 F 元素是 E 元素的子代</p>\n<p>3. 相邻兄弟选择器<br>\n E+F: 匹配到 F 元素，且 F 元素是 E 元素后的第一个元素</p>\n<p>4. 兄弟选择器<br>\n E~F: 匹配到 F 元素，且 F 元素是 E 元素后面的元素</p>\n<p>（三）动态伪类选择器<br>\n:link 锚链接被点击前的样式<br>\n:visited 锚链接被点击后的样式<br>\n:hover 鼠标悬停在任意元素上，添加的样式<br>\n:actived 鼠标点击（激活）任意元素时，添加的样式<br>\n:focus 光标聚焦在表单元素上，添加的样式</p>\n<p>（四）目标伪类选择器<br>\n E:target  获取到作为目标的 E 元素</p>\n<p>（五）语言伪类选择器<br>\n q [lang=“no”] 会给标签内部的文本加上双引号<br>\n:lang (no){<br>\n​\tquotes: “左符号”“右符号”;<br>\n}</p>\n<p>（六）UI 元素状态伪类选择器<br>\n:enabled 给可用的表单元素添加样式<br>\n:disabled 给不可用的表单元素添加样式<br>\n:checked 给被选中的元素添加样式</p>\n<p>（七）结构伪类选择器</p>\n<p>1\tE:first-child 父元素的第一个子元素，同时满足为 E 元素</p>\n<p>2\tE:last-child 父元素的最后一个子元素，同时满足为 E 元素</p>\n<p>3\tE:nth-child (n) n 从 1 开始计数，满足为父元素的第 n 个子元素，同时为 E 元素</p>\n<p>4\tE:nth-last-child (n) n 从 1 开始计数，满足为父元素的倒数第 n 个子元素，同时为 E 元素；<br>\n​\t*2n 第偶数个孩子 (even)<br>\n​\t<em>2n-1 第奇数个孩子 (odd)<br>\n​\t*-n+a 满足为父元素的第 1 个到第 a 个孩子</em></p>\n<p>5\tE:first-of-type 满足为父元素的第一个 E 类型的子元素</p>\n<p>6\tE:last-of-type 满足为父元素的最后一个 E 类型的子元素</p>\n<p>7\tE:nth-of-type (n) 满足为父元素的第 n 个 E 类型的子元素</p>\n<p>8\tE:nth-last-of-type (n) 满足为父元素的倒数第 n 个 E 类型的子元素<br>\n 9\tE:empty 获取到内容为空（连空格都没有）的 E 元素<br>\n 10\tE:only-child 满足为父元素的唯一的一个孩子，且为 E 元素<br>\n 11\tE:only-of-type 满足为父元素唯一的一个 E 元素类型的孩子<br>\n（八）否定伪类选择器<br>\n​\tE :not (F) 在 E 元素的子元素中，除了 F 元素以外的所有<br>\n（九）属性选择器<br>\n 1\tE [attr] 拥有 attr 属性的 E 元素会被获取到<br>\n 2\tE [attr=“val”] attr 属性值为 val 的 E 元素会被获取到<br>\n 3\tE [attr*=“val”] attr 属性值包含 val 的 E 元素会被获取到<br>\n 4\tE [attr^=“val”] attr 属性值以 val 值开头的 E 元素会被获取到<br>\n 5\tE [attr$=“val”] attr 属性值以 val 结尾的 E 元素会被获取到<br>\n（十）伪类选择器<br>\n 1\tE::before 给 E 元素添加第一个子元素 (行内)<br>\n 2\tE::after 给 E 元素添加最后一个子元素 (行内)<br>\n 3\tE::first-letter 给 E 元素（块级）第一个文本添加样式<br>\n 4\tE::first-line 给 E 元素（块级）第一行文本添加样式<br>\n 5\tE::selection 给选中的文本添加样式<br>\n​\t* 火狐不支持，加私有前缀 -moz-</p>\n<h3 id=\"二-文本属性-text-shadow\"><a class=\"markdownIt-Anchor\" href=\"#二-文本属性-text-shadow\">#</a> 二、文本属性 text-shadow</h3>\n<p>1\t文本阴影 text-shadow: x-offset y-offset blur color [,… 可以省略]; 多个用逗号隔开<br>\n​\tx-offset 水平偏移<br>\n​\ty-offset 垂直偏移<br>\n​\tblur 模糊区域<br>\n​\tcolor 阴影颜色</p>\n<p>2\t文本溢出的处理方式 text-overflow<br>\n​</p>\n<p>*clip 文本溢出直接被裁掉（默认）<br>\n​</p>\n<p>*ellipsis 文本溢出用省略号代替</p>\n<p>实现单行文本省略：配合 overflow:hidden; width;white-space:nowrap; 使用</p>\n<p>实现多行文本省略：配合 overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webket-line-clamp:2;-webkit-box-orient:vertical; 使用</p>\n<p>3\t单词换行 word-wrap<br>\n​\tnormal 默认正常显示<br>\n​\tbreak-word 允许在单词内进行换行</p>\n<p>4\t单词换行的规则 word-break<br>\n​\tnormal 按照默认的换行规则<br>\n​\tbreak-all 允许在单词内部换行<br>\n​\tkeep-all 只能在空格或连接符处换行<br>\n 5\t使用服务器端字体 @font-face {}<br>\n​\t*font-family 给字体起名字<br>\n​\t*src:url () 引入字体路径<br>\n​\t*font-family 使用该字体<br>\n​\t（2）字体图标<br>\n​\t\t<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pY29uZm9udC5jb20=\">www.iconfont.com</span><br>\n​\t\t好处：图片放大会失真，而文字不会；占内存小，从而提高加载速度</p>\n<h3 id=\"三-新增颜色模式\"><a class=\"markdownIt-Anchor\" href=\"#三-新增颜色模式\">#</a> 三、新增颜色模式</h3>\n<p>1\trgba (red0-255,green0-255,blue0-255,alpha 不透明度 0-1)<br>\n 2\thsla (色调 0-360，饱和度 0-100%，lighter0-100%，alpha 不透明度 0-1)<br>\n 3\ttransparent 完全透明<br>\n​\t利用 transparet 实现三角形 (border)</p>\n<h3 id=\"四-边框属性\"><a class=\"markdownIt-Anchor\" href=\"#四-边框属性\">#</a> 四、边框属性</h3>\n<p>1\t边框阴影 box-shadow<br>\n​\tbox-shadow: x-offset y-offset blur spread color 外阴影 / 内阴影 [,… 可省略];<br>\n​\t*x-offset 水平偏移，往右为正<br>\n​\t*y-offset 垂直偏移，往下为正<br>\n​\t*blur 模糊区域<br>\n​\t*spread 扩展区域<br>\n​\t*color<br>\n​\t* 默认为外阴影 outset，内阴影 inset<br>\n2\t边框图片 border-image<br>\n​\t*boorder-image-source: url (); 引入边框图片，默认放在边框的四个角上<br>\n​\t*border-image-slice 边框图片切割。遵循上右下左原则，若缺省找反义词<br>\n​\t*border-image-width 边框图片宽度，若没写，默认就是 border 宽度<br>\n​\t*border-image-outset 边框图片向外延伸，不能为负数<br>\n​\t*border-image-repeat 边框图片是否重复，stretch 默认拉伸；repeat 只重复；round 重复完整图形<br>\n 3\t边框圆角 border-radius<br>\n * 将正方形做圆，border-radius:50%;<br>\n*border - 垂直方位 - 水平方位 - radius: 水平半径 垂直半径；<br>\n 水平方位：left right<br>\n 垂直方位：top bottom<br>\n*border-radius: 水平半径（左上角开始顺时针）/ 垂直半径（左上角开始顺时针）<br>\n若某个方向的半径值缺省，找对角</p>\n<h3 id=\"五-伪类及伪元素\"><a class=\"markdownIt-Anchor\" href=\"#五-伪类及伪元素\">#</a> 五、伪类及伪元素</h3>\n<p>伪类模仿类的存在<br>\n伪元素模仿元素的存在<br>\n二、伪元素::<br>\n1、E::before 给 E 元素添加第一个子元素<br>\n​\t*{content: “文字或图片路径”} 即使内容为空也不能省略 content 属性 content: “”;<br>\n​\t* 默认情况下为行内元素<br>\n 2、E::after 给 E 元素添加最后一个子元素<br>\n​\t*{content: “文字或图片路径”} 即使内容为空也不能省略 content 属性 content: “”;<br>\n​\t* 默认情况下为行内元素<br>\n 3、E::first-letter 给 E 元素的第一个字符添加样式<br>\n 4、E::first-line 给 E 元素的第一行字符添加样式</p>\n<h1 id=\"十二-背景属性-弹性盒\"><a class=\"markdownIt-Anchor\" href=\"#十二-背景属性-弹性盒\">#</a> 十二、背景属性、弹性盒</h1>\n<h3 id=\"一-背景属性\"><a class=\"markdownIt-Anchor\" href=\"#一-背景属性\">#</a> 一、背景属性</h3>\n<p>1\tbackground-size 规定背景图片的尺寸<br>\n * 属性值：<br>\n​\t数值（或百分比）：水平 \t垂直；若只写了一个值，代表水平方向的值，垂直方向会等比拉伸。大多数情况下，背景图片会发生变形。若 background-size:100% 100%; 则图片不会变形（错的）<br>\n​\tcover 背景图片完全覆盖容器，可能会出现背景图片丢失；背景图片等比缩放，不会出现变形的情况。<br>\n​\tcontain 容器完全包含背景图片，可能会出现留白<br>\n * 应用：<br>\n​\t利用 {background-size:cover;background-position: center;} 实现大图片在容器中的显示<br>\n 2\tbackground-origin 背景图片的定位起始区域<br>\n​\tpadding-box 默认的定位区域为 padding 以内。<br>\n​\tcontent-box 定位区域为 content 以内<br>\n​\tborder-box 定位区域为 border 以内<br>\n 3\tbackground-clip 背景图片的最终显示区域<br>\n​\tpadding-box 默认的显示区域为 padding 以内。<br>\n​\tcontent-box 显示定位区域为 content 以内<br>\n​\tborder-box 显示区域为 border 以内<br>\n 4\t多张背景图片的使用</p>\n<h3 id=\"二-弹性盒布局\"><a class=\"markdownIt-Anchor\" href=\"#二-弹性盒布局\">#</a> 二、弹性盒布局</h3>\n<p>（一）概念原理：容器有能力让其子项目能够改变其宽度、高度（甚至顺序），以最佳的方式填充可用空间<br>\n​\t* 主轴：默认为水平方向<br>\n​\t* 侧轴：主轴的交叉轴，默认为垂直方向<br>\n（二）容器的属性<br>\n 1\tdisplay:flex; 将容器设置成弹性盒，里面的子项目会在主轴方向顺序排列（不会换行），侧轴方向的大小若缺省，会被默认拉伸<br>\n 2\tflex-direction 设置主轴方向<br>\n​\trow 从左到右<br>\n​\trow-reverse 从右到左<br>\n​\tcolumn 从上往下<br>\n​\tcolumn-reverse 从下往上<br>\n 3\tflex-wrap 设置主轴方向的换行<br>\n​\t*nowrap 默认不换行，若主轴方向放不下，子项目进行缩放<br>\n​\t*wrap 换行<br>\n 4\tjustify-content   子项目在主轴方向的对齐方式<br>\n​\t*flex-start 默认在主轴方向的开始位置顺序摆放<br>\n​\t*flex-end 在主轴方向的结束位置顺序摆放<br>\n​\t*center 在主轴方向的中间位置顺序摆放<br>\n​\t*space-between 将主轴方向的剩余空间平分在子项目之间<br>\n​\t*space-around 将主轴方向的剩余空间环绕在子项目之间<br>\n 5\talign-items 子项目在侧轴方向（单行上）的对齐方式<br>\n​\t*stretch 若子项目在侧轴方向没有设置大小，则在当前行上默认拉伸<br>\n​\t*flex-start 若子项目在侧轴方向设置了大小，默认在侧轴方向（单行上）的开始位置顺序摆放<br>\n​\t*flex-end 在侧轴方向（单行上）的结束位置顺序摆放<br>\n​\t*center 在侧轴方向（单行上）的中间位置顺序摆放<br>\n​\t*baseline 在侧轴方向（单行上）以基线对齐<br>\n 6\talign-content 多行子项目在侧轴方向的对齐方式<br>\n​\t*flex-start 默认在侧轴方向的开始位置顺序摆放<br>\n​\t*flex-end 在侧轴方向的结束位置顺序摆放<br>\n​\t*center 在侧轴方向的中间位置顺序摆放<br>\n​\t*space-between 将侧轴方向的剩余空间平分在子项目之间<br>\n​\t*space-around 将侧轴方向的剩余空间环绕在子项目之间<br>\n（三）子项目的属性<br>\n 1\tflex 设置子项目的比份，无单位。<br>\n2\talign-self 单个子项目在侧轴方向（单行上）的对齐方式<br>\n​\t属性值同 align-items<br>\n3\torder 规定子项目的排列顺序<br>\n​\t* 不定义 order 的子项目会排到前面<br>\n​\t*order 越小，排在越前面<br>\n弹性盒：移动端使用。<br>\n​\t* 老版本语法：需要时查阅<br>\n​\t*flex 设置子项目在主轴方向的比份<br>\n​\t\t*flex-grow 定义子项目的扩展比率<br>\n​\t\t*flex-shrink 定义子项目的收缩比率<br>\n​\t\t*flex-basis 定义子项目的默认基准值<br>\n​\t\tflex 属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<br>\n​\t\t\tauto: 当容器有多余空间，子项目平分剩余空间，放大。当容器空间不足，子项目平分缩小。<br>\n​\t\t\tnone: 不管容器位置多还是少，子项目都不改变自己本身大小。</p>\n<h3 id=\"三-多列布局\"><a class=\"markdownIt-Anchor\" href=\"#三-多列布局\">#</a> 三、多列布局</h3>\n<p>1\t概念：自动将内容按指定的列数排列，这种特性实现的效果和报纸、杂志类排版非常相似。<br>\n2\t核心属性：<br>\n​\t（1）column-count 列数，定义分列列数；最多列数，auto 自适应（由列宽、容器宽和列间距决定），也可固定<br>\n​\t（2）column-width 列宽，定义每列列宽； 类似于最小宽度 min-width； auto 自适应；<br>\n​\t（3）column-gap：定义列间距； 不能为负数；<br>\n​\t（4）column-rule：定义列边框；与定义边框一样：2px dashed #ccc;<br>\n​\t（5）column-span：定义多列布局中子元素的跨列效果；通常用于标题；<br>\n​\t\t*none：不跨列；<br>\n​\t\t*all：跨所有列<br>\n​\t（6）break-inside: avoid; 避免图片与文字断行<br>\n columns: column-width column-count;</p>\n<h1 id=\"十三-移动端\"><a class=\"markdownIt-Anchor\" href=\"#十三-移动端\">#</a> 十三、移动端</h1>\n<h3 id=\"一设置理想视口\"><a class=\"markdownIt-Anchor\" href=\"#一设置理想视口\">#</a> （一）设置理想视口</h3>\n<p>1\t布局视口 viewpoint：比实际屏幕尺寸大很多，保证页面完整显示，但是是全局缩小后的页面。<br>\n2\t理想视口 viewpoint:meta 标签实现 meta:vp 移动端一定要记得加上这句代码<br>\n​\t许多智能手机都使用了一个比实际屏幕尺寸大很多的虚拟可视区域 viewpoint (布局视口)，主要目的就是让页面在智能手机端阅读时不会因为实际可视区域变形。所以你看到的页面还是普通样式，即一个全局缩小后的页面。为了让智能手机能根据媒体查询匹配对应样式，让页面在智能手机中正常显示，特意添加了一个 meta 标签。这个标签的主要作用就是让智能手机浏览页面时能进行优化，并且可以自定义界面可视区域的尺寸和缩放级别。<br>\n​\t如何识别手机尺寸通过设置 meta 语句：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>width: 可视区域的宽度；</p>\n<p>height: 可视区域的高度；</p>\n<p>device-width: 设备屏幕分辨率的宽度值</p>\n<p>initial-scale: 初始的缩放比例（0-10.0），取值为 1 时页面按实际尺寸显示，无任何缩放<br>\n​</p>\n<p>minimum-scale \t\t允许用户缩放到的最小比例<br>\n​</p>\n<p>maximum-scale \t\t允许用户缩放到的最大比例<br>\n​</p>\n<p>user-scalable \t\t设定用户是否可以缩放（yes/no）<br>\n​\t可以写成：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h3 id=\"二媒体查询\"><a class=\"markdownIt-Anchor\" href=\"#二媒体查询\">#</a> （二）媒体查询</h3>\n<p>1\t分界点：<br>\n超小屏幕 xs  （移动设备）768px 以下<br>\n小屏设备 sm\t768px-992px<br>\n 中等屏幕 md\t992px-1200px<br>\n 宽屏设备 lg\t1200px 以上<br>\n 2\t语法 @media screen and (条件){css 语法}<br>\n​\t*min-width 若当前页面宽度大于 min-width，则样式生效。按照从小到大的书写顺序。<br>\n​\t*max-width<br>\n​\t*min-device-width<br>\n​\t* 响应式布局：利用媒体查询，在不同的设备、不同的分辨率或者不同的屏幕宽度，对同一套页面的细节进行调整<br>\n​\t\t* 局限性：一般都只能做简单的页面<br>\n​\t\t*bootstrap 框架 以响应式出名<br>\n一、弹性盒布局<br>\n二、等比缩放布局<br>\n移动端百分比布局：<br>\n1\tmeta:vp\t设置理想视口<br>\n 2\t稿纸 640px 时，在 iphone5 开发；稿纸 750px，在 iphone6 开发<br>\n 3\t拷贝三句代码，记得给 meta：vp 加 id 名；<br>\n4\t弹性盒布局：<br>\n​\t整个页面高度 100%，设置成弹性盒，主轴向下<br>\n​\t除了中间有滚动条的部分设置成 flex:1，其他部分直接设置高度；<br>\n​\t中间有滚动条部分设置 overflow-y:auto;overflow-x:hidden;(只设置 overflow-x:hidden 也可以，另外方向自动 auto;)</p>\n<h3 id=\"三rem\"><a class=\"markdownIt-Anchor\" href=\"#三rem\">#</a> （三）rem</h3>\n<p>​\tem 以当前一个字符的大小为基准<br>\n​\trem 以 html 根部字体大小为基准<br>\n移动端 rem 布局<br>\n 1\tmeta:vp\t设置理想视口<br>\n 2\t稿纸 640px 时，在 iphone5 开发；稿纸 750px，在 iphone6 开发<br>\n 3\t拷贝三句代码，记得给 meta：vp 加 id 名；<br>\n4\t弹性盒布局：<br>\n​\t整个页面高度 100%，设置成弹性盒，主轴向下<br>\n​\t除了中间有滚动条的部分设置成 flex:1，其他部分直接设置高度；<br>\n​\t中间有滚动条部分设置 overflow-y:auto;overflow-x:hidden;(只设置 overflow-x:hidden 也可以，另外方向自动 auto;)<br>\n 5\t拷贝另外 2 句 js 代码，目的是让 html 字体大小根据设备改变。在哪个设备开发，就要用当前根部字体大小将 px 换算成 rem<br>\n​\t建议字体大小别转 rem，用媒体查询做。</p>\n<h3 id=\"四vw与vh\"><a class=\"markdownIt-Anchor\" href=\"#四vw与vh\">#</a> （四）vw 与 vh</h3>\n<p>相对于视口的高度和宽度<br>\n 1vw 相当于视口宽度的 1%，1vh 相当于视口高度的 1%</p>\n<h1 id=\"十四-渐变运动\"><a class=\"markdownIt-Anchor\" href=\"#十四-渐变运动\">#</a> 十四、渐变 + 运动</h1>\n<h3 id=\"一-渐变背景\"><a class=\"markdownIt-Anchor\" href=\"#一-渐变背景\">#</a> 一、渐变（背景）</h3>\n<p>1. 线性渐变 linear-gradient<br>\n (1) gradient (linear, 起点，终点，颜色，[, 颜色])<br>\n​\t兼容问题<br>\n​\t起点终点可以是数值，0 0 代表左上角，100% 100% 或者 width 大小 height 大小代表右下角<br>\n (2) gradient (linear, 起点，终点，color-stop (颜色开始位置，颜色)[, 颜色])<br>\n(3) linear-gradient ( 方向 || 角度， <code>&lt;stop'&gt;</code> ,  <code>&lt;stop'&gt;</code>  [,  <code>&lt;stop'&gt;</code> ]* )<br>\n​\t* 第一个参数表示线性渐变的方向。<br>\n​\t・to left：设置渐变为从右到左，相当于: 270deg;<br>\n​\t・to right：设置渐变从左到右，相当于: 90deg;<br>\n​\t・to top：设置渐变从下到上，相当于: 0deg;<br>\n​\t・to bottom：设置渐变从上到下，相当于: 180deg。（默认值）<br>\n​\t・也可以直接指定度数，如 45deg<br>\n 角度：<br>\n​\t有前缀的兼容写法，角度跟象限角度一样<br>\n​\t新版本（不加前缀）角度 + 老版本 = 90deg<br>\n2、radial-gradient 径向渐变<br>\n​\t从一个中心点开始沿着四周产生渐变效果<br>\n radial-gradient ([ [ at  <code>&lt;position&gt;</code>  ]? [  <code>&lt;shape&gt;</code>  ||  <code>&lt;size&gt;</code>  ]  , ? <code>&lt;color-stop&gt;</code> [ ,  <code>&lt;color-stop&gt;</code>  ]+)<br>\n​\t*shape：渐变的形状，ellipse 椭圆形 (默认)，circle 表示圆形。<br>\n​\t*size：渐变的大小，即渐变到哪里停止，它有四个值。<br>\n​\t\tclosest-side：最近边； farthest-side：最远边；<br>\n​\t\tclosest-corner：最近角； farthest-corner：最远角（默认值）<br>\n​\t* <code>&lt;position&gt;</code>  确定圆心的位置。<br>\n​\t\t如果提供 2 个参数，第一个表示横坐标，第二个表示纵坐标；<br>\n​\t\t如果只提供 1 个，第二值默认为 50%，即 center<br>\n​\t* <code>&lt;color&gt;</code> ：指定颜色。</p>\n<h3 id=\"二-过渡-transition\"><a class=\"markdownIt-Anchor\" href=\"#二-过渡-transition\">#</a> 二、过渡 transition</h3>\n<p>1. 经过一定的时间， 从某个状态到另一个状态<br>\n 2. 分属性<br>\n​\t(1) transition-property 过渡的属性（不可缺）<br>\n​\t(2) transition-duration 过渡的时间（不可缺）<br>\n​\t(3) transition-timing-function 过渡的形式<br>\n​\t\tlinear 线性过渡<br>\n​\t\tease 慢速进入慢速离开<br>\n​\t\tease-in 慢速进入<br>\n​\t\tease-out 慢速离开<br>\n​\t(4) transition-delay 过渡的延时<br>\n 3. 总属性：<br>\n​\ttransition: 1 2 3 4;</p>\n<h3 id=\"三-变换transform\"><a class=\"markdownIt-Anchor\" href=\"#三-变换transform\">#</a> 三、变换 transform</h3>\n<h4 id=\"一2d变换\"><a class=\"markdownIt-Anchor\" href=\"#一2d变换\">#</a> （一）2d 变换</h4>\n<p>1. 移动变换 translate<br>\n​\ttransform: translate (水平，垂直)<br>\n​\t可以用百分比，代表自己宽高的百分比<br>\n​\ttransform: translateX ()<br>\n​\ttransflorm:translateY()<br>\n 2. 缩放变换 scale (x,y)<br>\n​\tx,y 代表水平，垂直方向的缩放比例<br>\n​\t缩放的基准点为元素中心<br>\n​\ttransform: scaleX (x)<br>\n​\ttransform: scaleY(y)<br>\n 3. 旋转 rotate (角度)<br>\n​\ttransform: rotate (角度), 角度以顺时针旋转，旋转的基准点在元素中心<br>\n 4. 扭曲变换 skew ()<br>\n​\ttranform:skew (x 轴旋转的角度，y 轴旋转的角度), 扭曲变换的基准点在元素中间<br>\n​\ttransform: skewX (x 轴旋转的角度)<br>\n​\ttransform: skewY (y 轴旋转的角度)<br>\n 注意：若存在多个变换，在书写属性值时，应用空格将多个变换隔开<br>\n 5. 改变元素变换的基准点 transform-origin</p>\n<h4 id=\"二3d变换\"><a class=\"markdownIt-Anchor\" href=\"#二3d变换\">#</a> （二）3d 变换</h4>\n<p>1. 移动变换<br>\n​\ttransform:translate3d (x,y,z);<br>\n​\ttransform:translateZ(z);<br>\n2. 旋转变换<br>\n​\ttransform:rotate3d (x,y,z,deg)<br>\n​\t\txyz 取值为 0 或 1,0 代表不旋转，1 代表旋转<br>\n​\ttransform:rotateX ()<br>\n​\ttransform:rotateY()<br>\n​\ttransform:rotateZ()<br>\n 左手定律：大拇指指向轴的正方向，手指弯曲的方向为旋转的正方向<br>\n 3.skew () 扭曲变换<br>\n 4.transform-style 规定变换的样式（需要设置在父元素上）<br>\n​\tflat 默认为平面<br>\n​\tpreserve-3d 使被转换的子元素保留其 3D 转换<br>\n 5.perspective 设置观察的距离，景深（需要设置在父元素上）<br>\n6.perspective-origin 设置观察的基准点（设置在父元素上）</p>\n<h3 id=\"四-动画animation\"><a class=\"markdownIt-Anchor\" href=\"#四-动画animation\">#</a> 四、动画 animation</h3>\n<p>1. 定义动画 @keyframes<br>\n​\t@keyframes 动画名 {<br>\n​\t节点 {样式}<br>\n}<br>\n​\t通过百分比将动画分成多个节点<br>\n​\t最后通过 animation 将动画应用到指定元素上<br>\n 2.animation 用于设置动画属性<br>\n​\tanimation-name 动画名字<br>\n​\tanimation-duration 动画每次的播放时间<br>\n​\tanimation-timing-function 动画播放形式；linear ease ease-in ease-out；steps (n) 相邻两个节点之间分成多少步，默认情况下每步都是用初始状态填充分配下来的时间段，steps (n)==&gt;steps (n,end) 默认；steps (n,start) 用每一步的结束状态填充分配下来的时间<br>\n​\tanimation-delay 动画延迟<br>\n​\tanimation-iteration-count 动画的播放次数；infinite 无限次<br>\n​\tanimation-direction 动画是否轮流反向播放； reverse 方向播放 alternate 交替播放 alternate-reverse 交替方向播放<br>\n​\tanimation-fill-mode 动画完成模式；forwards 保持最后一个状态</p>\n<h1 id=\"格式化上下文\"><a class=\"markdownIt-Anchor\" href=\"#格式化上下文\">#</a> 格式化上下文</h1>\n<p>（ <code>formatting contexts</code> ）</p>\n<p><code>Formatting context</code>  是 <code>W3C CSS2.1</code>  规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系、相互作用。<br>\n格式化上下文指的是初始化元素定义的环境。包含两个要点，元素定义的环境和初始化。</p>\n<p>在  <code>CSS</code>  中，元素定义的环境有两种，一种是块格式化上下文 (  <code>Block formatting context</code>  )，另一种是行内格式化上下文 (  <code>Inline formatting context</code>  )。 这两种上下文定义了在  <code>CSS</code>  中元素所处的环境，格式化则表明了在这个环境中，元素处于此环境中应当被初始化，即元素在此环境中应当如何布局等。</p>\n<h2 id=\"格式化上下文包含以下几种情况\"><a class=\"markdownIt-Anchor\" href=\"#格式化上下文包含以下几种情况\">#</a> 格式化上下文包含以下几种情况</h2>\n<p>a：块级格式化上下文 (  <code>Block formatting contexts</code>  )( BFC )<br>\n b：行内格式化上下文 (  <code>Inline formatting contexts</code>  ) ( IFC )<br>\n c：自适应格式化上下文 (  <code>Flex Formatting Contexts</code>  )(FFC)（CSS3 新增）<br>\nd：网格布局格式化上下文 (  <code>GridLayout Formatting Contexts</code>  )(GFC)（CSS3 新增）</p>\n<h2 id=\"boxcss布局的基本单位\"><a class=\"markdownIt-Anchor\" href=\"#boxcss布局的基本单位\">#</a>  <code>BOX</code> :CSS 布局的基本单位</h2>\n<p><code>Box</code>  是  <code>CSS</code>  布局的对象和基本单位， 直观点来说，就是一个页面是由很多个  <code>Box</code>  组成的。元素的类型和  <code>display</code>  属性，决定了这个  <code>Box</code>  的类型。 不同类型的  <code>Box</code> ， 会参与不同的  <code>Formatting Context</code> （一个决定如何渲染文档的容器），因此 <code>Box</code>  内的元素会以不同的方式渲染。让我们看看有哪些盒子：</p>\n<p>a：block-level box: <code>display</code>  属性为  <code>block, list-item, table</code>  的元素，会生成  <code>block-level box</code> 。并且参与  <code>block fomatting context</code> ；</p>\n<p>c：inline-level box:display 属性为  <code>inline, inline-block, inline-table</code>  的元素，会生成  <code>inline-level box</code> 。并且参与  <code>inline formatting context</code> ；</p>\n<h1 id=\"布局拓展\"><a class=\"markdownIt-Anchor\" href=\"#布局拓展\">#</a> 布局拓展</h1>\n<h4 id=\"设置元素在父元素上居中\"><a class=\"markdownIt-Anchor\" href=\"#设置元素在父元素上居中\">#</a> 设置元素在父元素上居中</h4>\n<p>​\t1、利用行内块级元素<br>\n​\t垂直居中：<br>\n​\t\t* 将元素设置成行内块级元素，同时尺子也要设置成行内块，高度与父元素一致，宽度为 0；<br>\n​\t\t* 将与元素及尺子都要设置 vertical-align:middle;<br>\n​\t水平居中：<br>\n​\t\t* 给父容器设置 text-align:center;<br>\n 若子元素与父元素都浮动了，父元素可以不设置宽度，父元素能被子元素撑开；</p>\n<h4 id=\"自适应两栏布局\"><a class=\"markdownIt-Anchor\" href=\"#自适应两栏布局\">#</a> 自适应两栏布局</h4>\n<p>某一栏确定宽度 + 浮动，另外一栏设置 margin 的值为上一栏的宽度，自己的宽度不设置</p>\n<h4 id=\"自适应三栏布局\"><a class=\"markdownIt-Anchor\" href=\"#自适应三栏布局\">#</a> 自适应三栏布局</h4>\n<p>先写左右的元素设置宽度 + 浮动，最后才写中间的元素，设置 margin</p>\n",
            "tags": [
                "CSS"
            ]
        }
    ]
}