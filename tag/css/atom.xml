<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dukeshao.com</id>
    <title>你的名字 • Posts by &#34;css&#34; tag</title>
    <link href="https://dukeshao.com" />
    <updated>2022-07-12T22:59:00.000Z</updated>
    <category term="CSS" />
    <category term="HTML" />
    <category term="Javascript" />
    <entry>
        <id>https://dukeshao.com/2022/07/13/B_CSS/CSS/</id>
        <title>CSS</title>
        <link rel="alternate" href="https://dukeshao.com/2022/07/13/B_CSS/CSS/"/>
        <content type="html">&lt;h1 id=&#34;二-css基本语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-css基本语法&#34;&gt;#&lt;/a&gt; 二、CSS 基本语法&lt;/h1&gt;
&lt;h3 id=&#34;一-css简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-css简介&#34;&gt;#&lt;/a&gt; 一、css 简介&lt;/h3&gt;
&lt;p&gt;1、cascading style sheets 层叠样式表，主要作用是呈现样式&lt;br&gt;
​		* 层叠性&lt;br&gt;
​			给同一个元素添加相同的 css 属性，属性值之间会发生层叠问题。&lt;br&gt;
​		* 样式表&lt;/p&gt;
&lt;h3 id=&#34;二-css语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-css语法&#34;&gt;#&lt;/a&gt; 二、css 语法&lt;/h3&gt;
&lt;p&gt;1、格式：选择器 {声明}&lt;br&gt;
​		* 声明由  css 属性：属性值；组成&lt;br&gt;
​2、css 属性：&lt;br&gt;
​		*width 宽度&lt;br&gt;
​		*height 高度&lt;br&gt;
​		*background-color 背景颜色&lt;br&gt;
​			*red 红色  blue 蓝色  green 绿色  orange 橙色&lt;br&gt;
​3、css 注释：&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* css 注释 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;三-样式表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-样式表&#34;&gt;#&lt;/a&gt; 三、样式表&lt;/h3&gt;
&lt;p&gt;1、内部样式表 head&amp;gt;style，在 style 标签里面书写 css 语法格式&lt;br&gt;
 * 作用域：当前页面&lt;br&gt;
​2、外部样式表&lt;br&gt;
​	（1）建立外部样式表：css 文件夹 - 新建 css 文件，在该 css 文件里写 css 语法格式&lt;br&gt;
​	（2）在页面中链接该 css 文件，通过 head&amp;gt;link [rel=“stylesheet” href=“css 文件路径”]&lt;br&gt;
​	* 作用域：所有链接到该 css 文件的页面&lt;br&gt;
​3、内联（行内）样式表&lt;br&gt;
​	[style=“声明”]&lt;br&gt;
​	声明由 css 属性：属性值；组成&lt;br&gt;
​	* 作用域：当前元素&lt;br&gt;
​	* 优先级：就近原则（内联样式的优先级最高，内部样式与外部样式的优先级是一样大的，谁离该元素近谁就起作用）&lt;/p&gt;
&lt;h3 id=&#34;四-选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-选择器&#34;&gt;#&lt;/a&gt; 四、选择器&lt;/h3&gt;
&lt;p&gt;1、标签选择器（元素选择器、类型选择器）：将标签名字作为选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2、类选择器（class 选择器）：将。类名作为选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.box&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3、id 选择器：将 #id 名作为选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;#container&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;4、通配符选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;black&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;5、群组（并集）选择器：将选择器用逗号隔开，表示这些选择器同时被获取到&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.box,#container&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;6、后代选择器：将选择器用空格隔开&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#header .box1&amp;#123;width:100px;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;header&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;7、伪类选择器&lt;br&gt;
​	（1）:link 锚链接未被访问前的样式&lt;br&gt;
​	（2）:visited 锚链接被访问后的样式&lt;br&gt;
​	（3）:hover 鼠标悬停在元素上，才触发&lt;br&gt;
​	（4）:active 鼠标点击元素时，触发样式&lt;br&gt;
书写顺序：lv-ha&lt;br&gt;
8、交集选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;div.box&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;五-选择器的优先级及权重&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-选择器的优先级及权重&#34;&gt;#&lt;/a&gt; 五、选择器的优先级及权重&lt;/h3&gt;
&lt;p&gt;​	（1）基本选择器的优先级&lt;br&gt;
​		* 前提：给同一个元素添加相同的 css 属性，才有优先级的比较&lt;br&gt;
​	!important / 行内样式 &amp;gt; id 选择器 &amp;gt; 类选择器 / 伪类选择器 &amp;gt; 标签选择器 &amp;gt; 通配符选择器&lt;br&gt;
​	（2）选择器的权重比较&lt;br&gt;
​		0000 原则：&lt;br&gt;
​			* 第一个 0 代表！important 或者内联样式&lt;br&gt;
​			* 第二个 0 代表 id 选择器的个数&lt;br&gt;
​			* 第三个 0 表示类选择器的个数&lt;br&gt;
​			* 第四个 0 表示标签选择器的个数&lt;br&gt;
​		继承的权重最低，为 0000&lt;/p&gt;
&lt;h1 id=&#34;三-css核心属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-css核心属性&#34;&gt;#&lt;/a&gt; 三、CSS 核心属性&lt;/h1&gt;
&lt;h3 id=&#34;一-字体属性-font&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-字体属性-font&#34;&gt;#&lt;/a&gt; 一、字体属性 font&lt;/h3&gt;
&lt;p&gt;​	1、&lt;strong&gt;字体大小 font-size&lt;/strong&gt;&lt;br&gt;
​		* 默认的字体大小为 16px，最小为 12px&lt;br&gt;
​		*9pt=12px，12pt=16px&lt;br&gt;
​	2、&lt;strong&gt;字体加粗 font-weight&lt;/strong&gt;&lt;br&gt;
​		* 属性值：normal 默认情况下不加粗  bold 加粗&lt;br&gt;
​		*（100-500 表示 normal，600-900 表示 bold）&lt;br&gt;
​	3、&lt;strong&gt;字体倾斜 font-style&lt;/strong&gt;&lt;br&gt;
​		* 属性值：normal 默认情况下不倾斜  italic 倾斜 oblique 更加倾斜&lt;br&gt;
​	4、&lt;strong&gt;字体家族 font-family&lt;/strong&gt;&lt;br&gt;
​		* 属性值为汉字或者多个单词，属性值要加双引号&lt;br&gt;
​		* 同一个 CSS 分属性的多个属性值用逗号隔开&lt;br&gt;
​	5、&lt;strong&gt;字体颜色 color&lt;/strong&gt;&lt;br&gt;
​		* 属性值：英文单词、十六进制（光学模式）[#000000]&lt;br&gt;
​		* 十六进制表示法：#000000&lt;br&gt;
​			* 每位数字的取值可以是 0-9 或者 a-f&lt;br&gt;
​			* 前面两位数字表示红色 #ff0000&lt;br&gt;
​			* 中间两位数字表示绿色 #00ff00&lt;br&gt;
​			* 后面两位数字表示蓝色 #0000ff&lt;br&gt;
​			* 若表示同一个颜色的两位数都相等，可以省略为三位数 #000 黑色 #fff 白色&lt;/p&gt;
&lt;h3 id=&#34;二-文本属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-文本属性&#34;&gt;#&lt;/a&gt; 二、文本属性&lt;/h3&gt;
&lt;p&gt;​	1、&lt;strong&gt;text-transform 检索文本的大小写&lt;/strong&gt;&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			none 默认不改变&lt;br&gt;
​			uppercase 全部转成大写&lt;br&gt;
​			lowercase 全部转成小写&lt;br&gt;
​			capitalize 首字母大写&lt;br&gt;
​	2、text-decoration 文本修饰&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			none 默认没有文本修饰&lt;br&gt;
​			underline 下划线&lt;br&gt;
​			overline 上划线&lt;br&gt;
​			line-through 删除线&lt;br&gt;
​			blink 闪烁：IE、Chrome 或 Safari 不支持 “blink” 属性值。&lt;br&gt;
​	3、text-indent 首行缩进&lt;br&gt;
​		* 单位： em 以一个字体的大小为基准&lt;br&gt;
​		* 可以为负数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;text-indent:2em;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	4、letter-spacing 字间距&lt;br&gt;
​		* 以字或字母作为分界点&lt;br&gt;
​	5、word-spacing 词间距&lt;br&gt;
​		* 以空格作为分界点&lt;br&gt;
​	6、text-align 文本在当前容器的水平方向的对齐方式&lt;br&gt;
​		* 属性值：left 默认向左对齐 	 center 居中对齐  right 向右对齐   justify 两端对&lt;br&gt;
​		* 文本：文字、图片&lt;br&gt;
​		* 容器：块级元素&lt;br&gt;
​	7、vertical-align 行内元素在垂直方向上的对齐方式&lt;br&gt;
​		* 属性值：baseline 默认以基线对齐  top 顶线对齐  bottom 底线对齐  middle 中线对齐&lt;br&gt;
​		* 常用于将文字与图片垂直方向居中对齐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vertical-align:center;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	8、line-height 行高&lt;br&gt;
​		* 行高：一行的高度&lt;br&gt;
​		* 行高 = 文本的上间距 + 文本的下间距 + 字体大小&lt;br&gt;
​		*1. 在行高中，文字一定是居中显示的&lt;br&gt;
​		*2. 在同一段文本中，行高中的文本上间距 = 文本下间距&lt;br&gt;
​		*3. 常用操作：（1）若想一行文本在容器中垂直居中，可以将 line-height 设成容器的高度（2）若单行文本在居中偏上，则 line-height &amp;lt; 容器高度&lt;/p&gt;
&lt;h3 id=&#34;三-列表属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-列表属性&#34;&gt;#&lt;/a&gt; 三、列表属性&lt;/h3&gt;
&lt;p&gt;​	1、list-style-type 列表样式类型&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			disc 默认实心圆&lt;br&gt;
​			circle 空心圆&lt;br&gt;
​			square 方块&lt;br&gt;
​			none 没有样式 (用得最多)&lt;br&gt;
​	2、list-style-image: url (路径)  列表样式图片&lt;br&gt;
​	3、list-style-position 列表样式位置&lt;br&gt;
​		* 属性值： outside 在 li 的内容外边 inside 在 li 的内容里面（不稳定，不常用，有其他方式）&lt;br&gt;
​	* 总属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list-style: 1/2 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	* 用得最多的是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list-style:none;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	块级元素除了 div、li 以外，基本都有默认的 margin 或 padding 样式&lt;/p&gt;
&lt;h3 id=&#34;四-背景属性-background&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-背景属性-background&#34;&gt;#&lt;/a&gt; 四、背景属性 background&lt;/h3&gt;
&lt;p&gt;​	1、background-color 背景颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background-color:red;
background-color:#f00;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	2、background-image:url (路径) 背景图片&lt;br&gt;
​		* 当容器的尺寸小于背景图片的尺寸，背景图片会有一部分丢失&lt;br&gt;
​		* 当容器尺寸大于背景图片的尺寸，背景图片会平铺满整个容器&lt;br&gt;
​		* 当容器尺寸等于背景图片的尺寸，背景图片能刚好在容器中完整的呈现&lt;br&gt;
​	3、background-repeat 背景图片是否平铺&lt;br&gt;
​		* 属性值： repeat 默认平铺  no-repeat 不平铺  repeat-x 水平方向平铺  repeat-y 垂直方向平铺&lt;br&gt;
​	4、background-pisition 背景图片在容器中的定位&lt;br&gt;
​		（1）数值：&lt;br&gt;
​			* 背景图片往左移，为负值&lt;br&gt;
​			* 背景图片往右移，为负值&lt;br&gt;
​		（2）方位：&lt;br&gt;
​			* 水平：left 左 center 中 right 右&lt;br&gt;
​			* 垂直： top 上 center 中 bottom 下&lt;br&gt;
​	5、background-attachment 背景图片的固定&lt;br&gt;
​		* 必须配合有滚动条的元素才能使用&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			scroll 随着滚动条滚动而滚动&lt;br&gt;
​			fixed 滚动条滚动，背景图片固定位置&lt;br&gt;
总属性 background: 1 2 3 4 5;(可以缺省)&lt;/p&gt;
&lt;h3 id=&#34;五-浮动float&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-浮动float&#34;&gt;#&lt;/a&gt; 五、浮动 float&lt;/h3&gt;
&lt;p&gt;​	1、属性值：none 默认不浮动 left 向左浮动 right 向右浮动&lt;br&gt;
​	2、浮动元素的特点&lt;br&gt;
​		（1）当元素浮动了，相当于脱离了标准流，但里面的文字不会脱离文档流。&lt;br&gt;
​			* 标准流：元素的摆放顺序为从上往下、从左往右。&lt;br&gt;
​		（2）浮动的元素会按照行内块级元素进行摆放&lt;br&gt;
​			* 行内块级元素的特点：一行显示多个、可以设置宽高&lt;br&gt;
​		（3）一行放不下所有的浮动元素，浮动元素会换行显示。该元素在垂直方向上紧跟上一个元素的最低点摆放&lt;/p&gt;
&lt;h3 id=&#34;六-边框-border&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-边框-border&#34;&gt;#&lt;/a&gt; 六、边框 border&lt;/h3&gt;
&lt;p&gt;​	1、border-width 边框宽度&lt;br&gt;
​	2、border-style 边框样式&lt;br&gt;
​		* 属性值：solid 实线  dashed 虚线  dotted 点线 double 双线&lt;br&gt;
​	3、border-color 边框颜色&lt;br&gt;
​	* 总属性 border:1 2 3;&lt;br&gt;
​	*border - 方位：1 2 3&lt;br&gt;
​		* 方位：left right top bottom&lt;br&gt;
​	*border - 方位 - 分属性&lt;br&gt;
​		*border - 方位 -(width/style/color)&lt;br&gt;
​	* 分属性要覆盖总属性的某个值，则必须写在总属性的后面&lt;/p&gt;
&lt;h1 id=&#34;四-盒模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-盒模型&#34;&gt;#&lt;/a&gt; 四、盒模型&lt;/h1&gt;
&lt;h3 id=&#34;一-盒模型的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-盒模型的组成&#34;&gt;#&lt;/a&gt; 一、盒模型的组成&lt;/h3&gt;
&lt;p&gt;1、盒模型 = content+padding +border+margin&lt;br&gt;
2、标准盒模型：width、height=content&lt;br&gt;
3、怪异盒模型：width、height=content+padding+border&lt;br&gt;
4、box-sizing 规定盒模型的解析方式&lt;br&gt;
 * content-box 标准盒模型，以 content 以内为 width、height 大小&lt;br&gt;
 * border-box 怪异盒模型，以 border 以内为 width、height 大小&lt;/p&gt;
&lt;h3 id=&#34;二-padding内填充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-padding内填充&#34;&gt;#&lt;/a&gt; 二、padding 内填充&lt;/h3&gt;
&lt;p&gt;padding 的取值，遵循原则：上右下左，若某个方向的值缺省，找它的反义词的值。&lt;br&gt;
​padding - 方位：设置某个方位上的 padding&lt;br&gt;
​注意事项：&lt;br&gt;
​	padding 不能为负值&lt;br&gt;
​	背景是从 padding 的左上角开始摆放的，background-position:0 0; 在 padding 的左上角&lt;/p&gt;
&lt;h3 id=&#34;三-margin-外间距&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-margin-外间距&#34;&gt;#&lt;/a&gt; 三、margin 外间距&lt;/h3&gt;
&lt;p&gt;margin 的取值，遵循原则：上右下左，若某个方向的值缺省，找它的反义词的值。&lt;br&gt;
​margin - 方位：设置某个方位上的 margin&lt;br&gt;
​注意事项：&lt;br&gt;
​	margin 可以为负值&lt;br&gt;
​	margin 区域没有背景&lt;br&gt;
父元素的第一个子元素建议不要设置 margin-top，因为可能存在 margin 塌陷问题&lt;/p&gt;
&lt;h1 id=&#34;五-元素类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-元素类型&#34;&gt;#&lt;/a&gt; 五、元素类型&lt;/h1&gt;
&lt;h3 id=&#34;一-元素类型的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-元素类型的分类&#34;&gt;#&lt;/a&gt; 一、元素类型的分类&lt;/h3&gt;
&lt;h4 id=&#34;一块级元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一块级元素&#34;&gt;#&lt;/a&gt; （一）块级元素&lt;/h4&gt;
&lt;p&gt;​	1. 特点：块级元素的宽高默认占其父级元素的一整行，若设置了宽度，多余的区域 margin 填充。&lt;br&gt;
​		* 利用块级元素水平方向多余的 margin 实现块级元素在父容器中水平居中，给当前元素加 margin:0 auto;&lt;br&gt;
​		* 块级元素可以设置宽高&lt;br&gt;
​		* 块级元素可以理解成容器，可以容纳所有的行内元素及部分的块级元素&lt;br&gt;
​			例如：ul 里面只能嵌套 li，dl&amp;gt;dt+dd&lt;br&gt;
​			例如：有语义的标签不能在里面嵌套 div、p 不能嵌套 p、标题标签不能嵌套标题&lt;br&gt;
​	2. 代表元素&lt;br&gt;
​		div、标题 h1-h6、p、列表 ul、ol&amp;gt;li;dl&amp;gt;dt+dd、form、option&lt;/p&gt;
&lt;h4 id=&#34;二行内元素内联元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二行内元素内联元素&#34;&gt;#&lt;/a&gt; （二）行内元素（内联元素）&lt;/h4&gt;
&lt;p&gt;​	1. 特点：一行显示多个；宽高由内容决定，即不能设置宽高；行内元素遵循盒模型规律，但是设置上下的 border、padding、margin 并没有真正的生效。&lt;br&gt;
​	2. 代表元素&lt;br&gt;
​		span，buis，strong，em，ins，del，a，img，input，select，textarea，label&lt;br&gt;
​	3. 实现行内元素在父容器中水平居中&lt;br&gt;
​		* 给父容器加 text-align:center;&lt;/p&gt;
&lt;h3 id=&#34;二-元素显示类型的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-元素显示类型的转换&#34;&gt;#&lt;/a&gt; 二、元素显示类型的转换&lt;/h3&gt;
&lt;p&gt;​	属性值：*block  转换成块级元素，拥有块级元素的所有特点&lt;br&gt;
​			*inline 转换 成行内元素，拥有行内元素的所有特点&lt;br&gt;
​			*list-item 块级元素的一种特殊显示类型，为列表项&lt;br&gt;
​			*inline-block 转换成行内块级元素&lt;br&gt;
​			*none 隐藏元素，不占位置&lt;br&gt;
（二）dispaly:inline-block; 行内元素的一种特殊显示类型&lt;br&gt;
​	特点：一行显示多个；可以设置宽高；&lt;br&gt;
​	代表元素：img/input/textarea&lt;br&gt;
​	存在问题：&lt;br&gt;
​		1. 设置成行内块，元素之间的换行会被解析成一个空格&lt;br&gt;
​			解决办法：不换行；给父元素设置 font-size 为 0&lt;br&gt;
​		2. 行内元素之间存在基线对齐的问题&lt;br&gt;
​			解决办法：vertical-align;&lt;br&gt;
 三、扩展知识&lt;/p&gt;
&lt;p&gt;​	行内可置换元素 (行内块级元素)：浏览器根据元素的标签和属性，来决定元素的具体显示内容 - img [src]/input [type]/textarea [cols]+[rows]&lt;br&gt;
​	行内不可置换元素（行内元素）&lt;/p&gt;
&lt;h6 id=&#34;隐藏元素的两种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#隐藏元素的两种方式&#34;&gt;#&lt;/a&gt; 隐藏元素的两种方式&lt;/h6&gt;
&lt;p&gt;1.display:none; 隐藏元素，不占位置&lt;br&gt;
 2.visibility:hidden; 隐藏元素，占位置；&lt;br&gt;
注：overflow:hidden; 隐藏溢出容器的内容，不会隐藏容器&lt;/p&gt;
&lt;h1 id=&#34;六-定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-定位&#34;&gt;#&lt;/a&gt; 六、定位&lt;/h1&gt;
&lt;h3 id=&#34;一-定位position&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-定位position&#34;&gt;#&lt;/a&gt; 一、定位 position&lt;/h3&gt;
&lt;p&gt;（一）. 静态定位 static：&lt;br&gt;
​	* 元素的默认定位，不设置就是该定位；&lt;br&gt;
​	* 标准流中的定位；&lt;/p&gt;
&lt;p&gt;（二）. 相对定位 relative：&lt;br&gt;
​	* 相对定位的元素都是相对于自己本身所在的位置进行定位移动；&lt;br&gt;
​	* 配合 top,right,bottom,left 属性使用，若是正值，则从自己的某条边往元素中间移动为正值。&lt;br&gt;
​	* 相对定位的元素不脱离标准流。（灵魂出窍）&lt;/p&gt;
&lt;p&gt;（三）. 绝对定位 absolute&lt;br&gt;
​	* 绝对定位的元素是相对于有定位的最近的父级元素或者 html 进行定位的&lt;br&gt;
​	* 配合 left,right,top,bottom 使用，从包含块的某条边往包含块的中间移动为正值。&lt;br&gt;
​	* 脱离了标准流&lt;br&gt;
​	扩展：包含块 - 定位参考框；一般子元素设置了绝对定位，父元素的定位一般都是相	对定位除非有特殊要求。&lt;br&gt;
4. 实现任意元素类型的元素在父容器中居中显示&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;扩展：1. 子元素绝对定位 absolute, 父元素相对定位 relative（子绝父相）；&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;2. 给子元素 {left:50%;top:50%;margin-left:- 自己宽度的一半；margin-top:- 自己高度的一半；}&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;扩展：盒模型相关的属性设置百分比都是根据父元素的宽高作为基准&lt;br&gt;
 width,height,padding,border,margin,left,top,right,bottom&lt;/p&gt;
&lt;p&gt;（四）. 固定定位 fixed&lt;br&gt;
​	* 固定定位的元素相对于浏览器的可视区域进行定位&lt;br&gt;
​	* 配合 left,right,top,bottom 使用，从浏览器可视区域的某条边往中间移动为正值&lt;br&gt;
​	* 固定定位的元素脱离了标准流&lt;br&gt;
拓展：子代选择器（ie8+）&amp;gt;&lt;br&gt;
 例如 ul&amp;gt;li 表示获取 ul 的子元素 li&lt;/p&gt;
&lt;h3 id=&#34;二-层级z-index&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-层级z-index&#34;&gt;#&lt;/a&gt; 二、层级 z-index&lt;/h3&gt;
&lt;p&gt;​	* 层级越高的元素在越上面&lt;br&gt;
​	* 默认情况下，定位的层级 &amp;gt; 标准流中的层级。浮动的层级 &amp;gt; 标准流中的层级（-1,0,1）&lt;br&gt;
​	* 只有设置了定位的元素才可以设置 z-index&lt;br&gt;
​	* 层级为整数，可以为负数&lt;/p&gt;
&lt;h3 id=&#34;三-overflow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-overflow&#34;&gt;#&lt;/a&gt; 三、overflow&lt;/h3&gt;
&lt;p&gt;​	内容溢出容器时的处理方式&lt;br&gt;
属性值：&lt;br&gt;
​	visible 默认可见&lt;br&gt;
​	hidden 隐藏溢出内容&lt;br&gt;
​	scroll 出现滚动条&lt;br&gt;
​	auto 自动判断溢出出现滚动条&lt;br&gt;
 overflow-x: 设置水平方向&lt;br&gt;
 overflow-y：设置垂直方向&lt;br&gt;
&lt;strong&gt;&lt;u&gt;当设置了某个方向的 overflow 不为 visible, 另外一个方向自动为 auto&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;七-图片整合技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-图片整合技术&#34;&gt;#&lt;/a&gt; 七、图片整合技术：&lt;/h1&gt;
&lt;p&gt;设置块、宽高背景、定位 absolute（记得给它爸爸加 relative）&lt;br&gt;
宽高不一致就单独设置&lt;br&gt;
背景的定位 background-position 也不一样，单独设置&lt;br&gt;
小图标相对于父元素的位置也不一样，单独设置 left、right、top、bottom&lt;/p&gt;
&lt;p&gt;** 原理：** 将一组背景图片有规律的合并成一张背景图（精灵图，雪碧图），再利用 background-position 实现背景图片的定位。&lt;/p&gt;
&lt;p&gt;** 好处：** 减少页面的请求次数，从而提高页面的加载速度；合并后的图片体积减小，从而提高加载速度；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	1.h1：背景图&lt;br&gt;
​	2. 小图标：背景图&lt;br&gt;
​	3. 轮播图：都可以（建议用背景图）&lt;br&gt;
​	4. 每天都要更新的图片：都可以（建议用图片）&lt;/p&gt;
&lt;h1 id=&#34;八-自适应宽高&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#八-自适应宽高&#34;&gt;#&lt;/a&gt; 八、自适应宽高&lt;/h1&gt;
&lt;p&gt;概念：元素的大小能够根据窗口或子元素自动调整，这就是自适应。&lt;br&gt;
优点：可以适应在不同设备、不同窗口和不同分辨率下显示。&lt;/p&gt;
&lt;h3 id=&#34;一-宽度自适应&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-宽度自适应&#34;&gt;#&lt;/a&gt; 一、宽度自适应&lt;/h3&gt;
&lt;p&gt;概念：块级元素宽度设置成 100%，或者不设置宽度，宽度都为父元素的一整行&lt;/p&gt;
&lt;h3 id=&#34;二-高度自适应&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-高度自适应&#34;&gt;#&lt;/a&gt; 二、高度自适应&lt;/h3&gt;
&lt;p&gt;概念：父元素高度不设置，或者设置成 {height:auto;} 可以由子元素撑开&lt;/p&gt;
&lt;h6 id=&#34;一高度塌陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一高度塌陷&#34;&gt;#&lt;/a&gt; （一）高度塌陷：&lt;/h6&gt;
&lt;p&gt;​	当子元素都浮动了，父元素的高度将没有办法被撑开&lt;br&gt;
 1	给父元素加 overflow:hidden; 缺点：造成该容器一部分布局内容丢失&lt;br&gt;
 2	给父元素添加最后一个子元素 {height:0;clear:both;overflow:hidden;} 缺点：产生大量的标签，影响页面性能&lt;br&gt;
 3	伪元素清除法（万能清除法）：给父元素添加类名 clearfix&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.clearfix:after&amp;#123;
     content:&amp;quot;&amp;quot;;
     display:block;
     height:0;
     clear:both;
     overflow:hidden;
     visibility:hidden;
     *zoom:1;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;二内容为空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二内容为空&#34;&gt;#&lt;/a&gt; （二）内容为空&lt;/h6&gt;
&lt;p&gt;​	若子元素内容可能为空的情况下，父元素会出现高度为 0 的情况。&lt;br&gt;
解决办法：设置最小高度 min-height&lt;br&gt;
​	兼容 ie6 办法 1：在高版本浏览器，height 为固定高度，但是在 ie6，height 代表最小高度。&lt;br&gt;
​		* 所以只能让 ie6 才识别到 height 属性，因此得使用过滤器&lt;br&gt;
​		*_height 下划线属性过滤器，只有 ie6 才能识别&lt;br&gt;
​	兼容 ie6 办法 2：在高版本浏览器，!important 代表最高权重，而在 ie6 没有这个概念，会解析成普通属性&lt;br&gt;
​		* 设置 height:auto !important 给高版本浏览器识别，再设置 height: 具体值，事项 ie6 时覆盖 auto 属性值&lt;/p&gt;
&lt;h6 id=&#34;三自适应窗口高度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三自适应窗口高度&#34;&gt;#&lt;/a&gt; （三）自适应窗口高度&lt;/h6&gt;
&lt;p height:100%;=&#34;&#34;&gt;​	元素高度自适应窗口高度（移动端和 PC 端后台用的较多，平时较少使用）&lt;br&gt;
* 当元素设置 {height:100%;}，即元素高度为父元素的高度&lt;br&gt;
 * 设置窗口高度为 100%，html,body&lt;/p&gt;
&lt;p height:100%;=&#34;&#34;&gt;给父元素添加类名 clearfix&lt;br&gt;
（2）若子元素内容可能为空的情况下，父元素会出现高度为 0 的情况。&lt;br&gt;
​	解决办法：设置最小高度 min-height&lt;br&gt;
​		* 当容器内容高度大于最小高度，按内容高度显示；当容器内容高度小于最小高度，按最小高度显示；&lt;br&gt;
​	兼容 ie6 办法 1：在高版本浏览器，height 为固定高度，但是在 ie6，height 代表最小高度。&lt;br&gt;
​		* 所以只能让 ie6 才识别到 height 属性，因此得使用过滤器&lt;br&gt;
​		*_height 下划线属性过滤器，只有 ie6 才能识别&lt;br&gt;
​	兼容 ie6 办法 2：在高版本浏览器，!important 代表最高权重，而在 ie6 没有这个概念，会解析成普通属性&lt;br&gt;
​		* 设置 height:auto !important 给高版本浏览器识别，再设置 height: 具体值，事项 ie6 时覆盖 auto 属性值&lt;br&gt;
 2. 元素高度自适应窗口高度（移动端和 PC 端后台用的较多，平时较少使用）&lt;br&gt;
​	* 当元素设置 {height:100%;}，即元素高度为父元素的高度&lt;br&gt;
​	* 设置窗口高度为 100%，html,body&lt;/p&gt;
&lt;h3 id=&#34;三-bfc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-bfc&#34;&gt;#&lt;/a&gt; 三、BFC&lt;/h3&gt;
&lt;h6 id=&#34;一概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一概念&#34;&gt;#&lt;/a&gt; （一）概念：&lt;/h6&gt;
&lt;p&gt;块级格式化上下文，是一个独立的渲染区域，规定了内部的块如何布局，且不影响外部元素。&lt;/p&gt;
&lt;h6 id=&#34;二布局规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二布局规则&#34;&gt;#&lt;/a&gt; （二）布局规则&lt;/h6&gt;
&lt;p&gt;内部的块级元素会在垂直方向上一个接一个摆放&lt;br&gt;
​属于同一个 BFC 的两个相邻块会发生 margin 重叠&lt;br&gt;
 bfc 的区域不会与浮动块重叠 (&lt;/p&gt;
&lt;h6 id=&#34;三应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三应用场景&#34;&gt;#&lt;/a&gt; （三）应用场景：&lt;/h6&gt;
&lt;p&gt;1	解决高度塌陷：通过给父元素添加最后一个子元素 {height:0;clear:both;overflow:hidden;}&lt;br&gt;
 2	自适应两栏布局：左边固定宽度浮动 + 右 overflow:hidden; 左边固定宽度浮动 + 右 margin-left&lt;br&gt;
3	计算 BFC 的高度时，里面的浮动元素也参与计算（应用场景：给父元素加 {overflow:hidden;} 解决高度塌陷的问题）&lt;br&gt;
4	BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素（应用场景：解决 margin 重叠问题：给其中一个元素设置 overflow:hidden; 将自己的样式全部给其子元素）&lt;/p&gt;
&lt;h6 id=&#34;四触发元素成为bfc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四触发元素成为bfc&#34;&gt;#&lt;/a&gt; （四）触发元素成为 bfc&lt;/h6&gt;
&lt;p&gt;1	html 根元素&lt;br&gt;
 2	overflow 不为 visible，常用 overflow:hidden;&lt;br&gt;
3	浮动&lt;br&gt;
 4	脱离标准流的定位&lt;br&gt;
 5	display:inline-block; flex;&lt;/p&gt;
&lt;h1 id=&#34;十一-css3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十一-css3&#34;&gt;#&lt;/a&gt; 十一、CSS3&lt;/h1&gt;
&lt;p&gt;html:5 声明文档类型为 html5&lt;br&gt;
html:4t 声明文档类型为 html4.01 过渡版本&lt;br&gt;
 html:4s 声明文档类型为 html4.01 严格版本&lt;br&gt;
 html:xt 声明文档类型为 xhtml1.0 过渡版本&lt;br&gt;
 html:xs 声明文档类型为 xhtml1.0 严格版本&lt;/p&gt;
&lt;h3 id=&#34;一-选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-选择器&#34;&gt;#&lt;/a&gt; 一、选择器&lt;/h3&gt;
&lt;p&gt;（一）基本选择器&lt;br&gt;
​	通配符，标签，类，id，群组 选择器&lt;/p&gt;
&lt;p&gt;（二）层次（关系）选择器&lt;/p&gt;
&lt;p&gt;1. 后代选择器&lt;br&gt;
 E F: 匹配到 F 元素，且 F 元素是 E 元素的后代&lt;/p&gt;
&lt;p&gt;2. 子代选择器&lt;br&gt;
 E&amp;gt;F: 匹配到 F 元素，且 F 元素是 E 元素的子代&lt;/p&gt;
&lt;p&gt;3. 相邻兄弟选择器&lt;br&gt;
 E+F: 匹配到 F 元素，且 F 元素是 E 元素后的第一个元素&lt;/p&gt;
&lt;p&gt;4. 兄弟选择器&lt;br&gt;
 E~F: 匹配到 F 元素，且 F 元素是 E 元素后面的元素&lt;/p&gt;
&lt;p&gt;（三）动态伪类选择器&lt;br&gt;
:link 锚链接被点击前的样式&lt;br&gt;
:visited 锚链接被点击后的样式&lt;br&gt;
:hover 鼠标悬停在任意元素上，添加的样式&lt;br&gt;
:actived 鼠标点击（激活）任意元素时，添加的样式&lt;br&gt;
:focus 光标聚焦在表单元素上，添加的样式&lt;/p&gt;
&lt;p&gt;（四）目标伪类选择器&lt;br&gt;
 E:target  获取到作为目标的 E 元素&lt;/p&gt;
&lt;p&gt;（五）语言伪类选择器&lt;br&gt;
 q [lang=“no”] 会给标签内部的文本加上双引号&lt;br&gt;
:lang (no){&lt;br&gt;
​	quotes: “左符号”“右符号”;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;（六）UI 元素状态伪类选择器&lt;br&gt;
:enabled 给可用的表单元素添加样式&lt;br&gt;
:disabled 给不可用的表单元素添加样式&lt;br&gt;
:checked 给被选中的元素添加样式&lt;/p&gt;
&lt;p&gt;（七）结构伪类选择器&lt;/p&gt;
&lt;p&gt;1	E:first-child 父元素的第一个子元素，同时满足为 E 元素&lt;/p&gt;
&lt;p&gt;2	E:last-child 父元素的最后一个子元素，同时满足为 E 元素&lt;/p&gt;
&lt;p&gt;3	E:nth-child (n) n 从 1 开始计数，满足为父元素的第 n 个子元素，同时为 E 元素&lt;/p&gt;
&lt;p&gt;4	E:nth-last-child (n) n 从 1 开始计数，满足为父元素的倒数第 n 个子元素，同时为 E 元素；&lt;br&gt;
​	*2n 第偶数个孩子 (even)&lt;br&gt;
​	&lt;em&gt;2n-1 第奇数个孩子 (odd)&lt;br&gt;
​	*-n+a 满足为父元素的第 1 个到第 a 个孩子&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;5	E:first-of-type 满足为父元素的第一个 E 类型的子元素&lt;/p&gt;
&lt;p&gt;6	E:last-of-type 满足为父元素的最后一个 E 类型的子元素&lt;/p&gt;
&lt;p&gt;7	E:nth-of-type (n) 满足为父元素的第 n 个 E 类型的子元素&lt;/p&gt;
&lt;p&gt;8	E:nth-last-of-type (n) 满足为父元素的倒数第 n 个 E 类型的子元素&lt;br&gt;
 9	E:empty 获取到内容为空（连空格都没有）的 E 元素&lt;br&gt;
 10	E:only-child 满足为父元素的唯一的一个孩子，且为 E 元素&lt;br&gt;
 11	E:only-of-type 满足为父元素唯一的一个 E 元素类型的孩子&lt;br&gt;
（八）否定伪类选择器&lt;br&gt;
​	E :not (F) 在 E 元素的子元素中，除了 F 元素以外的所有&lt;br&gt;
（九）属性选择器&lt;br&gt;
 1	E [attr] 拥有 attr 属性的 E 元素会被获取到&lt;br&gt;
 2	E [attr=“val”] attr 属性值为 val 的 E 元素会被获取到&lt;br&gt;
 3	E [attr*=“val”] attr 属性值包含 val 的 E 元素会被获取到&lt;br&gt;
 4	E [attr^=“val”] attr 属性值以 val 值开头的 E 元素会被获取到&lt;br&gt;
 5	E [attr$=“val”] attr 属性值以 val 结尾的 E 元素会被获取到&lt;br&gt;
（十）伪类选择器&lt;br&gt;
 1	E::before 给 E 元素添加第一个子元素 (行内)&lt;br&gt;
 2	E::after 给 E 元素添加最后一个子元素 (行内)&lt;br&gt;
 3	E::first-letter 给 E 元素（块级）第一个文本添加样式&lt;br&gt;
 4	E::first-line 给 E 元素（块级）第一行文本添加样式&lt;br&gt;
 5	E::selection 给选中的文本添加样式&lt;br&gt;
​	* 火狐不支持，加私有前缀 -moz-&lt;/p&gt;
&lt;h3 id=&#34;二-文本属性-text-shadow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-文本属性-text-shadow&#34;&gt;#&lt;/a&gt; 二、文本属性 text-shadow&lt;/h3&gt;
&lt;p&gt;1	文本阴影 text-shadow: x-offset y-offset blur color [,… 可以省略]; 多个用逗号隔开&lt;br&gt;
​	x-offset 水平偏移&lt;br&gt;
​	y-offset 垂直偏移&lt;br&gt;
​	blur 模糊区域&lt;br&gt;
​	color 阴影颜色&lt;/p&gt;
&lt;p&gt;2	文本溢出的处理方式 text-overflow&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;*clip 文本溢出直接被裁掉（默认）&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;*ellipsis 文本溢出用省略号代替&lt;/p&gt;
&lt;p&gt;实现单行文本省略：配合 overflow:hidden; width;white-space:nowrap; 使用&lt;/p&gt;
&lt;p&gt;实现多行文本省略：配合 overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webket-line-clamp:2;-webkit-box-orient:vertical; 使用&lt;/p&gt;
&lt;p&gt;3	单词换行 word-wrap&lt;br&gt;
​	normal 默认正常显示&lt;br&gt;
​	break-word 允许在单词内进行换行&lt;/p&gt;
&lt;p&gt;4	单词换行的规则 word-break&lt;br&gt;
​	normal 按照默认的换行规则&lt;br&gt;
​	break-all 允许在单词内部换行&lt;br&gt;
​	keep-all 只能在空格或连接符处换行&lt;br&gt;
 5	使用服务器端字体 @font-face {}&lt;br&gt;
​	*font-family 给字体起名字&lt;br&gt;
​	*src:url () 引入字体路径&lt;br&gt;
​	*font-family 使用该字体&lt;br&gt;
​	（2）字体图标&lt;br&gt;
​		&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5pY29uZm9udC5jb20=&#34;&gt;www.iconfont.com&lt;/span&gt;&lt;br&gt;
​		好处：图片放大会失真，而文字不会；占内存小，从而提高加载速度&lt;/p&gt;
&lt;h3 id=&#34;三-新增颜色模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-新增颜色模式&#34;&gt;#&lt;/a&gt; 三、新增颜色模式&lt;/h3&gt;
&lt;p&gt;1	rgba (red0-255,green0-255,blue0-255,alpha 不透明度 0-1)&lt;br&gt;
 2	hsla (色调 0-360，饱和度 0-100%，lighter0-100%，alpha 不透明度 0-1)&lt;br&gt;
 3	transparent 完全透明&lt;br&gt;
​	利用 transparet 实现三角形 (border)&lt;/p&gt;
&lt;h3 id=&#34;四-边框属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-边框属性&#34;&gt;#&lt;/a&gt; 四、边框属性&lt;/h3&gt;
&lt;p&gt;1	边框阴影 box-shadow&lt;br&gt;
​	box-shadow: x-offset y-offset blur spread color 外阴影 / 内阴影 [,… 可省略];&lt;br&gt;
​	*x-offset 水平偏移，往右为正&lt;br&gt;
​	*y-offset 垂直偏移，往下为正&lt;br&gt;
​	*blur 模糊区域&lt;br&gt;
​	*spread 扩展区域&lt;br&gt;
​	*color&lt;br&gt;
​	* 默认为外阴影 outset，内阴影 inset&lt;br&gt;
2	边框图片 border-image&lt;br&gt;
​	*boorder-image-source: url (); 引入边框图片，默认放在边框的四个角上&lt;br&gt;
​	*border-image-slice 边框图片切割。遵循上右下左原则，若缺省找反义词&lt;br&gt;
​	*border-image-width 边框图片宽度，若没写，默认就是 border 宽度&lt;br&gt;
​	*border-image-outset 边框图片向外延伸，不能为负数&lt;br&gt;
​	*border-image-repeat 边框图片是否重复，stretch 默认拉伸；repeat 只重复；round 重复完整图形&lt;br&gt;
 3	边框圆角 border-radius&lt;br&gt;
 * 将正方形做圆，border-radius:50%;&lt;br&gt;
*border - 垂直方位 - 水平方位 - radius: 水平半径 垂直半径；&lt;br&gt;
 水平方位：left right&lt;br&gt;
 垂直方位：top bottom&lt;br&gt;
*border-radius: 水平半径（左上角开始顺时针）/ 垂直半径（左上角开始顺时针）&lt;br&gt;
若某个方向的半径值缺省，找对角&lt;/p&gt;
&lt;h3 id=&#34;五-伪类及伪元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-伪类及伪元素&#34;&gt;#&lt;/a&gt; 五、伪类及伪元素&lt;/h3&gt;
&lt;p&gt;伪类模仿类的存在&lt;br&gt;
伪元素模仿元素的存在&lt;br&gt;
二、伪元素::&lt;br&gt;
1、E::before 给 E 元素添加第一个子元素&lt;br&gt;
​	*{content: “文字或图片路径”} 即使内容为空也不能省略 content 属性 content: “”;&lt;br&gt;
​	* 默认情况下为行内元素&lt;br&gt;
 2、E::after 给 E 元素添加最后一个子元素&lt;br&gt;
​	*{content: “文字或图片路径”} 即使内容为空也不能省略 content 属性 content: “”;&lt;br&gt;
​	* 默认情况下为行内元素&lt;br&gt;
 3、E::first-letter 给 E 元素的第一个字符添加样式&lt;br&gt;
 4、E::first-line 给 E 元素的第一行字符添加样式&lt;/p&gt;
&lt;h1 id=&#34;十二-背景属性-弹性盒&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十二-背景属性-弹性盒&#34;&gt;#&lt;/a&gt; 十二、背景属性、弹性盒&lt;/h1&gt;
&lt;h3 id=&#34;一-背景属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-背景属性&#34;&gt;#&lt;/a&gt; 一、背景属性&lt;/h3&gt;
&lt;p&gt;1	background-size 规定背景图片的尺寸&lt;br&gt;
 * 属性值：&lt;br&gt;
​	数值（或百分比）：水平 	垂直；若只写了一个值，代表水平方向的值，垂直方向会等比拉伸。大多数情况下，背景图片会发生变形。若 background-size:100% 100%; 则图片不会变形（错的）&lt;br&gt;
​	cover 背景图片完全覆盖容器，可能会出现背景图片丢失；背景图片等比缩放，不会出现变形的情况。&lt;br&gt;
​	contain 容器完全包含背景图片，可能会出现留白&lt;br&gt;
 * 应用：&lt;br&gt;
​	利用 {background-size:cover;background-position: center;} 实现大图片在容器中的显示&lt;br&gt;
 2	background-origin 背景图片的定位起始区域&lt;br&gt;
​	padding-box 默认的定位区域为 padding 以内。&lt;br&gt;
​	content-box 定位区域为 content 以内&lt;br&gt;
​	border-box 定位区域为 border 以内&lt;br&gt;
 3	background-clip 背景图片的最终显示区域&lt;br&gt;
​	padding-box 默认的显示区域为 padding 以内。&lt;br&gt;
​	content-box 显示定位区域为 content 以内&lt;br&gt;
​	border-box 显示区域为 border 以内&lt;br&gt;
 4	多张背景图片的使用&lt;/p&gt;
&lt;h3 id=&#34;二-弹性盒布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-弹性盒布局&#34;&gt;#&lt;/a&gt; 二、弹性盒布局&lt;/h3&gt;
&lt;p&gt;（一）概念原理：容器有能力让其子项目能够改变其宽度、高度（甚至顺序），以最佳的方式填充可用空间&lt;br&gt;
​	* 主轴：默认为水平方向&lt;br&gt;
​	* 侧轴：主轴的交叉轴，默认为垂直方向&lt;br&gt;
（二）容器的属性&lt;br&gt;
 1	display:flex; 将容器设置成弹性盒，里面的子项目会在主轴方向顺序排列（不会换行），侧轴方向的大小若缺省，会被默认拉伸&lt;br&gt;
 2	flex-direction 设置主轴方向&lt;br&gt;
​	row 从左到右&lt;br&gt;
​	row-reverse 从右到左&lt;br&gt;
​	column 从上往下&lt;br&gt;
​	column-reverse 从下往上&lt;br&gt;
 3	flex-wrap 设置主轴方向的换行&lt;br&gt;
​	*nowrap 默认不换行，若主轴方向放不下，子项目进行缩放&lt;br&gt;
​	*wrap 换行&lt;br&gt;
 4	justify-content   子项目在主轴方向的对齐方式&lt;br&gt;
​	*flex-start 默认在主轴方向的开始位置顺序摆放&lt;br&gt;
​	*flex-end 在主轴方向的结束位置顺序摆放&lt;br&gt;
​	*center 在主轴方向的中间位置顺序摆放&lt;br&gt;
​	*space-between 将主轴方向的剩余空间平分在子项目之间&lt;br&gt;
​	*space-around 将主轴方向的剩余空间环绕在子项目之间&lt;br&gt;
 5	align-items 子项目在侧轴方向（单行上）的对齐方式&lt;br&gt;
​	*stretch 若子项目在侧轴方向没有设置大小，则在当前行上默认拉伸&lt;br&gt;
​	*flex-start 若子项目在侧轴方向设置了大小，默认在侧轴方向（单行上）的开始位置顺序摆放&lt;br&gt;
​	*flex-end 在侧轴方向（单行上）的结束位置顺序摆放&lt;br&gt;
​	*center 在侧轴方向（单行上）的中间位置顺序摆放&lt;br&gt;
​	*baseline 在侧轴方向（单行上）以基线对齐&lt;br&gt;
 6	align-content 多行子项目在侧轴方向的对齐方式&lt;br&gt;
​	*flex-start 默认在侧轴方向的开始位置顺序摆放&lt;br&gt;
​	*flex-end 在侧轴方向的结束位置顺序摆放&lt;br&gt;
​	*center 在侧轴方向的中间位置顺序摆放&lt;br&gt;
​	*space-between 将侧轴方向的剩余空间平分在子项目之间&lt;br&gt;
​	*space-around 将侧轴方向的剩余空间环绕在子项目之间&lt;br&gt;
（三）子项目的属性&lt;br&gt;
 1	flex 设置子项目的比份，无单位。&lt;br&gt;
2	align-self 单个子项目在侧轴方向（单行上）的对齐方式&lt;br&gt;
​	属性值同 align-items&lt;br&gt;
3	order 规定子项目的排列顺序&lt;br&gt;
​	* 不定义 order 的子项目会排到前面&lt;br&gt;
​	*order 越小，排在越前面&lt;br&gt;
弹性盒：移动端使用。&lt;br&gt;
​	* 老版本语法：需要时查阅&lt;br&gt;
​	*flex 设置子项目在主轴方向的比份&lt;br&gt;
​		*flex-grow 定义子项目的扩展比率&lt;br&gt;
​		*flex-shrink 定义子项目的收缩比率&lt;br&gt;
​		*flex-basis 定义子项目的默认基准值&lt;br&gt;
​		flex 属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。&lt;br&gt;
​			auto: 当容器有多余空间，子项目平分剩余空间，放大。当容器空间不足，子项目平分缩小。&lt;br&gt;
​			none: 不管容器位置多还是少，子项目都不改变自己本身大小。&lt;/p&gt;
&lt;h3 id=&#34;三-多列布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-多列布局&#34;&gt;#&lt;/a&gt; 三、多列布局&lt;/h3&gt;
&lt;p&gt;1	概念：自动将内容按指定的列数排列，这种特性实现的效果和报纸、杂志类排版非常相似。&lt;br&gt;
2	核心属性：&lt;br&gt;
​	（1）column-count 列数，定义分列列数；最多列数，auto 自适应（由列宽、容器宽和列间距决定），也可固定&lt;br&gt;
​	（2）column-width 列宽，定义每列列宽； 类似于最小宽度 min-width； auto 自适应；&lt;br&gt;
​	（3）column-gap：定义列间距； 不能为负数；&lt;br&gt;
​	（4）column-rule：定义列边框；与定义边框一样：2px dashed #ccc;&lt;br&gt;
​	（5）column-span：定义多列布局中子元素的跨列效果；通常用于标题；&lt;br&gt;
​		*none：不跨列；&lt;br&gt;
​		*all：跨所有列&lt;br&gt;
​	（6）break-inside: avoid; 避免图片与文字断行&lt;br&gt;
 columns: column-width column-count;&lt;/p&gt;
&lt;h1 id=&#34;十三-移动端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十三-移动端&#34;&gt;#&lt;/a&gt; 十三、移动端&lt;/h1&gt;
&lt;h3 id=&#34;一设置理想视口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一设置理想视口&#34;&gt;#&lt;/a&gt; （一）设置理想视口&lt;/h3&gt;
&lt;p&gt;1	布局视口 viewpoint：比实际屏幕尺寸大很多，保证页面完整显示，但是是全局缩小后的页面。&lt;br&gt;
2	理想视口 viewpoint:meta 标签实现 meta:vp 移动端一定要记得加上这句代码&lt;br&gt;
​	许多智能手机都使用了一个比实际屏幕尺寸大很多的虚拟可视区域 viewpoint (布局视口)，主要目的就是让页面在智能手机端阅读时不会因为实际可视区域变形。所以你看到的页面还是普通样式，即一个全局缩小后的页面。为了让智能手机能根据媒体查询匹配对应样式，让页面在智能手机中正常显示，特意添加了一个 meta 标签。这个标签的主要作用就是让智能手机浏览页面时能进行优化，并且可以自定义界面可视区域的尺寸和缩放级别。&lt;br&gt;
​	如何识别手机尺寸通过设置 meta 语句：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;width: 可视区域的宽度；&lt;/p&gt;
&lt;p&gt;height: 可视区域的高度；&lt;/p&gt;
&lt;p&gt;device-width: 设备屏幕分辨率的宽度值&lt;/p&gt;
&lt;p&gt;initial-scale: 初始的缩放比例（0-10.0），取值为 1 时页面按实际尺寸显示，无任何缩放&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;minimum-scale 		允许用户缩放到的最小比例&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;maximum-scale 		允许用户缩放到的最大比例&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;user-scalable 		设定用户是否可以缩放（yes/no）&lt;br&gt;
​	可以写成：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width,initial-scale=1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;二媒体查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二媒体查询&#34;&gt;#&lt;/a&gt; （二）媒体查询&lt;/h3&gt;
&lt;p&gt;1	分界点：&lt;br&gt;
超小屏幕 xs  （移动设备）768px 以下&lt;br&gt;
小屏设备 sm	768px-992px&lt;br&gt;
 中等屏幕 md	992px-1200px&lt;br&gt;
 宽屏设备 lg	1200px 以上&lt;br&gt;
 2	语法 @media screen and (条件){css 语法}&lt;br&gt;
​	*min-width 若当前页面宽度大于 min-width，则样式生效。按照从小到大的书写顺序。&lt;br&gt;
​	*max-width&lt;br&gt;
​	*min-device-width&lt;br&gt;
​	* 响应式布局：利用媒体查询，在不同的设备、不同的分辨率或者不同的屏幕宽度，对同一套页面的细节进行调整&lt;br&gt;
​		* 局限性：一般都只能做简单的页面&lt;br&gt;
​		*bootstrap 框架 以响应式出名&lt;br&gt;
一、弹性盒布局&lt;br&gt;
二、等比缩放布局&lt;br&gt;
移动端百分比布局：&lt;br&gt;
1	meta:vp	设置理想视口&lt;br&gt;
 2	稿纸 640px 时，在 iphone5 开发；稿纸 750px，在 iphone6 开发&lt;br&gt;
 3	拷贝三句代码，记得给 meta：vp 加 id 名；&lt;br&gt;
4	弹性盒布局：&lt;br&gt;
​	整个页面高度 100%，设置成弹性盒，主轴向下&lt;br&gt;
​	除了中间有滚动条的部分设置成 flex:1，其他部分直接设置高度；&lt;br&gt;
​	中间有滚动条部分设置 overflow-y:auto;overflow-x:hidden;(只设置 overflow-x:hidden 也可以，另外方向自动 auto;)&lt;/p&gt;
&lt;h3 id=&#34;三rem&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三rem&#34;&gt;#&lt;/a&gt; （三）rem&lt;/h3&gt;
&lt;p&gt;​	em 以当前一个字符的大小为基准&lt;br&gt;
​	rem 以 html 根部字体大小为基准&lt;br&gt;
移动端 rem 布局&lt;br&gt;
 1	meta:vp	设置理想视口&lt;br&gt;
 2	稿纸 640px 时，在 iphone5 开发；稿纸 750px，在 iphone6 开发&lt;br&gt;
 3	拷贝三句代码，记得给 meta：vp 加 id 名；&lt;br&gt;
4	弹性盒布局：&lt;br&gt;
​	整个页面高度 100%，设置成弹性盒，主轴向下&lt;br&gt;
​	除了中间有滚动条的部分设置成 flex:1，其他部分直接设置高度；&lt;br&gt;
​	中间有滚动条部分设置 overflow-y:auto;overflow-x:hidden;(只设置 overflow-x:hidden 也可以，另外方向自动 auto;)&lt;br&gt;
 5	拷贝另外 2 句 js 代码，目的是让 html 字体大小根据设备改变。在哪个设备开发，就要用当前根部字体大小将 px 换算成 rem&lt;br&gt;
​	建议字体大小别转 rem，用媒体查询做。&lt;/p&gt;
&lt;h3 id=&#34;四vw与vh&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四vw与vh&#34;&gt;#&lt;/a&gt; （四）vw 与 vh&lt;/h3&gt;
&lt;p&gt;相对于视口的高度和宽度&lt;br&gt;
 1vw 相当于视口宽度的 1%，1vh 相当于视口高度的 1%&lt;/p&gt;
&lt;h1 id=&#34;十四-渐变运动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十四-渐变运动&#34;&gt;#&lt;/a&gt; 十四、渐变 + 运动&lt;/h1&gt;
&lt;h3 id=&#34;一-渐变背景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-渐变背景&#34;&gt;#&lt;/a&gt; 一、渐变（背景）&lt;/h3&gt;
&lt;p&gt;1. 线性渐变 linear-gradient&lt;br&gt;
 (1) gradient (linear, 起点，终点，颜色，[, 颜色])&lt;br&gt;
​	兼容问题&lt;br&gt;
​	起点终点可以是数值，0 0 代表左上角，100% 100% 或者 width 大小 height 大小代表右下角&lt;br&gt;
 (2) gradient (linear, 起点，终点，color-stop (颜色开始位置，颜色)[, 颜色])&lt;br&gt;
(3) linear-gradient ( 方向 || 角度， &lt;code&gt;&amp;lt;stop&#39;&amp;gt;&lt;/code&gt; ,  &lt;code&gt;&amp;lt;stop&#39;&amp;gt;&lt;/code&gt;  [,  &lt;code&gt;&amp;lt;stop&#39;&amp;gt;&lt;/code&gt; ]* )&lt;br&gt;
​	* 第一个参数表示线性渐变的方向。&lt;br&gt;
​	・to left：设置渐变为从右到左，相当于: 270deg;&lt;br&gt;
​	・to right：设置渐变从左到右，相当于: 90deg;&lt;br&gt;
​	・to top：设置渐变从下到上，相当于: 0deg;&lt;br&gt;
​	・to bottom：设置渐变从上到下，相当于: 180deg。（默认值）&lt;br&gt;
​	・也可以直接指定度数，如 45deg&lt;br&gt;
 角度：&lt;br&gt;
​	有前缀的兼容写法，角度跟象限角度一样&lt;br&gt;
​	新版本（不加前缀）角度 + 老版本 = 90deg&lt;br&gt;
2、radial-gradient 径向渐变&lt;br&gt;
​	从一个中心点开始沿着四周产生渐变效果&lt;br&gt;
 radial-gradient ([ [ at  &lt;code&gt;&amp;lt;position&amp;gt;&lt;/code&gt;  ]? [  &lt;code&gt;&amp;lt;shape&amp;gt;&lt;/code&gt;  ||  &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;  ]  , ? &lt;code&gt;&amp;lt;color-stop&amp;gt;&lt;/code&gt; [ ,  &lt;code&gt;&amp;lt;color-stop&amp;gt;&lt;/code&gt;  ]+)&lt;br&gt;
​	*shape：渐变的形状，ellipse 椭圆形 (默认)，circle 表示圆形。&lt;br&gt;
​	*size：渐变的大小，即渐变到哪里停止，它有四个值。&lt;br&gt;
​		closest-side：最近边； farthest-side：最远边；&lt;br&gt;
​		closest-corner：最近角； farthest-corner：最远角（默认值）&lt;br&gt;
​	* &lt;code&gt;&amp;lt;position&amp;gt;&lt;/code&gt;  确定圆心的位置。&lt;br&gt;
​		如果提供 2 个参数，第一个表示横坐标，第二个表示纵坐标；&lt;br&gt;
​		如果只提供 1 个，第二值默认为 50%，即 center&lt;br&gt;
​	* &lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt; ：指定颜色。&lt;/p&gt;
&lt;h3 id=&#34;二-过渡-transition&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-过渡-transition&#34;&gt;#&lt;/a&gt; 二、过渡 transition&lt;/h3&gt;
&lt;p&gt;1. 经过一定的时间， 从某个状态到另一个状态&lt;br&gt;
 2. 分属性&lt;br&gt;
​	(1) transition-property 过渡的属性（不可缺）&lt;br&gt;
​	(2) transition-duration 过渡的时间（不可缺）&lt;br&gt;
​	(3) transition-timing-function 过渡的形式&lt;br&gt;
​		linear 线性过渡&lt;br&gt;
​		ease 慢速进入慢速离开&lt;br&gt;
​		ease-in 慢速进入&lt;br&gt;
​		ease-out 慢速离开&lt;br&gt;
​	(4) transition-delay 过渡的延时&lt;br&gt;
 3. 总属性：&lt;br&gt;
​	transition: 1 2 3 4;&lt;/p&gt;
&lt;h3 id=&#34;三-变换transform&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-变换transform&#34;&gt;#&lt;/a&gt; 三、变换 transform&lt;/h3&gt;
&lt;h4 id=&#34;一2d变换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一2d变换&#34;&gt;#&lt;/a&gt; （一）2d 变换&lt;/h4&gt;
&lt;p&gt;1. 移动变换 translate&lt;br&gt;
​	transform: translate (水平，垂直)&lt;br&gt;
​	可以用百分比，代表自己宽高的百分比&lt;br&gt;
​	transform: translateX ()&lt;br&gt;
​	transflorm:translateY()&lt;br&gt;
 2. 缩放变换 scale (x,y)&lt;br&gt;
​	x,y 代表水平，垂直方向的缩放比例&lt;br&gt;
​	缩放的基准点为元素中心&lt;br&gt;
​	transform: scaleX (x)&lt;br&gt;
​	transform: scaleY(y)&lt;br&gt;
 3. 旋转 rotate (角度)&lt;br&gt;
​	transform: rotate (角度), 角度以顺时针旋转，旋转的基准点在元素中心&lt;br&gt;
 4. 扭曲变换 skew ()&lt;br&gt;
​	tranform:skew (x 轴旋转的角度，y 轴旋转的角度), 扭曲变换的基准点在元素中间&lt;br&gt;
​	transform: skewX (x 轴旋转的角度)&lt;br&gt;
​	transform: skewY (y 轴旋转的角度)&lt;br&gt;
 注意：若存在多个变换，在书写属性值时，应用空格将多个变换隔开&lt;br&gt;
 5. 改变元素变换的基准点 transform-origin&lt;/p&gt;
&lt;h4 id=&#34;二3d变换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二3d变换&#34;&gt;#&lt;/a&gt; （二）3d 变换&lt;/h4&gt;
&lt;p&gt;1. 移动变换&lt;br&gt;
​	transform:translate3d (x,y,z);&lt;br&gt;
​	transform:translateZ(z);&lt;br&gt;
2. 旋转变换&lt;br&gt;
​	transform:rotate3d (x,y,z,deg)&lt;br&gt;
​		xyz 取值为 0 或 1,0 代表不旋转，1 代表旋转&lt;br&gt;
​	transform:rotateX ()&lt;br&gt;
​	transform:rotateY()&lt;br&gt;
​	transform:rotateZ()&lt;br&gt;
 左手定律：大拇指指向轴的正方向，手指弯曲的方向为旋转的正方向&lt;br&gt;
 3.skew () 扭曲变换&lt;br&gt;
 4.transform-style 规定变换的样式（需要设置在父元素上）&lt;br&gt;
​	flat 默认为平面&lt;br&gt;
​	preserve-3d 使被转换的子元素保留其 3D 转换&lt;br&gt;
 5.perspective 设置观察的距离，景深（需要设置在父元素上）&lt;br&gt;
6.perspective-origin 设置观察的基准点（设置在父元素上）&lt;/p&gt;
&lt;h3 id=&#34;四-动画animation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-动画animation&#34;&gt;#&lt;/a&gt; 四、动画 animation&lt;/h3&gt;
&lt;p&gt;1. 定义动画 @keyframes&lt;br&gt;
​	@keyframes 动画名 {&lt;br&gt;
​	节点 {样式}&lt;br&gt;
}&lt;br&gt;
​	通过百分比将动画分成多个节点&lt;br&gt;
​	最后通过 animation 将动画应用到指定元素上&lt;br&gt;
 2.animation 用于设置动画属性&lt;br&gt;
​	animation-name 动画名字&lt;br&gt;
​	animation-duration 动画每次的播放时间&lt;br&gt;
​	animation-timing-function 动画播放形式；linear ease ease-in ease-out；steps (n) 相邻两个节点之间分成多少步，默认情况下每步都是用初始状态填充分配下来的时间段，steps (n)==&amp;gt;steps (n,end) 默认；steps (n,start) 用每一步的结束状态填充分配下来的时间&lt;br&gt;
​	animation-delay 动画延迟&lt;br&gt;
​	animation-iteration-count 动画的播放次数；infinite 无限次&lt;br&gt;
​	animation-direction 动画是否轮流反向播放； reverse 方向播放 alternate 交替播放 alternate-reverse 交替方向播放&lt;br&gt;
​	animation-fill-mode 动画完成模式；forwards 保持最后一个状态&lt;/p&gt;
&lt;h1 id=&#34;格式化上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化上下文&#34;&gt;#&lt;/a&gt; 格式化上下文&lt;/h1&gt;
&lt;p&gt;（ &lt;code&gt;formatting contexts&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Formatting context&lt;/code&gt;  是 &lt;code&gt;W3C CSS2.1&lt;/code&gt;  规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系、相互作用。&lt;br&gt;
格式化上下文指的是初始化元素定义的环境。包含两个要点，元素定义的环境和初始化。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;CSS&lt;/code&gt;  中，元素定义的环境有两种，一种是块格式化上下文 (  &lt;code&gt;Block formatting context&lt;/code&gt;  )，另一种是行内格式化上下文 (  &lt;code&gt;Inline formatting context&lt;/code&gt;  )。 这两种上下文定义了在  &lt;code&gt;CSS&lt;/code&gt;  中元素所处的环境，格式化则表明了在这个环境中，元素处于此环境中应当被初始化，即元素在此环境中应当如何布局等。&lt;/p&gt;
&lt;h2 id=&#34;格式化上下文包含以下几种情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化上下文包含以下几种情况&#34;&gt;#&lt;/a&gt; 格式化上下文包含以下几种情况&lt;/h2&gt;
&lt;p&gt;a：块级格式化上下文 (  &lt;code&gt;Block formatting contexts&lt;/code&gt;  )( BFC )&lt;br&gt;
 b：行内格式化上下文 (  &lt;code&gt;Inline formatting contexts&lt;/code&gt;  ) ( IFC )&lt;br&gt;
 c：自适应格式化上下文 (  &lt;code&gt;Flex Formatting Contexts&lt;/code&gt;  )(FFC)（CSS3 新增）&lt;br&gt;
d：网格布局格式化上下文 (  &lt;code&gt;GridLayout Formatting Contexts&lt;/code&gt;  )(GFC)（CSS3 新增）&lt;/p&gt;
&lt;h2 id=&#34;boxcss布局的基本单位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#boxcss布局的基本单位&#34;&gt;#&lt;/a&gt;  &lt;code&gt;BOX&lt;/code&gt; :CSS 布局的基本单位&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Box&lt;/code&gt;  是  &lt;code&gt;CSS&lt;/code&gt;  布局的对象和基本单位， 直观点来说，就是一个页面是由很多个  &lt;code&gt;Box&lt;/code&gt;  组成的。元素的类型和  &lt;code&gt;display&lt;/code&gt;  属性，决定了这个  &lt;code&gt;Box&lt;/code&gt;  的类型。 不同类型的  &lt;code&gt;Box&lt;/code&gt; ， 会参与不同的  &lt;code&gt;Formatting Context&lt;/code&gt; （一个决定如何渲染文档的容器），因此 &lt;code&gt;Box&lt;/code&gt;  内的元素会以不同的方式渲染。让我们看看有哪些盒子：&lt;/p&gt;
&lt;p&gt;a：block-level box: &lt;code&gt;display&lt;/code&gt;  属性为  &lt;code&gt;block, list-item, table&lt;/code&gt;  的元素，会生成  &lt;code&gt;block-level box&lt;/code&gt; 。并且参与  &lt;code&gt;block fomatting context&lt;/code&gt; ；&lt;/p&gt;
&lt;p&gt;c：inline-level box:display 属性为  &lt;code&gt;inline, inline-block, inline-table&lt;/code&gt;  的元素，会生成  &lt;code&gt;inline-level box&lt;/code&gt; 。并且参与  &lt;code&gt;inline formatting context&lt;/code&gt; ；&lt;/p&gt;
&lt;h1 id=&#34;布局拓展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#布局拓展&#34;&gt;#&lt;/a&gt; 布局拓展&lt;/h1&gt;
&lt;h4 id=&#34;设置元素在父元素上居中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置元素在父元素上居中&#34;&gt;#&lt;/a&gt; 设置元素在父元素上居中&lt;/h4&gt;
&lt;p&gt;​	1、利用行内块级元素&lt;br&gt;
​	垂直居中：&lt;br&gt;
​		* 将元素设置成行内块级元素，同时尺子也要设置成行内块，高度与父元素一致，宽度为 0；&lt;br&gt;
​		* 将与元素及尺子都要设置 vertical-align:middle;&lt;br&gt;
​	水平居中：&lt;br&gt;
​		* 给父容器设置 text-align:center;&lt;br&gt;
 若子元素与父元素都浮动了，父元素可以不设置宽度，父元素能被子元素撑开；&lt;/p&gt;
&lt;h4 id=&#34;自适应两栏布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自适应两栏布局&#34;&gt;#&lt;/a&gt; 自适应两栏布局&lt;/h4&gt;
&lt;p&gt;某一栏确定宽度 + 浮动，另外一栏设置 margin 的值为上一栏的宽度，自己的宽度不设置&lt;/p&gt;
&lt;h4 id=&#34;自适应三栏布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自适应三栏布局&#34;&gt;#&lt;/a&gt; 自适应三栏布局&lt;/h4&gt;
&lt;p&gt;先写左右的元素设置宽度 + 浮动，最后才写中间的元素，设置 margin&lt;/p&gt;
</content>
        <category term="CSS" />
        <updated>2022-07-12T22:59:00.000Z</updated>
    </entry>
</feed>
