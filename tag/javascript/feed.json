{
    "version": "https://jsonfeed.org/version/1",
    "title": "你的名字 • All posts by \"javascript\" tag",
    "description": "",
    "home_page_url": "https://dukeshao.com",
    "items": [
        {
            "id": "https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/",
            "url": "https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/",
            "title": "Javascript进阶",
            "date_published": "2022-07-12T22:59:00.000Z",
            "content_html": "<h1 id=\"一-函数\"><a class=\"markdownIt-Anchor\" href=\"#一-函数\">#</a> 一、函数</h1>\n<h2 id=\"1概念\"><a class=\"markdownIt-Anchor\" href=\"#1概念\">#</a> 1. 概念</h2>\n<p>函数就是把特定功能的代码抽取出并进行封装，用来重复执行一些功能。</p>\n<h2 id=\"2优点\"><a class=\"markdownIt-Anchor\" href=\"#2优点\">#</a> 2. 优点</h2>\n<p>函数可以重复执行某一部分代码（通过函数名调用）；</p>\n<p>使代码清晰有层次，利于维护；</p>\n<h2 id=\"3创建方式\"><a class=\"markdownIt-Anchor\" href=\"#3创建方式\">#</a> 3. 创建方式</h2>\n<h4 id=\"a关键字声明\"><a class=\"markdownIt-Anchor\" href=\"#a关键字声明\">#</a> a. 关键字声明</h4>\n<p 执行的功能代码=\"\">​\tfunction 函数名 (形参)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"b赋值式声明\"><a class=\"markdownIt-Anchor\" href=\"#b赋值式声明\">#</a> b. 赋值式声明</h4>\n<p 执行的功能代码=\"\">​\tvar 函数名 = function (形参)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"c构造函数法\"><a class=\"markdownIt-Anchor\" href=\"#c构造函数法\">#</a> c. 构造函数法</h4>\n<p>​\t var 函数名 = new Function (); 不推荐使用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4分类\"><a class=\"markdownIt-Anchor\" href=\"#4分类\">#</a> 4. 分类</h2>\n<p>1\t内置函数</p>\n<p>2\t自定义函数</p>\n<p>3\t匿名函数</p>\n<p 执行的功能代码=\"\">function (形参)</p>\n<h2 id=\"5函数的执行\"><a class=\"markdownIt-Anchor\" href=\"#5函数的执行\">#</a> 5. 函数的执行</h2>\n<p>1\t主动执行：</p>\n<p>​\t函数名 ()</p>\n<p>2\t事件驱动：</p>\n<p>​\tele.onclick = 函数名；</p>\n<p>​\tele.onclick=function(){}</p>\n<h2 id=\"6作用域\"><a class=\"markdownIt-Anchor\" href=\"#6作用域\">#</a> 6. 作用域</h2>\n<p>（一）分类</p>\n<h3 id=\"1全局作用域\"><a class=\"markdownIt-Anchor\" href=\"#1全局作用域\">#</a> 1\t全局作用域</h3>\n<p>全局变量：在函数外定义的变量称为全局变量</p>\n<h3 id=\"2局部作用域\"><a class=\"markdownIt-Anchor\" href=\"#2局部作用域\">#</a> 2\t局部作用域</h3>\n<p>局部变量：在函数内定义的变量</p>\n<h3 id=\"3变量的访问规则\"><a class=\"markdownIt-Anchor\" href=\"#3变量的访问规则\">#</a> 3\t变量的访问规则</h3>\n<p>​\t(1)\t若在某个函数内部使用一个变量，那么先查找该函数内是否有变量声明；</p>\n<p>​\t(2)\t如果当前函数无变量 a，则往父级函数查找，如果找到则使用，并停止查找；</p>\n<p>​\t(3)\t如果在父级函数还是无法找到，则继续往上一层函数查找，以此类推；</p>\n<p>​\t(4)\t直到最顶层 (全局作用域)，如果还是没找到，则报错误 ** is not defined；</p>\n<p>在函数内若没有通过 var 声明变量，相当于在全局作用域用 var 声明了该变量</p>\n<h3 id=\"4作用域链\"><a class=\"markdownIt-Anchor\" href=\"#4作用域链\">#</a> 4\t作用域链</h3>\n<p>​\t当函数访问变量时，根据就近原则从内到外查询变量，这个路径称为作用域链；</p>\n<h2 id=\"7函数的实参与形参\"><a class=\"markdownIt-Anchor\" href=\"#7函数的实参与形参\">#</a> 7. 函数的实参与形参</h2>\n<p>1\t形参：函数定义时的参数（变量）</p>\n<p>2\t实参：函数执行时的参数（值）</p>\n<p>形参与实参个数可以不一致</p>\n<p>函数内部隐藏的对象（是一个类数组），保存着实参的信息</p>\n<p>一、声明提前</p>\n<p>概念：代码从上往下顺序执行之前，会将所有的声明提升到当前作用域的最顶端，之后顺序执行</p>\n<p>在变量赋值之前使用变量，变量的值为 undefined</p>\n<p>用赋值式声明函数，若在声明之前调用函数，会报错，** is not  a function；</p>\n<p>用关键字声明函数，可以在声明之前调用函数</p>\n<h2 id=\"基本数据类型与引用数据类型的区别\"><a class=\"markdownIt-Anchor\" href=\"#基本数据类型与引用数据类型的区别\">#</a> 基本数据类型与引用数据类型的区别</h2>\n<pre><code>基本数据类型放在栈中,引用数据类型放在堆中\n</code></pre>\n<h3 id=\"1-案例\"><a class=\"markdownIt-Anchor\" href=\"#1-案例\">#</a> ①　案例：</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10,11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> brr<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>brr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">===</span>brr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><h3 id=\"2-数据类型作为函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#2-数据类型作为函数的参数\">#</a> ②　数据类型作为函数的参数</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基本数据类型，传递的是值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    num<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//11</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 引用数据类型，传递的是地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">numAdd</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10,2</span></pre></td></tr></table></figure><h2 id=\"函数的返回值\"><a class=\"markdownIt-Anchor\" href=\"#函数的返回值\">#</a> 函数的返回值</h2>\n<p>1\t概念：通过 return 将函数内部的值返回到函数外，函数外若要使用，必须接收。</p>\n<p>2\t如果函数没有 return，执行完后返回 undefined</p>\n<p>3\treturn 后面的代码不会被执行</p>\n<h2 id=\"this\"><a class=\"markdownIt-Anchor\" href=\"#this\">#</a> this</h2>\n<p>1\t表示当前对象，取决于谁调用了这个函数</p>\n<p>2\t直接执行，this 为 window；事件驱动，this 为绑定的元素。</p>\n<h2 id=\"递归\"><a class=\"markdownIt-Anchor\" href=\"#递归\">#</a> 递归</h2>\n<p>（自己调用自己）</p>\n<p>1\t容易出现死循环</p>\n<p>2\t递归避免死循环，设置好临界点 return</p>\n<h2 id=\"回调函数\"><a class=\"markdownIt-Anchor\" href=\"#回调函数\">#</a> 回调函数</h2>\n<p>（函数作为参数传递）</p>\n<h1 id=\"二-数组\"><a class=\"markdownIt-Anchor\" href=\"#二-数组\">#</a> 二、数组</h1>\n<h2 id=\"概念\"><a class=\"markdownIt-Anchor\" href=\"#概念\">#</a> 概念：</h2>\n<p>一系列数据的集合，每一项（数组的元素）可以保存任何类型的数据，每个元素之间用逗号隔开<br>\n 2. 数组的声明<br>\n (1）字面量 var arr = [1,2,3];<br>\n(2）构造函数</p>\n<pre><code>var arr = new Array(3); 创建长度为3的数组\nvar arr = new Array(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;);  创建数组及定义好每一项的值\n</code></pre>\n<p>3. 数组的操作 (增删改查)</p>\n<p>数组的索引:arr [索引]，索引从 0 开始计数</p>\n<p>数组的长度:arr.length<br>\n 数组的遍历：遍历索引从 0-arr.length-1，通过 arr [索引] 拿到每一项的值</p>\n<h2 id=\"方法\"><a class=\"markdownIt-Anchor\" href=\"#方法\">#</a> 方法</h2>\n<h3 id=\"1-增删改\"><a class=\"markdownIt-Anchor\" href=\"#1-增删改\">#</a> 1. 增删改</h3>\n<pre><code>(1)增删改方法,改变原数组,返回值为长度或改变项\n\tpush() ： 往最后添加项\n\tpop() ： 删除最后项\n\tunshift() ： 往前添加项\n\tshift() ： 删除最前项\n\tsplice(startIdx,num,item) : 增、删、换\n\treverse() : 数组倒序\n</code></pre>\n<h3 id=\"2-传递与复制\"><a class=\"markdownIt-Anchor\" href=\"#2-传递与复制\">#</a> 2. 传递与复制</h3>\n<pre><code>(2)传递、复制方法,不改变原数组\n\tslice(startIdx,endIdx) : 截取数组\n\tjoin('拼接符') ： 数组拼接为字符串,默认逗号拼接\n\tconcat(数组1,数组2,...) ： 合并数组,返回调用方法的新数组\n</code></pre>\n<h2 id=\"数组的排序算法\"><a class=\"markdownIt-Anchor\" href=\"#数组的排序算法\">#</a> 数组的排序算法</h2>\n<h3 id=\"1冒泡排序\"><a class=\"markdownIt-Anchor\" href=\"#1冒泡排序\">#</a> 1. 冒泡排序</h3>\n<p>​\t外层遍历的是轮数<br>\n​\t内层是每一轮，遍历当前索引，与索引 + 1 进行比较换位置。每一轮将一个最大的数排在最后</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">var</span> box<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2选择排序\"><a class=\"markdownIt-Anchor\" href=\"#2选择排序\">#</a> 2. 选择排序</h3>\n<ul>\n<li>\n<p>固定被比较的索引，与后面的每个索引对应的值进行比较</p>\n</li>\n<li>\n<p>外层循环是固定的被比较的索引 i：0-arr.length-2</p>\n</li>\n<li>\n<p>内层循环是比较 i 的索引 j，从 i+1 到 arr.length 进行遍历</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">44</span><span class=\"token punctuation\">,</span><span class=\"token number\">343</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3快速排序\"><a class=\"markdownIt-Anchor\" href=\"#3快速排序\">#</a> 3. 快速排序</h3>\n<p>（递归）</p>\n<pre><code>var arr=[1,9,2,23,10,55,33];\nfastSort(arr);\nfunction fastSort(arr)&#123;\n\tif(arr.length&lt;=1)&#123;\n\t\treturn arr;\n\t&#125;\n\tvar midIdx=parseInt(arr.length/2);\n\tvar midNum=arr.splice(midIdx,1)[0];\n\tvar ltArr=[];\n\tvar gtArr=[];\n\tfor(var i=0;i&lt;arr.length;i++)&#123;\n\t\tif(arr[i]&lt;=midNum)&#123;\n\t\t\tltArr.push(arr[i]);\n\t\t&#125;else if(arr[i]&gt;midNum)&#123;\n\t\t\tgtArr.push(arr[i]);\n\t\t&#125;\n\t&#125;\n\treturn fastSort(ltArr).concat([midNum],fastSort(gtArr));\n&#125;\nconsole.log(fastSort(arr));\n</code></pre>\n<h3 id=\"4sort排序\"><a class=\"markdownIt-Anchor\" href=\"#4sort排序\">#</a> 4.sort () 排序</h3>\n<p>arr.sort () 将原数组中的元素排序，并返回排序后的数组</p>\n<ul>\n<li>\n<p>默认以字符串的排列方式（转换成 ASCII 码进行对比)</p>\n</li>\n<li>\n<p>sort (function (a,b){return a-b;}) 从小到大排序</p>\n<p>var res = arr.sort(function(a,b){<br>\n//return 值&gt; 0 a,b 互换<br>\n //return 值 &lt;=0 不动<br>\n return a-b;<br>\n});<br>\nconsole.log(arr,res);</p>\n</li>\n</ul>\n<h2 id=\"数组的传递与复制\"><a class=\"markdownIt-Anchor\" href=\"#数组的传递与复制\">#</a> 数组的传递与复制</h2>\n<h3 id=\"1传递\"><a class=\"markdownIt-Anchor\" href=\"#1传递\">#</a> 1. 传递</h3>\n<ul>\n<li>基本数据类型中，传递的是值 (数字，字符串，布尔类型，null,undefined)</li>\n<li>引用数据类型中，传递的是在堆中的地址 (数组，对象)</li>\n</ul>\n<h3 id=\"2复制\"><a class=\"markdownIt-Anchor\" href=\"#2复制\">#</a> 2. 复制</h3>\n<p>基本数据类型：改变复制的值，不影响原值</p>\n<pre><code>var a = 10;\nvar b = a;//var b = 10\nb = 30;\nconsole.log(a,b);//10,30\n</code></pre>\n<p>引用数据类型：改变复制的值，会影响原值（浅复制）</p>\n<pre><code>var arr = [10,20,30];\nvar brr = arr;\nbrr[0] = 66;\nconsole.log(arr,brr);//[66,20,30][66,20,30]\n</code></pre>\n<p>引用数据类型：改变复制的值，不影响原值（深复制）</p>\n<ul>\n<li>for 循环拷贝数组的每一项 (不适用多维数组)</li>\n<li>slice(0)</li>\n</ul>\n<pre><code>var arr = [10,20,30];\n// var res = [];\n// for(var i=0;i&lt;arr.length;i++)&#123;\n// \tres.push(arr[i]);\n// &#125;\n// console.log(res);//10,20,30\n// res[0] = 40;\n// console.log(arr,res);\n//=======================================\nvar res = arr.slice(0);\nres[0] = 40;\nconsole.log(arr,res);\n</code></pre>\n<h2 id=\"多维数组\"><a class=\"markdownIt-Anchor\" href=\"#多维数组\">#</a> 多维数组</h2>\n<p>数组嵌套数组</p>\n<pre><code>// var arr = [[&quot;hzh&quot;,&quot;hyd&quot;],[&quot;lm&quot;,&quot;jh&quot;],[&quot;xw&quot;,&quot;rw&quot;],[&quot;lz&quot;,&quot;zlh&quot;],[&quot;hhm&quot;,&quot;dz&quot;]];\nvar arr = [];\nvar brr = [];\nvar n = 0;\nfor(var i=1;i&lt;=25;i++)&#123;\n\tbrr.push(i);\n\tn++;\n\tif(n % 5==0)&#123;\n\t\tarr.push(brr);\n\t\tbrr = [];\n\t&#125;\n&#125;\nconsole.log(arr);\n</code></pre>\n<h1 id=\"三-对象\"><a class=\"markdownIt-Anchor\" href=\"#三-对象\">#</a> 三、对象</h1>\n<h2 id=\"创建对象\"><a class=\"markdownIt-Anchor\" href=\"#创建对象\">#</a> 创建对象</h2>\n<p>1. 字面量</p>\n<pre><code>var obj = &#123;\n\tname : &quot;xiaofang&quot;,\n\tage : 17,\n\thobby : &quot;学习&quot;\n&#125;\n</code></pre>\n<p>2. 构造函数</p>\n<pre><code>var obj1 = new Object();\n</code></pre>\n<h2 id=\"对象的操作\"><a class=\"markdownIt-Anchor\" href=\"#对象的操作\">#</a> 对象的操作</h2>\n<p>操作对象键对应的值</p>\n<p>obj. 键</p>\n<p>obj [“具题的键”] obj [变量]<br>\n 对象的遍历</p>\n<pre><code> for(var key in obj)&#123;\n\tkey代表键;\n\tobj[key]获取每个键对应的值\n&#125;\n</code></pre>\n<p>对于单个键值对而言，键是变量，值就是值</p>\n<p>对于整个对象而言，对象是变量，键是具体的属性</p>\n<h3 id=\"1添加-修改属性\"><a class=\"markdownIt-Anchor\" href=\"#1添加-修改属性\">#</a> (1) 添加、修改属性</h3>\n<pre><code>obj.sex = '男';\nobj['weight'] = 60；\n</code></pre>\n<h3 id=\"2删除属性\"><a class=\"markdownIt-Anchor\" href=\"#2删除属性\">#</a> (2) 删除属性</h3>\n<pre><code>var obj = &#123;name:'laoxie',age:18,gender:'man'&#125;\n//删除age属性\ndelete obj.age;\n</code></pre>\n<h3 id=\"3读取属性值\"><a class=\"markdownIt-Anchor\" href=\"#3读取属性值\">#</a> (3) 读取属性值</h3>\n<pre><code>obj.name;//==&gt;小明\n//如果读取一个不存在的属性，返回undefined\n</code></pre>\n<h3 id=\"4遍历对象forin\"><a class=\"markdownIt-Anchor\" href=\"#4遍历对象forin\">#</a> (4) 遍历对象 for…in</h3>\n<pre><code>    var obj = &#123;name:'laoxie'，age:18，gender:'男'&#125;；  \n    for(var key in obj)&#123;\n        //遍历obj对象里面所有的键key,Obj[key]操作所有键对应的值。\n        document.write(obj[key]);//分别输出：'laoxie',18,'男'\n    &#125;\n</code></pre>\n<h3 id=\"数组与对象的组合\"><a class=\"markdownIt-Anchor\" href=\"#数组与对象的组合\">#</a> 数组与对象的组合</h3>\n<pre><code> [&#123;\n        id:'001',\n        name:'iphone7 plugs',\n        nickname:'肾7',\n        imgurl:'img/ip7.jpg',\n        price:5899.00,\n        sale:5888.00,\n        color:'土豪金'\n    &#125;,&#123;\n        id:'002',\n        name:'Note7',\n        nickname:'爆炸7',\n        imgurl:'img/note7.jpg',\n        price:3899.00,\n        sale:998.00,\n        color:'黑色'\n    &#125;,&#123;\n        id:'003',\n        name:'荣耀7',\n        nickname:'牛x7',\n        imgurl:'img/honor7.jpg',\n        price:1999.00,\n        sale:1899.00,\n        color:'白色'\n    &#125;]\n</code></pre>\n<h1 id=\"四-es5数组新增方法\"><a class=\"markdownIt-Anchor\" href=\"#四-es5数组新增方法\">#</a> 四、ES5 数组新增方法</h1>\n<h2 id=\"迭代遍历方法\"><a class=\"markdownIt-Anchor\" href=\"#迭代遍历方法\">#</a> 迭代（遍历）方法</h2>\n<h3 id=\"1-foreach\"><a class=\"markdownIt-Anchor\" href=\"#1-foreach\">#</a> 1. forEach()</h3>\n<p>forEach (function (item,idx,arr){})  遍历数组，与 for 循环没有太大差别，比 for 循环方便</p>\n<ul>\n<li>item 代表数组中的每一项</li>\n<li>idx 代表索引</li>\n<li>arr 代表当前数组</li>\n</ul>\n<pre><code>var arr = [777,10,44,66];\nfor(var i=0;i&lt;arr.length;i++)&#123;\n\tconsole.log(arr[i]);\n&#125;\narr.forEach(function(item,idx,arr)&#123;\n\tconsole.log(item,idx,arr);\n&#125;)\n</code></pre>\n<h3 id=\"2map\"><a class=\"markdownIt-Anchor\" href=\"#2map\">#</a> 2.map()</h3>\n<p>map (function (item,idx,arr){return ;})  返回一个数量相等的数组，内容是什么取决于在 fn 中的返回值</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.map(function(item,idx,arr)&#123;\n\t\t\tconsole.log(item);\n\t\t\treturn item*2;\n\t\t&#125;)\n\t\tconsole.log(res);\n</code></pre>\n<h3 id=\"3filter\"><a class=\"markdownIt-Anchor\" href=\"#3filter\">#</a> 3.filter()</h3>\n<p>filter (function (item,idx,arr){}) 返回一个数组，存放执行 fn 后返回 true 的数组元素 (过滤)</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.filter(function(item,idx,arr)&#123;\n\t\t\treturn item&gt;55;\n\t\t&#125;)\n\t\tconsole.log(res);\n</code></pre>\n<h3 id=\"4some\"><a class=\"markdownIt-Anchor\" href=\"#4some\">#</a> 4.some()</h3>\n<p>some (function (item,idx,arr){}) 返回布尔值，如果 fn 对数组任何一项返回 true，则返回 true。</p>\n<p>查找数组中是否有满足条件的项。</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.some(function(item,idx,arr)&#123;\n\t\t\tconsole.log(idx);//0\n\t\t\treturn item&gt;666;//777&gt;666直到找到true就不再遍历\n\t\t&#125;)\n</code></pre>\n<h3 id=\"5every\"><a class=\"markdownIt-Anchor\" href=\"#5every\">#</a> 5.every()</h3>\n<p>every (function (item,idx,arr){}) 返回布尔值，若 fn 对数组中有一项返回 false，则返回 false</p>\n<p>检查数组所有项，是否都满足条件，是则返回 true，否则返回 false。</p>\n<pre><code>var arr = [777,10,44,66];\nvar res = arr.every(function(item,idx,arr)&#123;\n\t\t\treturn item&gt;666;\n\t\t&#125;)\n\t\tconsole.log(res);\n</code></pre>\n<h2 id=\"归并方法\"><a class=\"markdownIt-Anchor\" href=\"#归并方法\">#</a> 归并方法</h2>\n<h3 id=\"reducefninitval\"><a class=\"markdownIt-Anchor\" href=\"#reducefninitval\">#</a> reduce(fn,initVal)</h3>\n<p>fn(prev,current,idx,arr)</p>\n<ul>\n<li>prev: fn 上一次执行的返回值，第一次为 initVal，若 initVal 没有定义，为数组的第一个元素值</li>\n<li>current: 当前索引对应的值</li>\n<li>idx: 当前索引</li>\n<li>arr: 数组</li>\n</ul>\n<p>应用： 数组求和</p>\n<pre><code>//对数组求和\nvar res = arr.reduce(function(prev,current,idx,arr)&#123;\n\treturn prev+current;\n&#125;,0);\n</code></pre>\n<h3 id=\"reducerightfninitval\"><a class=\"markdownIt-Anchor\" href=\"#reducerightfninitval\">#</a> reduceRight(fn,initVal)</h3>\n<ul>\n<li>fn (prev,cur,index,array): fn 是每一项调用的函数，函数接受 4 个参数分别是\n<ul>\n<li>prev：函数上一次的返回值。（第一次的值参考 initVal）</li>\n<li>cur：当前值，</li>\n<li>index：索引值，</li>\n<li>array：当前数组，</li>\n</ul>\n</li>\n<li>函数需要返回一个值，这个值会在下一次迭代中作为 prev 的值</li>\n<li>initVal: 迭代初始值（可省略），如果缺省，prev 的值为数组第一项</li>\n</ul>\n<h2 id=\"静态方法\"><a class=\"markdownIt-Anchor\" href=\"#静态方法\">#</a> 静态方法</h2>\n<p>只能由构造函数自己去调用</p>\n<h3 id=\"arrayisarray\"><a class=\"markdownIt-Anchor\" href=\"#arrayisarray\">#</a> Array.isArray()</h3>\n<p>Array.isArray () 判断是否为数组，返回布尔值</p>\n<h2 id=\"索引方法\"><a class=\"markdownIt-Anchor\" href=\"#索引方法\">#</a> 索引方法</h2>\n<h3 id=\"indexoflastindexofa3\"><a class=\"markdownIt-Anchor\" href=\"#indexoflastindexofa3\">#</a> indexOf/lastIndexOf(“a”,3)</h3>\n<p>indexOf (keyword [,startIdx]) 返回 keyword 所在数组中的索引值；</p>\n<ul>\n<li>\n<p>如果数组不存在 keyword，则返回 - 1</p>\n</li>\n<li>\n<p>startIdx 规定开始查找的索引值</p>\n</li>\n<li>\n<p>应用：判断数组中是否存在某个值</p>\n</li>\n</ul>\n<pre><code>var arr=[10,20,50,40,50]\nconsole.log(arr.indexOf(50))\n//2\nconsole.log(arr.indexOf(50,3))\n//4\n</code></pre>\n<h1 id=\"五-字符串\"><a class=\"markdownIt-Anchor\" href=\"#五-字符串\">#</a> 五、字符串</h1>\n<p>1. 定义：字符串就是一串字符，由双（单）引号括起来</p>\n<p>2. 创建字符串</p>\n<p>​\t字面量 var str=“hello”</p>\n<p>​\t构造函数 var str=new String (“hello”);</p>\n<p>3. 字符串的操作</p>\n<p>​\t字符串的长度 str.length</p>\n<p>​\t字符串的索引 str [索引]   ==&gt;es5</p>\n<p>​\tstr.charAt (索引)</p>\n<p>4. 字符串的方法</p>\n<p>（1）split (分隔符)，将字符串根据分隔符，拆分成数组。原字符串不变</p>\n<p>（2）replace (需要被替换的字符，替换后的字符)，字符串的替换方法。原字符串不变</p>\n<p>（3）slice (start [,end]) 字符串的截取方法，截取 start 到 end，不包括 end 的字符串，支持负数</p>\n<p>substring (start [,end]) 与 slice 一样，但不支持负数</p>\n<p>substr (start [,len]) 支持负数，len 为截取的数量</p>\n<p>（4）字符串大小写转换</p>\n<p>toLowerCase ()  转换成小写</p>\n<p>toUpperCase ()  转换成大写</p>\n<p>（5）trim () 删除前后所有空格，返回新的字符串 (es5)</p>\n<p>5. 字符与字符编码</p>\n<h1 id=\"六-正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#六-正则表达式\">#</a> 六、正则表达式</h1>\n<p>1. 字面量创建</p>\n<p>/ 字符串 /</p>\n<p>例如：var reg = / 傻逼 /</p>\n<p>​\tg 全局匹配</p>\n<p>​\ti 不区分大小写</p>\n<p>2. 构造函数创建</p>\n<p>​\tnew RegExp (“字符串”,“gi”)</p>\n<p>​\tnew RegExp (变量，“gi”)</p>\n<h1 id=\"七-math\"><a class=\"markdownIt-Anchor\" href=\"#七-math\">#</a> 七、Math</h1>\n<p>1. 概念：一个保存数学公式和信息的对象</p>\n<p>2. 属性：</p>\n<p>Math.PI\t\tπ  3.1415926…</p>\n<p>3. 方法：</p>\n<p>Math.random ()  // 返回 0-1 之间的随机数（不包括 1）</p>\n<p>Math.round ()  // 四舍五入</p>\n<p>Math.ceil ()  // 向上取整</p>\n<p>Math.floor ()  // 向下取整</p>\n<p>Math.max (num1,num2,…) // 最大的数</p>\n<p>Math.min (num1,num2,…) // 最小的数</p>\n<p>Math.abs () // 绝对值</p>\n<p>Math.pow (x,y)  //x 的 y 次方</p>\n<h1 id=\"八-date\"><a class=\"markdownIt-Anchor\" href=\"#八-date\">#</a> 八、Date</h1>\n<h2 id=\"创建日期时间对象\"><a class=\"markdownIt-Anchor\" href=\"#创建日期时间对象\">#</a> 创建日期时间对象</h2>\n<p>构造函数 new Date ();</p>\n<p>不带参数，得到的是代码执行时的时间（本地时间）</p>\n<p>带参数：字符串，指定日期；数字，指定毫秒数（距离纪元时间的毫秒数）。</p>\n<pre><code>var d=new Date();//代码运行时的本地时间\nvar d=new Date(&quot;2017/10/10 12:00:00&quot;);\nvar d=new Date(2000); //距离纪元时间的毫秒数\n</code></pre>\n<h2 id=\"时间日期对象的方法\"><a class=\"markdownIt-Anchor\" href=\"#时间日期对象的方法\">#</a> 时间日期对象的方法</h2>\n<p>1. 获取方法</p>\n<p>获取年月日</p>\n<pre><code>var d=new Date();\nvar year=d.getFullYear();//2019\nvar month=d.getMonth(); //月份0-11，得到的月份记得+1才是真实月份;\nvar date=d.getDate()\n</code></pre>\n<p>获取星期</p>\n<pre><code>var d=new Date();\nvar day=d.getDay();  //0-6:星期天-星期六\n</code></pre>\n<p>获取时分秒</p>\n<pre><code>var d=new Date();\nvar hour=d.getHours();\nvar minute=d.getMinutes();\nvar second=d.getSeconds();\n</code></pre>\n<p>date.getTime (); 获取距离纪元时间的毫秒数</p>\n<h2 id=\"静态方法-2\"><a class=\"markdownIt-Anchor\" href=\"#静态方法-2\">#</a> 静态方法</h2>\n<p>Date.parse (“2015-08-24”)// 返回指定日期距 1970-1-1 零时的毫秒数</p>\n<blockquote>\n<p>PS：转换格式默认支持 2015-08-24 或 2015/08/24</p>\n</blockquote>\n<p>Date.now ();// 返回执行这行代码时距 1970-1-1 零时的毫秒数</p>\n<h2 id=\"定时器\"><a class=\"markdownIt-Anchor\" href=\"#定时器\">#</a> 定时器</h2>\n<p>1.var timer=setInterval (function (){}, 毫秒数)；每隔多少毫秒执行一次函数</p>\n<p>2.setTimeout (function (){}, 毫秒数)；延迟多少毫秒执行函数，只执行一次</p>\n<p>3.clearInterval (timer)；清除指定 id 标识的定时器操作</p>\n<p>4.clearTimeout (timer)；清除指定 id 标识的延迟操作</p>\n<h1 id=\"九-bom\"><a class=\"markdownIt-Anchor\" href=\"#九-bom\">#</a> 九、BOM</h1>\n<h2 id=\"概念-2\"><a class=\"markdownIt-Anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<p>BOM 是 Browser Object Model（浏览器对象模型）的缩写，提供与浏览器窗口进行交互的对象。JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C, 而 BOM 缺乏标准。这也是各种浏览器不兼容的根源所在；</p>\n<p>1.window 对象</p>\n<p>window 对象是 BOM 的核心，是最顶层的对象，所有对象都是通过它延伸出来的</p>\n<p>2. 全局作用域下定义的变量都是 window 对象的属性；</p>\n<p>尽量避免声明全局变量，减少命名冲突，避免全局污染；</p>\n<p>在函数内部不用 var 声明的变量会成为全局变量，即 window 对象的属性</p>\n<p>window 对象可以在代码中省略，如 window.alert () 可以写成 alert ();</p>\n<p>delete 不能删除全局变量；</p>\n<pre><code>var obj = &#123;name:'xxx'&#125;\n\n//删除对象的属性用delete：\ndelete obj.name;\n</code></pre>\n<h2 id=\"window对象下的属性\"><a class=\"markdownIt-Anchor\" href=\"#window对象下的属性\">#</a> window 对象下的属性</h2>\n<p>1. 浏览器窗口尺寸</p>\n<p>innerWidth/innerHeight, // 表示浏览器窗口” 可视区域” 尺寸</p>\n<p>outerWidth/outerHeight// 表示整个浏览器窗口的尺寸</p>\n<p>2. 滚动相关</p>\n<ul>\n<li>scrollX/scrollY// 获取浏览器窗口滚动条滚动过的距离</li>\n<li>scrollTo (x,y) // 设置浏览器滚动距离</li>\n<li>scrollBy (xnum,ynum) // 设置基于当前位置滚动的距离，可以为负数</li>\n</ul>\n<h2 id=\"window的常用事件\"><a class=\"markdownIt-Anchor\" href=\"#window的常用事件\">#</a> window 的常用事件</h2>\n<ul>\n<li>onload // 页面资源全部加载完成后触发这个事件（开发中不常用）（document.addEventListener (“DOMContentLoaded”,function (){})）</li>\n<li>onscroll// 窗口滚动条滚动时触发</li>\n<li>onresize // 窗口大小改变时触发</li>\n</ul>\n<h2 id=\"系统弹窗\"><a class=\"markdownIt-Anchor\" href=\"#系统弹窗\">#</a> 系统弹窗</h2>\n<h3 id=\"1alertmsg\"><a class=\"markdownIt-Anchor\" href=\"#1alertmsg\">#</a> 1.alert(msg)</h3>\n<p>// 弹出对话框</p>\n<h3 id=\"2confirmmsg\"><a class=\"markdownIt-Anchor\" href=\"#2confirmmsg\">#</a> 2.confirm(msg)</h3>\n<p>// 弹出警告弹窗，返回布尔值</p>\n<h3 id=\"3promptmsgdefault\"><a class=\"markdownIt-Anchor\" href=\"#3promptmsgdefault\">#</a> 3.prompt(msg,default)</h3>\n<p>// 弹出输入框，返回消息或 null</p>\n<p>以上三个方法都会暂停代码的执行</p>\n<h3 id=\"4openurlnameoptions\"><a class=\"markdownIt-Anchor\" href=\"#4openurlnameoptions\">#</a> 4.open(url,name,[options])</h3>\n<p>打开一个新窗口并返回新 window 对象</p>\n<p>name: 不命名会每次打开新窗口，命名的第一次打开新窗口，之后在这个窗口中加载</p>\n<p>options 为字符串：width=400,height=400,top=200,left=200’</p>\n<p>opener 父窗口对象，通过 open 方法打开的窗口才有 opener 对象</p>\n<h3 id=\"5close\"><a class=\"markdownIt-Anchor\" href=\"#5close\">#</a> 5.close():</h3>\n<p>关闭窗口</p>\n<h3 id=\"6print\"><a class=\"markdownIt-Anchor\" href=\"#6print\">#</a> 6.print():</h3>\n<p>调出打印对话框</p>\n<h2 id=\"属性对象-location\"><a class=\"markdownIt-Anchor\" href=\"#属性对象-location\">#</a> 属性对象 location</h2>\n<p>location 是 BOM 最有用的对象之一，保存着当前窗口中加载文档的相关信息，还提供一些导航功能，它是个很特别的对象，既是 window 的属性，也是 document 的属性</p>\n<pre><code>var src=https://www.baidu.com/s?wd=yangmi\nlocation.href='整个网址/src'\nlocation.hash='#后面的字符'\nlocation.search='?wd=yangmi'\n</code></pre>\n<h1 id=\"十-dom\"><a class=\"markdownIt-Anchor\" href=\"#十-dom\">#</a> 十、DOM</h1>\n<h2 id=\"概念-3\"><a class=\"markdownIt-Anchor\" href=\"#概念-3\">#</a> 概念</h2>\n<p>DOM 是 Document Object Model（文档对象模型）的缩写，它是 W3C 国际组织的一套 Web 标准。是针对 HTML 和 XML 文档的一个 API，它定义了访问 HTML 文档对象的一套属性、方法和事件。</p>\n<p>1. 节点</p>\n<p>元素节点</p>\n<p>属性节点</p>\n<p>文本节点</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bb<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>bilibili<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>//此处4个节点，1元素，2属性，1文本</pre></td></tr></table></figure><h2 id=\"获取元素节点\"><a class=\"markdownIt-Anchor\" href=\"#获取元素节点\">#</a> 获取元素节点</h2>\n<h3 id=\"1通过id名\"><a class=\"markdownIt-Anchor\" href=\"#1通过id名\">#</a> 1. 通过 id 名</h3>\n<p>document.getElementById (“id 名”)</p>\n<ul>\n<li>通过 ID 获取元素的节点（速度最快）</li>\n<li>必须通过 document 调用</li>\n<li>返回 DOM 节点对象，如果 id 不存在返回 null</li>\n</ul>\n<h3 id=\"2通过类名\"><a class=\"markdownIt-Anchor\" href=\"#2通过类名\">#</a> 2. 通过类名</h3>\n<p>getElementsByClassName (“类名”); // 通过类名获取；可以通过其他元素节点获取</p>\n<ul>\n<li>通过 class 类名获取节点列表</li>\n<li>返回类数组，如果类名不存在返回空数组 []</li>\n</ul>\n<pre><code>var box=document.getElementById(&quot;box&quot;);\nvar bb=box.getElementsByClassName(&quot;bb&quot;);\n</code></pre>\n<h3 id=\"3通过标签名\"><a class=\"markdownIt-Anchor\" href=\"#3通过标签名\">#</a> 3. 通过标签名</h3>\n<p>getElementByTagName (“标签名”)；</p>\n<ul>\n<li>通过标签名获取元素节点列表</li>\n<li>返回类数组，如果 tagname 不存在返回空数组 []</li>\n</ul>\n<h3 id=\"4通过name属性\"><a class=\"markdownIt-Anchor\" href=\"#4通过name属性\">#</a> 4. 通过 name 属性</h3>\n<p>document.getElementsByName()</p>\n<ul>\n<li>通过 name 属性获取元素节点列表</li>\n<li>必须通过 document 调用</li>\n<li>返回类数组，如果 name 属性不存在返回空数组 []</li>\n</ul>\n<p>注意：如果确认元素存在，但是返回 null 或 []，一定是代码执行顺序的问题</p>\n<h3 id=\"5利用节点关系\"><a class=\"markdownIt-Anchor\" href=\"#5利用节点关系\">#</a> 5. 利用节点关系，</h3>\n<p>获取其他节点（包含文本节点）</p>\n<h4 id=\"获取父级节点\"><a class=\"markdownIt-Anchor\" href=\"#获取父级节点\">#</a> 获取父级节点</h4>\n<p>ele.parentNode  // 得到节点的父节点</p>\n<h4 id=\"获取子节点\"><a class=\"markdownIt-Anchor\" href=\"#获取子节点\">#</a> 获取子节点</h4>\n<p>ele.childNodes  // 得到 ele 元素的全部子节点列表（类数组）</p>\n<p>ele.firstChild  // 获得 ele 元素的第一个子节点</p>\n<p>ele.lastChild  // 获得 ele 元素的最后一个子节点</p>\n<h4 id=\"获取兄弟节点\"><a class=\"markdownIt-Anchor\" href=\"#获取兄弟节点\">#</a> 获取兄弟节点</h4>\n<p>ele.nextSibling  // 获得 ele 元素的下一个兄弟节点</p>\n<p>ele.previousSibling  // 获得 ele 元素的上一个兄弟节点</p>\n<h3 id=\"6节点的三个属性\"><a class=\"markdownIt-Anchor\" href=\"#6节点的三个属性\">#</a> 6. 节点的三个属性</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">nodeType</th>\n<th style=\"text-align:center\">nodeName</th>\n<th style=\"text-align:center\">nodeValue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1. 元素节点</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">标签名大写</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2. 属性节点</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">属性名</td>\n<td style=\"text-align:center\">属性值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3. 文本节点</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">#text</td>\n<td style=\"text-align:center\">文本内容</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"7利用元素节点关系\"><a class=\"markdownIt-Anchor\" href=\"#7利用元素节点关系\">#</a> 7. 利用元素节点关系</h3>\n<h4 id=\"获取父级节点元素\"><a class=\"markdownIt-Anchor\" href=\"#获取父级节点元素\">#</a> 获取父级节点元素</h4>\n<p>parentElement</p>\n<h4 id=\"获取子级元素节点\"><a class=\"markdownIt-Anchor\" href=\"#获取子级元素节点\">#</a> 获取子级元素节点</h4>\n<p>children 获取元素的全部子元素</p>\n<p>firstElementChild 获取第一个子元素</p>\n<p>lastElementChild 获取最后一个子元素</p>\n<h4 id=\"获取兄弟元素节点\"><a class=\"markdownIt-Anchor\" href=\"#获取兄弟元素节点\">#</a> 获取兄弟元素节点</h4>\n<p>nextElementSibling 获取下一个元素</p>\n<p>previousElementSibling 获取上一个元素</p>\n<h3 id=\"8节点的创建与插入方法\"><a class=\"markdownIt-Anchor\" href=\"#8节点的创建与插入方法\">#</a> 8. 节点的创建与插入方法</h3>\n<p>创建：</p>\n<ul>\n<li>document.createElement () 创建一个元素节点</li>\n<li>document.createTextNode () 创建一个文本节点</li>\n<li>document.createAttribute () 创建一个属性节点（了解）</li>\n</ul>\n<p>插入：</p>\n<ul>\n<li>parent.appendChild ()  向节点的子节点列表的结尾添加新的子节点</li>\n<li>parent.insertBefore (new,node)  在指定的子节点 node 前插入新的子节点 new。</li>\n<li>ele.setAttributeNode (attrNode) 在指定元素中插入一个属性节点（了解）</li>\n</ul>\n<p>对页面已存在节点的处理</p>\n<p>复制</p>\n<ul>\n<li>cloneNode (boolean)  复制节点，为 true 是深复制。</li>\n</ul>\n<p>删除：</p>\n<ul>\n<li>parent.removeChild (ele)  删除（并返回）当前节点 parent 的指定子节点 ele。</li>\n</ul>\n<p>判断：</p>\n<ul>\n<li>parent.hasChildNodes () 判断当前节点是否拥有子节点，返回布尔值</li>\n</ul>\n<h2 id=\"元素节点对象的属性及方法\"><a class=\"markdownIt-Anchor\" href=\"#元素节点对象的属性及方法\">#</a> 元素节点（对象）的属性及方法</h2>\n<h3 id=\"1常用属性\"><a class=\"markdownIt-Anchor\" href=\"#1常用属性\">#</a> 1. 常用属性</h3>\n<p>可以通过点语法或方括号访问</p>\n<ul>\n<li>tagName 获取元素元素的标签名</li>\n<li>id 设置 / 获取元素 id 属性</li>\n<li>name 设置 / 获取元素 name 属性</li>\n<li>style 设置 / 获取元素的内联样式</li>\n<li>className 设置 / 获取元素的 class 属性</li>\n<li>innerHTML 设置 / 获取元素的内容（包含 html 代码）</li>\n<li>outerHTML 设置或获取元素及其内容（包含 html 代码）</li>\n<li>innerText 设置或获取位于元素标签内的文本</li>\n<li>outerText 设置 (包括标签) 或获取 (不包括标签) 元素的文本</li>\n</ul>\n<h3 id=\"2元素方法修改html属性\"><a class=\"markdownIt-Anchor\" href=\"#2元素方法修改html属性\">#</a> 2. 元素方法（修改 html 属性）</h3>\n<ul>\n<li>ele.getAttribute (attr) // 获取元素的属性值（自定义属性获取）</li>\n<li>ele.setAttribute (attr,val); // 设置元素的属性</li>\n<li>ele.removeAttribute (attr) // 删除属性 attr</li>\n<li>ele.hasAttribute (attr) // 判断是否存在属性 attr</li>\n</ul>\n<h3 id=\"3盒模型相关\"><a class=\"markdownIt-Anchor\" href=\"#3盒模型相关\">#</a> 3. 盒模型相关</h3>\n<pre><code>offsetTop: 当前元素离&lt;定位父级&gt;元素顶部的距离。\noffsetLeft: 当前元素离&lt;定位父级&gt;元素左边的距离。\n\t以上两个属性如果没定位的父级，则相对于根元素html的距离\noffsetWidth: 当前元素的宽度（border + padding + content）\noffsetHeight: 当前元素的高度（border + padding + content）\n</code></pre>\n<h2 id=\"table对象了解\"><a class=\"markdownIt-Anchor\" href=\"#table对象了解\">#</a> table 对象 (了解)</h2>\n<h3 id=\"1-table对象属性方法\"><a class=\"markdownIt-Anchor\" href=\"#1-table对象属性方法\">#</a> 1. table 对象属性 &amp; 方法</h3>\n<ul>\n<li>rows 返回包含表格中所有行的一个数组</li>\n<li>tBodies 返回包含表格中所有 tbody 的一个数组</li>\n<li>insertRow (index) 在表格中插入一个新行。</li>\n<li>deleteRow (index) 从表格删除一行。</li>\n</ul>\n<h3 id=\"2-tr对象属性方法\"><a class=\"markdownIt-Anchor\" href=\"#2-tr对象属性方法\">#</a> 2. tr 对象属性 &amp; 方法</h3>\n<ul>\n<li>cells 返回包含表格中所有单元格的一个数组</li>\n<li>rowIndex 返回该行在表中的位置</li>\n<li>sectionRowIndex 返回在 tBody 、tHead 或 tFoot 中行的位置。</li>\n<li>insertCell (index) 在一行中的指定位置插入一个空的列</li>\n<li>deleteCell (index) 删除行中的指定的单元格</li>\n</ul>\n<h3 id=\"3-tdth对象属性方法\"><a class=\"markdownIt-Anchor\" href=\"#3-tdth对象属性方法\">#</a> 3. td/th 对象属性 &amp; 方法</h3>\n<ul>\n<li>cellIndex 返回单元格在表格行的单元格集合中的位置。</li>\n</ul>\n<h1 id=\"十一-事件\"><a class=\"markdownIt-Anchor\" href=\"#十一-事件\">#</a> 十一、事件</h1>\n<h2 id=\"鼠标事件\"><a class=\"markdownIt-Anchor\" href=\"#鼠标事件\">#</a> 鼠标事件</h2>\n<p>onclick 当用户点击某个对象时调用的事件。</p>\n<p>ondblclick 当用户双击某个对象时调用的事件。</p>\n<p>onmousedown 鼠标按钮被按下。</p>\n<p>onmouseup 鼠标按键被松开。</p>\n<p>onmouseover 鼠标移到某元素之上。</p>\n<p>onmouseout 鼠标从某元素移开。</p>\n<p>onmousemove 鼠标被移动时触发。</p>\n<p>onmouseenter 在鼠标光标从元素外部移动到元素范围之内时触发。这个事件不冒泡</p>\n<p>onmouseleave 在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡</p>\n<p>oncontextmenu 鼠标右键菜单展开时触发</p>\n<p>PS：click = mousedown + mouseup, dblclick = click*2 (短时间内两次单击);<br>\n 执行顺序：mouseover=&gt;mouseenter; mouseout =&gt; mouseleave</p>\n<h2 id=\"事件对象\"><a class=\"markdownIt-Anchor\" href=\"#事件对象\">#</a> 事件对象</h2>\n<p>事件执行过程中的状态，用来保存当前事件的信息的对象</p>\n<pre><code>ele.事件 = function(e)&#123;\n\te = e || window.event;//获取event对象的兼容写法。IE8-：window.event\n&#125;\n</code></pre>\n<p>兼容性代码：e=e||window.event</p>\n<p>// 标准浏览器：e</p>\n<p>//ie8：false ||window.event ==&gt;window.event</p>\n<h3 id=\"1事件对象的属性与鼠标相关\"><a class=\"markdownIt-Anchor\" href=\"#1事件对象的属性与鼠标相关\">#</a> 1. 事件对象的属性（与鼠标相关）</h3>\n<p>e.button</p>\n<p>当事件被触发时，返回哪个鼠标按钮被点击</p>\n<p>W3C 标准：0 代表鼠标按下左键；1 代表按下了滚轮；2 代表按下了右键；</p>\n<p>IE8：1 鼠标左键，2 鼠标右键，3 左右同时按，4 滚轮，5 左键加滚轮，6 右键加滚轮，7 三个同时；</p>\n<h3 id=\"2光标位置信息\"><a class=\"markdownIt-Anchor\" href=\"#2光标位置信息\">#</a> 2. 光标位置信息</h3>\n<pre><code>e.clientX /e.clientY 光标相对于浏览器可视区域的位置，也就是浏览器坐标。\ne.screenX/e.screenY 光标指针相对于电脑屏幕的水平/垂直坐标。\ne.pageX/e.pageY:鼠标相对于文档的位置。\n\t* 包括滚动条滚动的距离，即：e.clientX+window.scrollX\n\t* IE8-不支持\n\te.offsetX,e.offsetY: 光标相对于事件源对象的相对偏移量。\n\t* 事件源对象：触发事件的对象\n</code></pre>\n<h2 id=\"键盘事件\"><a class=\"markdownIt-Anchor\" href=\"#键盘事件\">#</a> 键盘事件</h2>\n<p>onkeydown 某个键盘按键被按下。<br>\nonkeyup 某个键盘按键被松开。<br>\nonkeypress 键盘 &lt;字符键&gt; 被按下触发，而且如果按住不放的话，会重复触发此事件。</p>\n<p>1. 事件 对象的属性（与键盘相关）</p>\n<p>（1）which/keyCode</p>\n<p>对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码 (ascii 码)</p>\n<p>对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。</p>\n<p>兼容代码：e.which=e.which||e.keyCode</p>\n<p>（2）altKey 当事件被触发时，ALT 键是否被按下，返回值为布尔值</p>\n<p>（3）ctrlKey 当事件被触发时 CTRL 键是否被按下</p>\n<p>（4）shiftKey 当事件被触发时，Shift 键是否被按下；</p>\n<h2 id=\"阻止浏览器的默认行为\"><a class=\"markdownIt-Anchor\" href=\"#阻止浏览器的默认行为\">#</a> 阻止浏览器的默认行为</h2>\n<p>1. 阻止右键鼠标的默认行为</p>\n<p>oncontextmenu</p>\n<p>2. 文本的选择</p>\n<p>3. 表单的提交</p>\n<p>4. 链接的跳转</p>\n<p>标准： event.preventDefault ();</p>\n<p>IE8-: event.returnValue=false;</p>\n<p>兼容：event.preventDefault? event.preventDefault ():event.returnValue=false</p>\n<pre><code>\t\t//1.全局阻止\n\t\t// document.oncontextmenu=function(e)&#123;\n\t\t// \te.preventDefault();\n\t\t// &#125;\n\t\t//2.元素内阻止\n\t\t// var box=document.getElementById('box');\n\t\t// box.oncontextmenu=function(e)&#123;\n\t\t// \te.preventDefault();\n\t\t// &#125;\n</code></pre>\n<h2 id=\"事件冒泡\"><a class=\"markdownIt-Anchor\" href=\"#事件冒泡\">#</a> 事件冒泡</h2>\n<h3 id=\"什么是事件冒泡\"><a class=\"markdownIt-Anchor\" href=\"#什么是事件冒泡\">#</a> 什么是事件冒泡：</h3>\n<blockquote>\n<p>在一个对象上触发某类事件（如 onclick 事件），那么 click 事件就会沿着 DOM 树向这个对象的父级传播，从里到外，直至它被处理程序处理，或者事件到达了最顶层（document/window）</p>\n</blockquote>\n<h4 id=\"演示从里到外的元素添加相同的事件查看事件冒泡\"><a class=\"markdownIt-Anchor\" href=\"#演示从里到外的元素添加相同的事件查看事件冒泡\">#</a> 演示：从里到外的元素添加相同的事件，查看事件冒泡</h4>\n<p>1）不是所有的事件都能冒泡。</p>\n<p>​\t以下事件不冒泡：blur、focus、load、unload…。</p>\n<p>​\t【onmouseover 与 onmouseenter 的区别】</p>\n<p>2）冒泡到最顶层的目标不同。大部分浏览器到 window 对象，IE8 - 到 document 对象</p>\n<h3 id=\"停止事件的传播\"><a class=\"markdownIt-Anchor\" href=\"#停止事件的传播\">#</a> 停止事件的传播</h3>\n<p>兼容：e.stopPropagation?e.stopPropagation ():e.cancelBubble = true;</p>\n<pre><code> 标准：event.stopPropagation(); \n IE8-：event.cancelBubble = true; \n // 阻止事件冒泡兼容写法：\n if(e.stopPropagation)&#123;\n \te.stopPropagation();\n &#125;else&#123;\n\te.cancelBubble = true;\n &#125;\n</code></pre>\n<h3 id=\"事件委托\"><a class=\"markdownIt-Anchor\" href=\"#事件委托\">#</a> 事件委托</h3>\n<p>​\t利用事件冒泡原理，把本来绑定给某个元素的事件委托给它的父级（已经存在页面元素）处理。</p>\n<h4 id=\"事件源对象触发事件的元素\"><a class=\"markdownIt-Anchor\" href=\"#事件源对象触发事件的元素\">#</a> 事件源对象：触发事件的元素</h4>\n<p>标准：event.target<br>\nIE8-：event.srcElement</p>\n<p>兼容：e.target=e.target || e.srcElement;</p>\n<h4 id=\"案例表格删除当前行\"><a class=\"markdownIt-Anchor\" href=\"#案例表格删除当前行\">#</a> 案例：表格删除当前行</h4>\n<pre><code>//影响页面性能的三大操作：\n\t//* 事件数量\n\t//* dom节点操作次数\n\t//* 请求次数\noutput.onclick = function(e)&#123;\t\n\t//兼容性问题\n    e = e || window.event;\n    var target = e.target || e.srcElement;\n    if(target.className === 'btnDel')&#123;\n    \t//this指的是谁?\n        var currentTr = target.parentNode.parentNode;\n        currentTr.parentNode.removeChild(currentTr);\n    &#125;else if(target.className === 'btnCopy')&#123;\n        var currentTr = target.parentNode.parentNode;\n        currentTr.parentNode.appendChild(currentTr.cloneNode(true));\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"事件捕获\"><a class=\"markdownIt-Anchor\" href=\"#事件捕获\">#</a> 事件捕获</h2>\n<p>从 DOM 树顶端到当前元素，执行事件。</p>\n<h2 id=\"绑定事件的方式\"><a class=\"markdownIt-Anchor\" href=\"#绑定事件的方式\">#</a> 绑定事件的方式</h2>\n<pre><code>//（1）作为html属性\n//\t\t&lt;div onclick=&quot;sum()&quot;&gt;&lt;/div&gt; 不常用，不实用。\n//（2）DOM节点绑定\n//\t\t*同一元素的同名事件会被覆盖\n//  \t*事件处理函数只能冒泡阶段执行\n//\t\tdiv.onclick = function()&#123;&#125;\n//（3）事件监听器\n//\t\taddEventListener(事件,function()&#123;&#125;[,是否捕获])\n//\t\t默认false冒泡不捕获，true捕获\n//\t\t*同名事件不会被覆盖\n//  \t*事件处理函数默认冒泡阶段执行\n</code></pre>\n<h3 id=\"事件监听器\"><a class=\"markdownIt-Anchor\" href=\"#事件监听器\">#</a> 事件监听器</h3>\n<pre><code>//标准浏览器：元素.addEventListener(事件名,事件处理函数,是否捕获（默认false，为冒泡）)\ntarget.addEventListener(&quot;click&quot;, fn, false);\n//IE8-：元素.attachEvent(on+事件名,事件处理函数)没有捕获阶段\ntarget.attachEvent(&quot;onclick&quot;,fun);\n</code></pre>\n<ul>\n<li>可以绑定多个处理函数在一个对象上，执行顺序按照绑定的顺序来 (标准)\n<ul>\n<li>不同元素事件执行顺序跟 html 结构有关</li>\n<li>相同元素事件执行顺序跟绑定先后有关</li>\n</ul>\n</li>\n<li>可以绑定多个函数在一个对象上，执行顺序按照绑定的反序（ie8-）</li>\n</ul>\n<p>封装：绑定事件，兼容浏览器</p>\n<pre><code>function bind(ele,type,handler,isCapture)&#123;\n\t// 优先使用事件监听器\n\tif(ele.addEventListerner)&#123;\n\t\t// 标准浏览器\n\t\tele.addEventListerner(type,handler,isCapture);\n\t&#125;else if(ele.attachEvent)&#123;\n\t\t// IE8-\n\t\tele.attachEvent('on' + type,handler);\n\t&#125;else&#123;\n\t\t// DOM节点绑定方式\n\t\tele['on' + type] = handler\n\t&#125;\n&#125;\n</code></pre>\n<h2 id=\"事件的移除\"><a class=\"markdownIt-Anchor\" href=\"#事件的移除\">#</a> 事件的移除</h2>\n<h3 id=\"dom绑定事件的移除\"><a class=\"markdownIt-Anchor\" href=\"#dom绑定事件的移除\">#</a> DOM 绑定事件的移除</h3>\n<p>​\tele.on + 事件 = null；</p>\n<h3 id=\"事件监听器移除\"><a class=\"markdownIt-Anchor\" href=\"#事件监听器移除\">#</a> 事件监听器移除</h3>\n<ul>\n<li>标准：removeEventListener (type,fn, true) 传入的参数 fn 要跟添加时一样 (同一个函数)，否则不能移除事件</li>\n<li>IE8-：detachEvent (‘on’+type,fun)，传入的参数 fun 要跟添加时一样，否则不能移除事件</li>\n</ul>\n<blockquote>\n<p>注意：<br>\n页面事件绑定数量越多，越影响性能（速度越慢）</p>\n</blockquote>\n<h1 id=\"十二-正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#十二-正则表达式\">#</a> 十二、正则表达式</h1>\n<h2 id=\"概念-4\"><a class=\"markdownIt-Anchor\" href=\"#概念-4\">#</a> 概念</h2>\n<p>正则表达式（regular expression）是一个描述字符模式的对象</p>\n<p>能够进行强大的 “模式匹配” 和 “文本检索与替换” 功能。前端往往有大量的表单数据校验的工作，采用正则表达式会使得数据校验的工作量大大减轻</p>\n<h2 id=\"创建正则表达式\"><a class=\"markdownIt-Anchor\" href=\"#创建正则表达式\">#</a> 创建正则表达式</h2>\n<p>1. 字面量</p>\n<p>var reg=/ 字符串 || 匹配规则 /gi;</p>\n<p>g 全局匹配，i 不区分大小写</p>\n<p>2. 构造函数</p>\n<p>var reg=new RegExp (“字符串 || 匹配规则”,gi);</p>\n<h2 id=\"支持正则表达式的字符串方法\"><a class=\"markdownIt-Anchor\" href=\"#支持正则表达式的字符串方法\">#</a> 支持正则表达式的字符串方法</h2>\n<p>1.search()</p>\n<p>返回第一次匹配时所在的索引值，如果匹配不到则返回 - 1；</p>\n<p>2.match()</p>\n<p>默认匹配字符串，返回一个数组</p>\n<p>0：所匹配的字符</p>\n<p>index: 匹配第一个字符所在的索引</p>\n<p>input: 对字符串的引用</p>\n<p>全局匹配 (g)，返回一个匹配所有字符串的数组，如果匹配不到则返回 null</p>\n<p>3.replace()</p>\n<p>替换字符串</p>\n<h2 id=\"匹配规则\"><a class=\"markdownIt-Anchor\" href=\"#匹配规则\">#</a> 匹配规则</h2>\n<p>1. 字符类（不说数量则默认只匹配一个）</p>\n<p>\\d 数字</p>\n<p>\\D 非数字</p>\n<p>\\w 代表数字、字母、下划线</p>\n<p>\\W 非数字字母和下划线字符</p>\n<p>\\s 空格</p>\n<p>\\S 空格以外的字符</p>\n<p>. 除换行以外的所有字符</p>\n<p>\\b : 匹配一个单词边界，也就是指单词和空格间的位置</p>\n<p>\\B : 匹配非单词边界。</p>\n<p>单词和数字会被认为没有边界</p>\n<p>PS: 以上所有字符类都只是匹配 “一个” 字符</p>\n<p>2. 特殊符号 ^ $ . * + ? = ! : | \\ / () [] {}</p>\n<p>(1) 表示数量：（默认遵循贪婪模式，越多越好）</p>\n<p 1,=\"\">+ 匹配 1 个或多个字符</p>\n<p 0,=\"\">* 匹配 0 个字符以上</p>\n<p 0,1=\"\">? 匹配 0 个或 1 个字符</p>\n<p>{2,4} 最少 2 个，最多 4 个；匹配到 2~4 个字符</p>\n<p>(2)[] 代表任意 “单个字符”，里面的内容表示 “或” 的关系</p>\n<p>- 表示范围</p>\n<p>例如：console.log (str.match (/[a-z]+/g));</p>\n<p>^ 代表非</p>\n<p>(): 表示一个整体，普通括号 (?😃</p>\n<pre><code>var reg=/(?:\\d&#123;17&#125;|\\d&#123;14&#125;)[\\dx]/\n</code></pre>\n<p>(): 表示分组（n 是以最左边括号出现的顺序排列)</p>\n<ul>\n<li>\n<p>$1: 表示第一个分组</p>\n</li>\n<li>\n<p>$n: 表示第 n 个分组（不能写在正则表达式里）</p>\n</li>\n<li>\n<p>\\n: 在正则分组后面使用，表示对第 n 个分组的引用 (一定要写在正则表达式里)</p>\n<p>PS: 编写的正则分组数量越少越好</p>\n</li>\n</ul>\n<p>var str=“张益达，李小璐，张非凡”;</p>\n<p>|: 表示或者</p>\n<p>锚点定位</p>\n<ul>\n<li>^: 表示以什么开头</li>\n<li>$: 表示以什么结尾</li>\n</ul>\n<p>表示数量，对前一个字符计数，</p>\n<ul>\n<li 0,=\"\">*: 代表 0 个或 0 个以上 &lt;===&gt;</li>\n<li 1,=\"\">+: 代表 1 个或 1 个以上 &lt;===&gt;</li>\n<li 0,1=\"\">?: 代表 0 个或 1 个 &lt;===&gt;</li>\n<li>{}:</li>\n</ul>\n<pre><code>\\d&#123;5&#125;: 匹配5个数字\n\\d&#123;5,10&#125;: 匹配5个到10个数字\n\\d&#123;5,&#125;: 匹配5个或5个以上的数字\n</code></pre>\n<p>非贪婪模式，在后面加问号</p>\n<p>/\\d{5,10}?/g</p>\n<h1 id=\"十三-es5\"><a class=\"markdownIt-Anchor\" href=\"#十三-es5\">#</a> 十三、ES5</h1>\n<h2 id=\"支持es5的浏览器\"><a class=\"markdownIt-Anchor\" href=\"#支持es5的浏览器\">#</a> 支持 ES5 的浏览器</h2>\n<p>ie9+</p>\n<h2 id=\"页面加载事件\"><a class=\"markdownIt-Anchor\" href=\"#页面加载事件\">#</a> 页面加载事件</h2>\n<p>1、解析 HTML 结构</p>\n<p>2、加载外部脚本和样式表文件</p>\n<p>3、解析并执行脚本代码</p>\n<p>4、DOM 树构建完成 //DOMContentLoaded</p>\n<p>5、加载图片等外部文件</p>\n<p>6、页面加载完毕 <a href=\"//window.onload\">//window.onload</a></p>\n<pre><code>* readystatechange事件（准备阶段状态改变，两个状态）\n    * interactive \t：DOM树完成执行\n    * complete\t\t：类似window.onload,但比window.onload先执行\n* DOMContentLoaded事件\n\t* DOM树完成执行\n    * 必须使用事件监听器绑定document事件\nPS:以上事件用以取代window.onload事件（实际开发不常用）\n\n</code></pre>\n<h2 id=\"es5的严格模式\"><a class=\"markdownIt-Anchor\" href=\"#es5的严格模式\">#</a> ES5 的严格模式</h2>\n<p>ie9 不支持严格模式</p>\n<p>1、使用严格模式：在当前作用域的最前面 &quot;use strict&quot;</p>\n<p>意义：增加 JS 语法的严谨性</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2</span>、为什么要用严格模式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span> 消除javascript语法的一些不合理，不严谨的地方，减少一些怪异行为；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span> 消除代码运行的一些不安全之处，保证代码运行的安全；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span> 提高编译器效率，增加运行速度；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span> 为未来新版本的javascript做好铺垫；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">3</span>、如何使用严格模式</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">*</span> 全局：针对整个js文件</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  将”use strict”放在js文件的第一行</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">*</span> 局部：针对单个函数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  将”use strict”放在函数体的第一行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">function</span> <span class=\"token function\">strict</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    \t<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   \t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"这是严格模式\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">4</span>、执行严格模式后的一些限制</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">*</span> 不使用<span class=\"token keyword\">var</span>声明变量严格模式中将不通过</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">*</span> 删除系统内置的属性会报错</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">*</span> 不能删除<span class=\"token keyword\">var</span>声明的全局变量（会自动成为window的属性）</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">*</span> 对象有重名的属性将报错</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token operator\">*</span> <span class=\"token keyword\">var</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'王大锤'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">*</span> 函数有重名的形参将报错</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token operator\">*</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">*</span> arguments严格定义为参数，保存实参信息</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token operator\">*</span> 不允许对arguments赋值</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token operator\">*</span> 禁止使用arguments<span class=\"token punctuation\">.</span>callee（相当于递归）</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">*</span> 函数必须声明在顶层，不能写在条件判断语句或<span class=\"token keyword\">for</span>循环语句中</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 报错&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"获取元素节点-2\"><a class=\"markdownIt-Anchor\" href=\"#获取元素节点-2\">#</a> 获取元素节点</h2>\n<p>1、document.querySelector (css 选择器) 获取匹配选择器的第一个元素节点，返回 DOM 节点</p>\n<p>1、document.querySelectorAll (css 选择器) 获取匹配选择器的所有元素节点，返回类数组</p>\n<h2 id=\"function方法bind\"><a class=\"markdownIt-Anchor\" href=\"#function方法bind\">#</a> Function 方法 bind ()</h2>\n<p>1、bind () 用于将当前函数和指定对象绑定（改变 this 指向），返回一个新函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 应用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> btns <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>btns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    btns<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 方式 1 (1)：var self = this;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">//(2)console.log(self.innerHTML);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 方式 2.bind () 改变 this 的指向</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"获取class的属性\"><a class=\"markdownIt-Anchor\" href=\"#获取class的属性\">#</a> 获取 class 的属性</h2>\n<p>操作类名的方法</p>\n<pre><code>classList对象\n\t-length:class类名的个数\n\t-add():添加class方法\n\t-remove():删除class方法\n\t-toggle():切换class方法\n\t-contains():是否含有某个类，返回布尔值\n</code></pre>\n<h2 id=\"data自定义属性\"><a class=\"markdownIt-Anchor\" href=\"#data自定义属性\">#</a> data 自定义属性</h2>\n<pre><code>-w3c规定的自定义属性的格式为[data-**=&quot;&quot;]\n-dataset对象\n\tdata-age=&quot;17&quot; &lt;==&gt;ele.dataset.age=17;\n</code></pre>\n<h1 id=\"十四-es6\"><a class=\"markdownIt-Anchor\" href=\"#十四-es6\">#</a> 十四、ES6</h1>\n<h2 id=\"let变量声明\"><a class=\"markdownIt-Anchor\" href=\"#let变量声明\">#</a> let 变量声明</h2>\n<pre><code>let:声明变量\n-变量声明不会提前\n-let不允许相同作用域内多次声明同一变量\n-块级作用域&#123;&#125;  //花括号内为块级作用域\n</code></pre>\n<h2 id=\"const声明常量\"><a class=\"markdownIt-Anchor\" href=\"#const声明常量\">#</a> const 声明常量</h2>\n<pre><code>-变量声明不会提前\n-const不允许相同作用域内多次声明同一变量\n-块级作用域\n-声明后无法修改值\n*建议命名时全部大写，用_隔开多个单词\n</code></pre>\n<h2 id=\"解构\"><a class=\"markdownIt-Anchor\" href=\"#解构\">#</a> 解构</h2>\n<p>声明变量时，从数组或对象中提取值，对变量进行赋值，这被叫做 &quot;解构&quot;</p>\n<pre><code>（一）数组解构\n1、常规操作\n\tvar [a,b,c]=[1,2,3]; //等同于var a=1,b=2,c=3\n2、...表示获取剩余的所有参数\n\tvar [a,...b]=[1,2,3,4]; //等同于var a=1,b=[2,3,4];\n3、解构失败\n如果变量个数多于赋值数，多余变量为undefined;\n例如：var [a]=1; //报错：1 is not iterable\n解构-左右都要有中括号\n4、指定默认值\n\tvar [a,b,c=1]=[10,30] //若解构失败，为默认值\n\t//a=10,b=30,c=1\n（二）对象解构\n1、常规操作\n\tobj=&#123;\n        guid:&quot;01&quot;,\n        name:&quot;猫爪杯&quot;,\n        price:888\n\t&#125;\n\tvar &#123;guid,name,price&#125;=obj;\n2、解构失败：变量名与属性名不相同，返回值为undefined\n3、如果变量名与属性名不相同，则必须写成以下格式才能取到值\n&#123;原属性名:变量名&#125;\n4、指定默认值\n\tvar &#123;a=10&#125;=&#123;&#125;; //当a解构失败的话，拿到默认值\n（三）应用\n1、交换变量值\nvar x=10;\nvar y=20;\nvar [x,y]=[y,x];\n2、函数返回多个值\n    //数组：\n    function example()&#123;\n         return [1,2,3]\n    &#125;\n    var [x,y,z] = example();\n    //对象：\n    function example()&#123;\n         return &#123;name:&quot;lemon&quot;,age:18&#125;;\n    &#125;\n    var &#123;name,age&#125; = example();\n3、定义函数形参（重点）\n    //数组：\n    function test([x,y,z])&#123;\n        //相当于 var [x,y,z] = [1,2,3];\n    &#125;\n    test([1,2,3]);\n    //对象：\n    function test(&#123;name,age&#125;)&#123;\n        //相当于 var &#123;name,age&#125; = &#123;name:&quot;lemon&quot;,age:18&#125;;\n    &#125;\n    test(&#123;name:&quot;lemon&quot;,age:18&#125;);\n\n    //常规操作：参数可以设置默认值\n    fuction test(&#123;x=0,y=0,z=0&#125;)&#123;\n        //相当于var &#123;x=0,y=0,z=0&#125; = &#123;x:10&#125;\n        //为避免没有实参值传入，给形参默认值\n    &#125;\n    test(&#123;x:10&#125;);\n\n    //扩展：若形参是基本数据类型，函数也可以对形参进行设置默认值的操作。\n    var func1 = function(x=1,y=2)&#123;return x+y&#125;；\n    func1(); // 得到 3\n    //同样，也可以用...表示获取剩余参数\n    var func2 = (x, ...args) =&gt; &#123; console.log(args) &#125;;\n    func2(1,2,3); // 输出 [2,3]\n</code></pre>\n<h2 id=\"字符串扩展\"><a class=\"markdownIt-Anchor\" href=\"#字符串扩展\">#</a> 字符串扩展</h2>\n<pre><code>字符串方法\n1、includes\n\t判断是否包含某个字符，返回布尔值\n'html5'.includes('html');//true\n2、startsWith/endsWith\n\t是否以某一字符或某一字符串开头/结尾\n\tlet str='google';\n    str.startsWith('goo');  //true\n    str.endsWith('e');    //true\n3、repeat(n)\n\t得到字符串重复n次后的结果，n可以为小数，但不能为负数\n    'laoxie'.repeat(2);//laoxielaoxie\n\n</code></pre>\n<h2 id=\"字符串模板\"><a class=\"markdownIt-Anchor\" href=\"#字符串模板\">#</a> 字符串模板</h2>\n<p>template string</p>\n<pre><code>-使用反引号``表示，你可以通过一种更加美观、更加方便的方式向字符串中插入变量\n-格式：$&#123;变量|函数&#125;，\n `你好，我的名字叫$&#123;username&#125;,接下来是我的自我介绍：$&#123;introduce()&#125;` \n 模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。\n</code></pre>\n<h2 id=\"函数扩展\"><a class=\"markdownIt-Anchor\" href=\"#函数扩展\">#</a> 函数扩展</h2>\n<p><strong>（一）箭头函数</strong></p>\n<pre><code>（一）箭头函数\n*可以省略function、return、()、&#123;&#125;\n 1.&#123;&#125;内部只有一句返回代码，可以省略return\n \t没有参数或有多个参数不能省略()\n \t//var sum = () =&gt; 3;var sum = (a,b) =&gt; 3;\n \t只有一个参数，可以省略()\n \t//var sum = a =&gt; 3;\n 2.&#123;&#125;内部有多句代码，不能省略&#123;&#125;、return\n \t=&gt;后紧接着的&#123;&#125;代表代码块\n \t如果返回一个对象，两种写法\n \t(1)var sum=()=&gt;(&#123;name:'lemon'&#125;)\n \t(2)var sum=()=&gt;&#123;return &#123;name:'lemon&#125;&#125;\n 3.箭头函数没有this，它的this继承自外部作用域\n</code></pre>\n<p><strong>（二）生成器函数</strong></p>\n<p><code>next()</code>  方法会执行 generator 的代码，然后，每次遇到 <code>yield x;</code>  就返回一个对象 <code>&#123;value: x, done: true/false&#125;</code> ，然后 “暂停”。返回的 <code>value</code>  就是 <code>yield</code>  的返回值， <code>done</code>  表示这个 generator 是否已经执行结束了。如果 <code>done</code>  为 <code>true</code> ，则 <code>value</code>  就是 <code>return</code>  的返回值。</p>\n<p>当执行到 <code>done</code>  为 <code>true</code>  时，这个 generator 对象就已经全部执行完毕，不要再继续调用 <code>next()</code>  了。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">yield</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">yield</span> i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">yield</span> i<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"over\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> countNum <span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:11,done:false&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:12,done:false&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:13,done:false&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>countNum<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;value:\"over\",done:true&#125;</span></pre></td></tr></table></figure><h2 id=\"set集合\"><a class=\"markdownIt-Anchor\" href=\"#set集合\">#</a> set 集合</h2>\n<p>类似于数组，但是成员的值都是唯一的，可自动去重，去重的前提是两个值全等于。</p>\n<pre><code>\n（二）set的方法\n    * add(value)：添加某个值，返回Set结构本身。\n    * delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n    * has(value)：返回一个布尔值，表示Set集合中是否存在该值。\n    * clear()：清除所有成员，没有返回值。\n（三）利用set去重数组(对引用类型数据无效)\n    var arr = [1, 2, 3, 4, 5, 5, 5, 5]；\n    let items = new Set(arr);\n    //去重后将set集合重新转成数组\n    arr = Array.from(items)；\n（四）遍历set集合\n\t* forEach()\n\t* for…of\n        set.forEach((item,idx)=&gt;&#123;\n            console.log(item,idx);//索引值与item值相同\n        &#125;)\n\n        var imgs = new Set(['a','b','c']); //根据KEY遍历 \n        for(let item of imgs)&#123;\n             console.log(item); \n        &#125; \n</code></pre>\n<p>for…of</p>\n<ul>\n<li>这是最简洁、最直接的遍历数组元素的语法</li>\n<li>这个方法避开了 for-in 循环的所有缺陷</li>\n<li>for…of 跟 for-in 的区别很明显，就是直接取值，而不再取下标了</li>\n<li>与 forEach () 不同的是，它可以正确响应 break、continue 和 return 语句</li>\n</ul>\n<pre><code>var arr = [10,12,18,30];\nfor (var value of arr) &#123;\n  console.log(value);\n&#125;\n</code></pre>\n<p>只要有 [迭代器 Symbol (Symbol.iterator)  ] 就可以用 for…of 遍历：</p>\n<p>Array、DOM、Set/Map 集合、String、不支持普通对象</p>\n<h2 id=\"对象扩展\"><a class=\"markdownIt-Anchor\" href=\"#对象扩展\">#</a> 对象扩展</h2>\n<pre><code>（一）对象合并方法\nObject.assign(obj1,obj2,...objN);合并对象到obj1，返回obj1\n\tvar obj1 = &#123;a:1&#125;；\n    var newObj1 = Object.assign(obj1,&#123;b:2&#125;);\n    1.合并对象到obj1,所以obj1 = &#123;a:1,b:2&#125;\n    2.返回obj1，传递给newObj1，所以newObj1 = &#123;a:1,b:2&#125;\n\n    var newObj2 = Object.assign(obj1,&#123;b:2&#125;,&#123;b:4,c:3&#125;);\n    *若存在相同属性，后面的覆盖前面的。//newObj=obj1=&#123;a:1,b:4,c:3&#125;\n（二）对象的传递与复制 \n    var obj = &#123;\n        name:&quot;laoxie&quot;,\n        hobby:['大保健','money']\n    &#125;\n    1.对象的传递：\n    var newObj = obj; //此时修改obj的任意属性，也会同时影响newObj\n    2.对象的复制\n    （1）for...in遍历复制\n    for(var key in obj)&#123;\n        newObj2[key] = obj[key];\n    &#125;\n    （2）利用assign（）\n\t\tvar newObj3 = Object.assign(&#123;&#125;,obj);\n    \t注意：以上两种复制方式，都只支持浅拷贝（对于引用类型，只拷贝引用）\n\t\tobj.hobby.push('羽毛球');//此时也会影响newObj2与newObj3\n\n    （3）深拷贝\n\t\tvar newObj3 = JSON.parse(JSON.stringify(person))；\n\t\t//有缺陷，只支持 JSON 格式的数据类型，对于时间对象和正则不友好\n（三）对象的简写\n\tES6允许在对象之中直接写变量\n    1. 属性简写\n        var myName = 'laoxie';\n        var obj = &#123;myName&#125;;//等效于var obj = &#123;myName:'laoxie'&#125;。\n    \t//变量名作为属性名，变量值作为属性值。\n    2.变量值作为属性名\n        var obj = &#123;\n            [myName]:18 //等效于 laoxie:18\n        &#125;\n    3.方法简写\n        var obj = &#123;\n            coding()&#123;&#125; //等效于 coding:function()&#123;&#125;\n        &#125;\n</code></pre>\n<h2 id=\"map对象\"><a class=\"markdownIt-Anchor\" href=\"#map对象\">#</a> Map 对象</h2>\n<p><strong>1. 概念</strong></p>\n<p>js 对象（Object）只能用字符串当作键 (属性名)。这让它的使用有了很大的限制。所以 ES6 推出了一种类似于对象的数据集合：Map 集合，它能让所有类型的数据作为键</p>\n<p><strong>2. 方法</strong></p>\n<pre><code>\t\t* 设置set(key, value)\n\t\t* 获取get(key)\n\t\t* has(key)\n\t\t* delete(key)\n\t\t* clear()\n\t（1）创建：\n        let map = new Map(); \n    （2）设置：\n        map.set('name','laoxie');\n        map.set(6,666);\n        // 把数组作为键\n        var arr = [10,20,30];\n        map.set(arr,'数组');\n        //获取：\n        map.get(arr); //'数组'\n</code></pre>\n<p><strong>3. 遍历方法</strong></p>\n<pre><code>    * keys() 获取所有键，可以用Array.from()转成数组\n    * values() 获取所有值，可以用Array.from()转成数组\n    * entries() 获取所有键值对，可以用Array.from()转成数组\n    * 循环遍历，配合解构赋值 for...of\n    for(var item of map)&#123;\n        console.log(item); //每个item得到的都是一个数组，索引0为键，索引1为值\n    &#125; \n    //解构写法：\n    for(var [key,value] of map)&#123;\n        console.log(key,value);\n    &#125;\n</code></pre>\n<h2 id=\"symbol字符串\"><a class=\"markdownIt-Anchor\" href=\"#symbol字符串\">#</a> Symbol 字符串</h2>\n<pre><code>1.概念\n\tES6引入了一种新的原始数据类型Symbol，表示独一无二的值，一旦创建后就不可更改，是一种类似于字符串的数据类型，但Symbol 值不能与其他类型的值进行运算，否则报错。\n2.创建\n    (1)没有参数的情况\n    var s1 = Symbol();\n    var s2 = Symbol();\n    s1 === s2 // false\n\n    (2)Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了标识和区分，对调式非常有用\n    // 有参数的情况\n    var s1 = Symbol(&quot;foo&quot;);\n    var s2 = Symbol(&quot;foo&quot;);\n    s1 === s2 // false\n\n    (3)Symbol值不能与其他类型的值进行运算\n3.用途\n    * 给对象创建私有属性\n    * 给现有的对象添加属性，可能会产生命名冲突，Symbol的出现解决这个问题\n    var attr = Symbol();\n\n    // 第一种写法,不用加引号\n    var a = &#123;&#125;;\n    a[attr] = 'Nani';\n\n    // 第二种写法（注意加方括号，否则回被当作普通属性）\n    var a = &#123;\n        [attr]: 'Nani';\n    &#125;;\n\n    // 以上写法都得到同样结果\n    a[attr] // &quot;Nani&quot;\n4.Symbol.for() 登记symbol,会先查找当前Symbol是否存在\n    // 存在：则引用，不存在：则创建登记\n    var s11 = Symbol.for('xiaoming');//创建一个Symbol\n    var s12 = Symbol.for('xiaoming');//引用一个Symbol\n    //注意：直接使用Symbol()创建的Symbol值的键不会被登记，所以也就获取不到\n</code></pre>\n",
            "tags": [
                "Javascript"
            ]
        }
    ]
}