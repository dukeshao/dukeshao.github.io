<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>你的名字 • Posts by &#34;javascript&#34; tag</title>
        <link>https://dukeshao.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 13 Jul 2022 06:59:00 +0800</pubDate>
        <lastBuildDate>Wed, 13 Jul 2022 06:59:00 +0800</lastBuildDate>
        <category>CSS</category>
        <category>HTML</category>
        <category>Javascript</category>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/</guid>
            <title>Javascript进阶</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/</link>
            <category>Javascript</category>
            <pubDate>Wed, 13 Jul 2022 06:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-函数&#34;&gt;#&lt;/a&gt; 一、函数&lt;/h1&gt;
&lt;h2 id=&#34;1概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1概念&#34;&gt;#&lt;/a&gt; 1. 概念&lt;/h2&gt;
&lt;p&gt;函数就是把特定功能的代码抽取出并进行封装，用来重复执行一些功能。&lt;/p&gt;
&lt;h2 id=&#34;2优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2优点&#34;&gt;#&lt;/a&gt; 2. 优点&lt;/h2&gt;
&lt;p&gt;函数可以重复执行某一部分代码（通过函数名调用）；&lt;/p&gt;
&lt;p&gt;使代码清晰有层次，利于维护；&lt;/p&gt;
&lt;h2 id=&#34;3创建方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3创建方式&#34;&gt;#&lt;/a&gt; 3. 创建方式&lt;/h2&gt;
&lt;h4 id=&#34;a关键字声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a关键字声明&#34;&gt;#&lt;/a&gt; a. 关键字声明&lt;/h4&gt;
&lt;p 执行的功能代码=&#34;&#34;&gt;​	function 函数名 (形参)&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;b赋值式声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b赋值式声明&#34;&gt;#&lt;/a&gt; b. 赋值式声明&lt;/h4&gt;
&lt;p 执行的功能代码=&#34;&#34;&gt;​	var 函数名 = function (形参)&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;c构造函数法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c构造函数法&#34;&gt;#&lt;/a&gt; c. 构造函数法&lt;/h4&gt;
&lt;p&gt;​	 var 函数名 = new Function (); 不推荐使用&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; fn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;4分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4分类&#34;&gt;#&lt;/a&gt; 4. 分类&lt;/h2&gt;
&lt;p&gt;1	内置函数&lt;/p&gt;
&lt;p&gt;2	自定义函数&lt;/p&gt;
&lt;p&gt;3	匿名函数&lt;/p&gt;
&lt;p 执行的功能代码=&#34;&#34;&gt;function (形参)&lt;/p&gt;
&lt;h2 id=&#34;5函数的执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5函数的执行&#34;&gt;#&lt;/a&gt; 5. 函数的执行&lt;/h2&gt;
&lt;p&gt;1	主动执行：&lt;/p&gt;
&lt;p&gt;​	函数名 ()&lt;/p&gt;
&lt;p&gt;2	事件驱动：&lt;/p&gt;
&lt;p&gt;​	ele.onclick = 函数名；&lt;/p&gt;
&lt;p&gt;​	ele.onclick=function(){}&lt;/p&gt;
&lt;h2 id=&#34;6作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6作用域&#34;&gt;#&lt;/a&gt; 6. 作用域&lt;/h2&gt;
&lt;p&gt;（一）分类&lt;/p&gt;
&lt;h3 id=&#34;1全局作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1全局作用域&#34;&gt;#&lt;/a&gt; 1	全局作用域&lt;/h3&gt;
&lt;p&gt;全局变量：在函数外定义的变量称为全局变量&lt;/p&gt;
&lt;h3 id=&#34;2局部作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2局部作用域&#34;&gt;#&lt;/a&gt; 2	局部作用域&lt;/h3&gt;
&lt;p&gt;局部变量：在函数内定义的变量&lt;/p&gt;
&lt;h3 id=&#34;3变量的访问规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3变量的访问规则&#34;&gt;#&lt;/a&gt; 3	变量的访问规则&lt;/h3&gt;
&lt;p&gt;​	(1)	若在某个函数内部使用一个变量，那么先查找该函数内是否有变量声明；&lt;/p&gt;
&lt;p&gt;​	(2)	如果当前函数无变量 a，则往父级函数查找，如果找到则使用，并停止查找；&lt;/p&gt;
&lt;p&gt;​	(3)	如果在父级函数还是无法找到，则继续往上一层函数查找，以此类推；&lt;/p&gt;
&lt;p&gt;​	(4)	直到最顶层 (全局作用域)，如果还是没找到，则报错误 ** is not defined；&lt;/p&gt;
&lt;p&gt;在函数内若没有通过 var 声明变量，相当于在全局作用域用 var 声明了该变量&lt;/p&gt;
&lt;h3 id=&#34;4作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4作用域链&#34;&gt;#&lt;/a&gt; 4	作用域链&lt;/h3&gt;
&lt;p&gt;​	当函数访问变量时，根据就近原则从内到外查询变量，这个路径称为作用域链；&lt;/p&gt;
&lt;h2 id=&#34;7函数的实参与形参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7函数的实参与形参&#34;&gt;#&lt;/a&gt; 7. 函数的实参与形参&lt;/h2&gt;
&lt;p&gt;1	形参：函数定义时的参数（变量）&lt;/p&gt;
&lt;p&gt;2	实参：函数执行时的参数（值）&lt;/p&gt;
&lt;p&gt;形参与实参个数可以不一致&lt;/p&gt;
&lt;p&gt;函数内部隐藏的对象（是一个类数组），保存着实参的信息&lt;/p&gt;
&lt;p&gt;一、声明提前&lt;/p&gt;
&lt;p&gt;概念：代码从上往下顺序执行之前，会将所有的声明提升到当前作用域的最顶端，之后顺序执行&lt;/p&gt;
&lt;p&gt;在变量赋值之前使用变量，变量的值为 undefined&lt;/p&gt;
&lt;p&gt;用赋值式声明函数，若在声明之前调用函数，会报错，** is not  a function；&lt;/p&gt;
&lt;p&gt;用关键字声明函数，可以在声明之前调用函数&lt;/p&gt;
&lt;h2 id=&#34;基本数据类型与引用数据类型的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本数据类型与引用数据类型的区别&#34;&gt;#&lt;/a&gt; 基本数据类型与引用数据类型的区别&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;基本数据类型放在栈中,引用数据类型放在堆中
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-案例&#34;&gt;#&lt;/a&gt; ①　案例：&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//10,11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; brr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt;brr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2-数据类型作为函数的参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-数据类型作为函数的参数&#34;&gt;#&lt;/a&gt; ②　数据类型作为函数的参数&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 基本数据类型，传递的是值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    num&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 引用数据类型，传递的是地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//10,2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;函数的返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的返回值&#34;&gt;#&lt;/a&gt; 函数的返回值&lt;/h2&gt;
&lt;p&gt;1	概念：通过 return 将函数内部的值返回到函数外，函数外若要使用，必须接收。&lt;/p&gt;
&lt;p&gt;2	如果函数没有 return，执行完后返回 undefined&lt;/p&gt;
&lt;p&gt;3	return 后面的代码不会被执行&lt;/p&gt;
&lt;h2 id=&#34;this&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this&#34;&gt;#&lt;/a&gt; this&lt;/h2&gt;
&lt;p&gt;1	表示当前对象，取决于谁调用了这个函数&lt;/p&gt;
&lt;p&gt;2	直接执行，this 为 window；事件驱动，this 为绑定的元素。&lt;/p&gt;
&lt;h2 id=&#34;递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归&#34;&gt;#&lt;/a&gt; 递归&lt;/h2&gt;
&lt;p&gt;（自己调用自己）&lt;/p&gt;
&lt;p&gt;1	容易出现死循环&lt;/p&gt;
&lt;p&gt;2	递归避免死循环，设置好临界点 return&lt;/p&gt;
&lt;h2 id=&#34;回调函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#回调函数&#34;&gt;#&lt;/a&gt; 回调函数&lt;/h2&gt;
&lt;p&gt;（函数作为参数传递）&lt;/p&gt;
&lt;h1 id=&#34;二-数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-数组&#34;&gt;#&lt;/a&gt; 二、数组&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念：&lt;/h2&gt;
&lt;p&gt;一系列数据的集合，每一项（数组的元素）可以保存任何类型的数据，每个元素之间用逗号隔开&lt;br&gt;
 2. 数组的声明&lt;br&gt;
 (1）字面量 var arr = [1,2,3];&lt;br&gt;
(2）构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = new Array(3); 创建长度为3的数组
var arr = new Array(&amp;quot;aa&amp;quot;,&amp;quot;bb&amp;quot;,&amp;quot;cc&amp;quot;);  创建数组及定义好每一项的值
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 数组的操作 (增删改查)&lt;/p&gt;
&lt;p&gt;数组的索引:arr [索引]，索引从 0 开始计数&lt;/p&gt;
&lt;p&gt;数组的长度:arr.length&lt;br&gt;
 数组的遍历：遍历索引从 0-arr.length-1，通过 arr [索引] 拿到每一项的值&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法&#34;&gt;#&lt;/a&gt; 方法&lt;/h2&gt;
&lt;h3 id=&#34;1-增删改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-增删改&#34;&gt;#&lt;/a&gt; 1. 增删改&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;(1)增删改方法,改变原数组,返回值为长度或改变项
	push() ： 往最后添加项
	pop() ： 删除最后项
	unshift() ： 往前添加项
	shift() ： 删除最前项
	splice(startIdx,num,item) : 增、删、换
	reverse() : 数组倒序
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-传递与复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-传递与复制&#34;&gt;#&lt;/a&gt; 2. 传递与复制&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;(2)传递、复制方法,不改变原数组
	slice(startIdx,endIdx) : 截取数组
	join(&#39;拼接符&#39;) ： 数组拼接为字符串,默认逗号拼接
	concat(数组1,数组2,...) ： 合并数组,返回调用方法的新数组
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数组的排序算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的排序算法&#34;&gt;#&lt;/a&gt; 数组的排序算法&lt;/h2&gt;
&lt;h3 id=&#34;1冒泡排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1冒泡排序&#34;&gt;#&lt;/a&gt; 1. 冒泡排序&lt;/h3&gt;
&lt;p&gt;​	外层遍历的是轮数&lt;br&gt;
​	内层是每一轮，遍历当前索引，与索引 + 1 进行比较换位置。每一轮将一个最大的数排在最后&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; box&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2选择排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2选择排序&#34;&gt;#&lt;/a&gt; 2. 选择排序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;固定被比较的索引，与后面的每个索引对应的值进行比较&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外层循环是固定的被比较的索引 i：0-arr.length-2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内层循环是比较 i 的索引 j，从 i+1 到 arr.length 进行遍历&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;343&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3快速排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3快速排序&#34;&gt;#&lt;/a&gt; 3. 快速排序&lt;/h3&gt;
&lt;p&gt;（递归）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr=[1,9,2,23,10,55,33];
fastSort(arr);
function fastSort(arr)&amp;#123;
	if(arr.length&amp;lt;=1)&amp;#123;
		return arr;
	&amp;#125;
	var midIdx=parseInt(arr.length/2);
	var midNum=arr.splice(midIdx,1)[0];
	var ltArr=[];
	var gtArr=[];
	for(var i=0;i&amp;lt;arr.length;i++)&amp;#123;
		if(arr[i]&amp;lt;=midNum)&amp;#123;
			ltArr.push(arr[i]);
		&amp;#125;else if(arr[i]&amp;gt;midNum)&amp;#123;
			gtArr.push(arr[i]);
		&amp;#125;
	&amp;#125;
	return fastSort(ltArr).concat([midNum],fastSort(gtArr));
&amp;#125;
console.log(fastSort(arr));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4sort排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4sort排序&#34;&gt;#&lt;/a&gt; 4.sort () 排序&lt;/h3&gt;
&lt;p&gt;arr.sort () 将原数组中的元素排序，并返回排序后的数组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认以字符串的排列方式（转换成 ASCII 码进行对比)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sort (function (a,b){return a-b;}) 从小到大排序&lt;/p&gt;
&lt;p&gt;var res = arr.sort(function(a,b){&lt;br&gt;
//return 值&amp;gt; 0 a,b 互换&lt;br&gt;
 //return 值 &amp;lt;=0 不动&lt;br&gt;
 return a-b;&lt;br&gt;
});&lt;br&gt;
console.log(arr,res);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组的传递与复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的传递与复制&#34;&gt;#&lt;/a&gt; 数组的传递与复制&lt;/h2&gt;
&lt;h3 id=&#34;1传递&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1传递&#34;&gt;#&lt;/a&gt; 1. 传递&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本数据类型中，传递的是值 (数字，字符串，布尔类型，null,undefined)&lt;/li&gt;
&lt;li&gt;引用数据类型中，传递的是在堆中的地址 (数组，对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2复制&#34;&gt;#&lt;/a&gt; 2. 复制&lt;/h3&gt;
&lt;p&gt;基本数据类型：改变复制的值，不影响原值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = 10;
var b = a;//var b = 10
b = 30;
console.log(a,b);//10,30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引用数据类型：改变复制的值，会影响原值（浅复制）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [10,20,30];
var brr = arr;
brr[0] = 66;
console.log(arr,brr);//[66,20,30][66,20,30]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引用数据类型：改变复制的值，不影响原值（深复制）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 循环拷贝数组的每一项 (不适用多维数组)&lt;/li&gt;
&lt;li&gt;slice(0)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr = [10,20,30];
// var res = [];
// for(var i=0;i&amp;lt;arr.length;i++)&amp;#123;
// 	res.push(arr[i]);
// &amp;#125;
// console.log(res);//10,20,30
// res[0] = 40;
// console.log(arr,res);
//=======================================
var res = arr.slice(0);
res[0] = 40;
console.log(arr,res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多维数组&#34;&gt;#&lt;/a&gt; 多维数组&lt;/h2&gt;
&lt;p&gt;数组嵌套数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// var arr = [[&amp;quot;hzh&amp;quot;,&amp;quot;hyd&amp;quot;],[&amp;quot;lm&amp;quot;,&amp;quot;jh&amp;quot;],[&amp;quot;xw&amp;quot;,&amp;quot;rw&amp;quot;],[&amp;quot;lz&amp;quot;,&amp;quot;zlh&amp;quot;],[&amp;quot;hhm&amp;quot;,&amp;quot;dz&amp;quot;]];
var arr = [];
var brr = [];
var n = 0;
for(var i=1;i&amp;lt;=25;i++)&amp;#123;
	brr.push(i);
	n++;
	if(n % 5==0)&amp;#123;
		arr.push(brr);
		brr = [];
	&amp;#125;
&amp;#125;
console.log(arr);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;三-对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-对象&#34;&gt;#&lt;/a&gt; 三、对象&lt;/h1&gt;
&lt;h2 id=&#34;创建对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建对象&#34;&gt;#&lt;/a&gt; 创建对象&lt;/h2&gt;
&lt;p&gt;1. 字面量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = &amp;#123;
	name : &amp;quot;xiaofang&amp;quot;,
	age : 17,
	hobby : &amp;quot;学习&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj1 = new Object();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;对象的操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象的操作&#34;&gt;#&lt;/a&gt; 对象的操作&lt;/h2&gt;
&lt;p&gt;操作对象键对应的值&lt;/p&gt;
&lt;p&gt;obj. 键&lt;/p&gt;
&lt;p&gt;obj [“具题的键”] obj [变量]&lt;br&gt;
 对象的遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; for(var key in obj)&amp;#123;
	key代表键;
	obj[key]获取每个键对应的值
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于单个键值对而言，键是变量，值就是值&lt;/p&gt;
&lt;p&gt;对于整个对象而言，对象是变量，键是具体的属性&lt;/p&gt;
&lt;h3 id=&#34;1添加-修改属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1添加-修改属性&#34;&gt;#&lt;/a&gt; (1) 添加、修改属性&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;obj.sex = &#39;男&#39;;
obj[&#39;weight&#39;] = 60；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2删除属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2删除属性&#34;&gt;#&lt;/a&gt; (2) 删除属性&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var obj = &amp;#123;name:&#39;laoxie&#39;,age:18,gender:&#39;man&#39;&amp;#125;
//删除age属性
delete obj.age;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3读取属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3读取属性值&#34;&gt;#&lt;/a&gt; (3) 读取属性值&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;obj.name;//==&amp;gt;小明
//如果读取一个不存在的属性，返回undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4遍历对象forin&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4遍历对象forin&#34;&gt;#&lt;/a&gt; (4) 遍历对象 for…in&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    var obj = &amp;#123;name:&#39;laoxie&#39;，age:18，gender:&#39;男&#39;&amp;#125;；  
    for(var key in obj)&amp;#123;
        //遍历obj对象里面所有的键key,Obj[key]操作所有键对应的值。
        document.write(obj[key]);//分别输出：&#39;laoxie&#39;,18,&#39;男&#39;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组与对象的组合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组与对象的组合&#34;&gt;#&lt;/a&gt; 数组与对象的组合&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; [&amp;#123;
        id:&#39;001&#39;,
        name:&#39;iphone7 plugs&#39;,
        nickname:&#39;肾7&#39;,
        imgurl:&#39;img/ip7.jpg&#39;,
        price:5899.00,
        sale:5888.00,
        color:&#39;土豪金&#39;
    &amp;#125;,&amp;#123;
        id:&#39;002&#39;,
        name:&#39;Note7&#39;,
        nickname:&#39;爆炸7&#39;,
        imgurl:&#39;img/note7.jpg&#39;,
        price:3899.00,
        sale:998.00,
        color:&#39;黑色&#39;
    &amp;#125;,&amp;#123;
        id:&#39;003&#39;,
        name:&#39;荣耀7&#39;,
        nickname:&#39;牛x7&#39;,
        imgurl:&#39;img/honor7.jpg&#39;,
        price:1999.00,
        sale:1899.00,
        color:&#39;白色&#39;
    &amp;#125;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;四-es5数组新增方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-es5数组新增方法&#34;&gt;#&lt;/a&gt; 四、ES5 数组新增方法&lt;/h1&gt;
&lt;h2 id=&#34;迭代遍历方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代遍历方法&#34;&gt;#&lt;/a&gt; 迭代（遍历）方法&lt;/h2&gt;
&lt;h3 id=&#34;1-foreach&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-foreach&#34;&gt;#&lt;/a&gt; 1. forEach()&lt;/h3&gt;
&lt;p&gt;forEach (function (item,idx,arr){})  遍历数组，与 for 循环没有太大差别，比 for 循环方便&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;item 代表数组中的每一项&lt;/li&gt;
&lt;li&gt;idx 代表索引&lt;/li&gt;
&lt;li&gt;arr 代表当前数组&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
for(var i=0;i&amp;lt;arr.length;i++)&amp;#123;
	console.log(arr[i]);
&amp;#125;
arr.forEach(function(item,idx,arr)&amp;#123;
	console.log(item,idx,arr);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2map&#34;&gt;#&lt;/a&gt; 2.map()&lt;/h3&gt;
&lt;p&gt;map (function (item,idx,arr){return ;})  返回一个数量相等的数组，内容是什么取决于在 fn 中的返回值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.map(function(item,idx,arr)&amp;#123;
			console.log(item);
			return item*2;
		&amp;#125;)
		console.log(res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3filter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3filter&#34;&gt;#&lt;/a&gt; 3.filter()&lt;/h3&gt;
&lt;p&gt;filter (function (item,idx,arr){}) 返回一个数组，存放执行 fn 后返回 true 的数组元素 (过滤)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.filter(function(item,idx,arr)&amp;#123;
			return item&amp;gt;55;
		&amp;#125;)
		console.log(res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4some&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4some&#34;&gt;#&lt;/a&gt; 4.some()&lt;/h3&gt;
&lt;p&gt;some (function (item,idx,arr){}) 返回布尔值，如果 fn 对数组任何一项返回 true，则返回 true。&lt;/p&gt;
&lt;p&gt;查找数组中是否有满足条件的项。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.some(function(item,idx,arr)&amp;#123;
			console.log(idx);//0
			return item&amp;gt;666;//777&amp;gt;666直到找到true就不再遍历
		&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5every&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5every&#34;&gt;#&lt;/a&gt; 5.every()&lt;/h3&gt;
&lt;p&gt;every (function (item,idx,arr){}) 返回布尔值，若 fn 对数组中有一项返回 false，则返回 false&lt;/p&gt;
&lt;p&gt;检查数组所有项，是否都满足条件，是则返回 true，否则返回 false。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.every(function(item,idx,arr)&amp;#123;
			return item&amp;gt;666;
		&amp;#125;)
		console.log(res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;归并方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#归并方法&#34;&gt;#&lt;/a&gt; 归并方法&lt;/h2&gt;
&lt;h3 id=&#34;reducefninitval&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reducefninitval&#34;&gt;#&lt;/a&gt; reduce(fn,initVal)&lt;/h3&gt;
&lt;p&gt;fn(prev,current,idx,arr)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prev: fn 上一次执行的返回值，第一次为 initVal，若 initVal 没有定义，为数组的第一个元素值&lt;/li&gt;
&lt;li&gt;current: 当前索引对应的值&lt;/li&gt;
&lt;li&gt;idx: 当前索引&lt;/li&gt;
&lt;li&gt;arr: 数组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用： 数组求和&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//对数组求和
var res = arr.reduce(function(prev,current,idx,arr)&amp;#123;
	return prev+current;
&amp;#125;,0);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reducerightfninitval&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reducerightfninitval&#34;&gt;#&lt;/a&gt; reduceRight(fn,initVal)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fn (prev,cur,index,array): fn 是每一项调用的函数，函数接受 4 个参数分别是
&lt;ul&gt;
&lt;li&gt;prev：函数上一次的返回值。（第一次的值参考 initVal）&lt;/li&gt;
&lt;li&gt;cur：当前值，&lt;/li&gt;
&lt;li&gt;index：索引值，&lt;/li&gt;
&lt;li&gt;array：当前数组，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数需要返回一个值，这个值会在下一次迭代中作为 prev 的值&lt;/li&gt;
&lt;li&gt;initVal: 迭代初始值（可省略），如果缺省，prev 的值为数组第一项&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;静态方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态方法&#34;&gt;#&lt;/a&gt; 静态方法&lt;/h2&gt;
&lt;p&gt;只能由构造函数自己去调用&lt;/p&gt;
&lt;h3 id=&#34;arrayisarray&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arrayisarray&#34;&gt;#&lt;/a&gt; Array.isArray()&lt;/h3&gt;
&lt;p&gt;Array.isArray () 判断是否为数组，返回布尔值&lt;/p&gt;
&lt;h2 id=&#34;索引方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#索引方法&#34;&gt;#&lt;/a&gt; 索引方法&lt;/h2&gt;
&lt;h3 id=&#34;indexoflastindexofa3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#indexoflastindexofa3&#34;&gt;#&lt;/a&gt; indexOf/lastIndexOf(“a”,3)&lt;/h3&gt;
&lt;p&gt;indexOf (keyword [,startIdx]) 返回 keyword 所在数组中的索引值；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果数组不存在 keyword，则返回 - 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;startIdx 规定开始查找的索引值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用：判断数组中是否存在某个值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr=[10,20,50,40,50]
console.log(arr.indexOf(50))
//2
console.log(arr.indexOf(50,3))
//4
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;五-字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-字符串&#34;&gt;#&lt;/a&gt; 五、字符串&lt;/h1&gt;
&lt;p&gt;1. 定义：字符串就是一串字符，由双（单）引号括起来&lt;/p&gt;
&lt;p&gt;2. 创建字符串&lt;/p&gt;
&lt;p&gt;​	字面量 var str=“hello”&lt;/p&gt;
&lt;p&gt;​	构造函数 var str=new String (“hello”);&lt;/p&gt;
&lt;p&gt;3. 字符串的操作&lt;/p&gt;
&lt;p&gt;​	字符串的长度 str.length&lt;/p&gt;
&lt;p&gt;​	字符串的索引 str [索引]   ==&amp;gt;es5&lt;/p&gt;
&lt;p&gt;​	str.charAt (索引)&lt;/p&gt;
&lt;p&gt;4. 字符串的方法&lt;/p&gt;
&lt;p&gt;（1）split (分隔符)，将字符串根据分隔符，拆分成数组。原字符串不变&lt;/p&gt;
&lt;p&gt;（2）replace (需要被替换的字符，替换后的字符)，字符串的替换方法。原字符串不变&lt;/p&gt;
&lt;p&gt;（3）slice (start [,end]) 字符串的截取方法，截取 start 到 end，不包括 end 的字符串，支持负数&lt;/p&gt;
&lt;p&gt;substring (start [,end]) 与 slice 一样，但不支持负数&lt;/p&gt;
&lt;p&gt;substr (start [,len]) 支持负数，len 为截取的数量&lt;/p&gt;
&lt;p&gt;（4）字符串大小写转换&lt;/p&gt;
&lt;p&gt;toLowerCase ()  转换成小写&lt;/p&gt;
&lt;p&gt;toUpperCase ()  转换成大写&lt;/p&gt;
&lt;p&gt;（5）trim () 删除前后所有空格，返回新的字符串 (es5)&lt;/p&gt;
&lt;p&gt;5. 字符与字符编码&lt;/p&gt;
&lt;h1 id=&#34;六-正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-正则表达式&#34;&gt;#&lt;/a&gt; 六、正则表达式&lt;/h1&gt;
&lt;p&gt;1. 字面量创建&lt;/p&gt;
&lt;p&gt;/ 字符串 /&lt;/p&gt;
&lt;p&gt;例如：var reg = / 傻逼 /&lt;/p&gt;
&lt;p&gt;​	g 全局匹配&lt;/p&gt;
&lt;p&gt;​	i 不区分大小写&lt;/p&gt;
&lt;p&gt;2. 构造函数创建&lt;/p&gt;
&lt;p&gt;​	new RegExp (“字符串”,“gi”)&lt;/p&gt;
&lt;p&gt;​	new RegExp (变量，“gi”)&lt;/p&gt;
&lt;h1 id=&#34;七-math&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-math&#34;&gt;#&lt;/a&gt; 七、Math&lt;/h1&gt;
&lt;p&gt;1. 概念：一个保存数学公式和信息的对象&lt;/p&gt;
&lt;p&gt;2. 属性：&lt;/p&gt;
&lt;p&gt;Math.PI		π  3.1415926…&lt;/p&gt;
&lt;p&gt;3. 方法：&lt;/p&gt;
&lt;p&gt;Math.random ()  // 返回 0-1 之间的随机数（不包括 1）&lt;/p&gt;
&lt;p&gt;Math.round ()  // 四舍五入&lt;/p&gt;
&lt;p&gt;Math.ceil ()  // 向上取整&lt;/p&gt;
&lt;p&gt;Math.floor ()  // 向下取整&lt;/p&gt;
&lt;p&gt;Math.max (num1,num2,…) // 最大的数&lt;/p&gt;
&lt;p&gt;Math.min (num1,num2,…) // 最小的数&lt;/p&gt;
&lt;p&gt;Math.abs () // 绝对值&lt;/p&gt;
&lt;p&gt;Math.pow (x,y)  //x 的 y 次方&lt;/p&gt;
&lt;h1 id=&#34;八-date&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#八-date&#34;&gt;#&lt;/a&gt; 八、Date&lt;/h1&gt;
&lt;h2 id=&#34;创建日期时间对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建日期时间对象&#34;&gt;#&lt;/a&gt; 创建日期时间对象&lt;/h2&gt;
&lt;p&gt;构造函数 new Date ();&lt;/p&gt;
&lt;p&gt;不带参数，得到的是代码执行时的时间（本地时间）&lt;/p&gt;
&lt;p&gt;带参数：字符串，指定日期；数字，指定毫秒数（距离纪元时间的毫秒数）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();//代码运行时的本地时间
var d=new Date(&amp;quot;2017/10/10 12:00:00&amp;quot;);
var d=new Date(2000); //距离纪元时间的毫秒数
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;时间日期对象的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时间日期对象的方法&#34;&gt;#&lt;/a&gt; 时间日期对象的方法&lt;/h2&gt;
&lt;p&gt;1. 获取方法&lt;/p&gt;
&lt;p&gt;获取年月日&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();
var year=d.getFullYear();//2019
var month=d.getMonth(); //月份0-11，得到的月份记得+1才是真实月份;
var date=d.getDate()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取星期&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();
var day=d.getDay();  //0-6:星期天-星期六
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取时分秒&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();
var hour=d.getHours();
var minute=d.getMinutes();
var second=d.getSeconds();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;date.getTime (); 获取距离纪元时间的毫秒数&lt;/p&gt;
&lt;h2 id=&#34;静态方法-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态方法-2&#34;&gt;#&lt;/a&gt; 静态方法&lt;/h2&gt;
&lt;p&gt;Date.parse (“2015-08-24”)// 返回指定日期距 1970-1-1 零时的毫秒数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：转换格式默认支持 2015-08-24 或 2015/08/24&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Date.now ();// 返回执行这行代码时距 1970-1-1 零时的毫秒数&lt;/p&gt;
&lt;h2 id=&#34;定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定时器&#34;&gt;#&lt;/a&gt; 定时器&lt;/h2&gt;
&lt;p&gt;1.var timer=setInterval (function (){}, 毫秒数)；每隔多少毫秒执行一次函数&lt;/p&gt;
&lt;p&gt;2.setTimeout (function (){}, 毫秒数)；延迟多少毫秒执行函数，只执行一次&lt;/p&gt;
&lt;p&gt;3.clearInterval (timer)；清除指定 id 标识的定时器操作&lt;/p&gt;
&lt;p&gt;4.clearTimeout (timer)；清除指定 id 标识的延迟操作&lt;/p&gt;
&lt;h1 id=&#34;九-bom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#九-bom&#34;&gt;#&lt;/a&gt; 九、BOM&lt;/h1&gt;
&lt;h2 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;BOM 是 Browser Object Model（浏览器对象模型）的缩写，提供与浏览器窗口进行交互的对象。JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C, 而 BOM 缺乏标准。这也是各种浏览器不兼容的根源所在；&lt;/p&gt;
&lt;p&gt;1.window 对象&lt;/p&gt;
&lt;p&gt;window 对象是 BOM 的核心，是最顶层的对象，所有对象都是通过它延伸出来的&lt;/p&gt;
&lt;p&gt;2. 全局作用域下定义的变量都是 window 对象的属性；&lt;/p&gt;
&lt;p&gt;尽量避免声明全局变量，减少命名冲突，避免全局污染；&lt;/p&gt;
&lt;p&gt;在函数内部不用 var 声明的变量会成为全局变量，即 window 对象的属性&lt;/p&gt;
&lt;p&gt;window 对象可以在代码中省略，如 window.alert () 可以写成 alert ();&lt;/p&gt;
&lt;p&gt;delete 不能删除全局变量；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = &amp;#123;name:&#39;xxx&#39;&amp;#125;

//删除对象的属性用delete：
delete obj.name;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;window对象下的属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#window对象下的属性&#34;&gt;#&lt;/a&gt; window 对象下的属性&lt;/h2&gt;
&lt;p&gt;1. 浏览器窗口尺寸&lt;/p&gt;
&lt;p&gt;innerWidth/innerHeight, // 表示浏览器窗口” 可视区域” 尺寸&lt;/p&gt;
&lt;p&gt;outerWidth/outerHeight// 表示整个浏览器窗口的尺寸&lt;/p&gt;
&lt;p&gt;2. 滚动相关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scrollX/scrollY// 获取浏览器窗口滚动条滚动过的距离&lt;/li&gt;
&lt;li&gt;scrollTo (x,y) // 设置浏览器滚动距离&lt;/li&gt;
&lt;li&gt;scrollBy (xnum,ynum) // 设置基于当前位置滚动的距离，可以为负数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;window的常用事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#window的常用事件&#34;&gt;#&lt;/a&gt; window 的常用事件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;onload // 页面资源全部加载完成后触发这个事件（开发中不常用）（document.addEventListener (“DOMContentLoaded”,function (){})）&lt;/li&gt;
&lt;li&gt;onscroll// 窗口滚动条滚动时触发&lt;/li&gt;
&lt;li&gt;onresize // 窗口大小改变时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统弹窗&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统弹窗&#34;&gt;#&lt;/a&gt; 系统弹窗&lt;/h2&gt;
&lt;h3 id=&#34;1alertmsg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1alertmsg&#34;&gt;#&lt;/a&gt; 1.alert(msg)&lt;/h3&gt;
&lt;p&gt;// 弹出对话框&lt;/p&gt;
&lt;h3 id=&#34;2confirmmsg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2confirmmsg&#34;&gt;#&lt;/a&gt; 2.confirm(msg)&lt;/h3&gt;
&lt;p&gt;// 弹出警告弹窗，返回布尔值&lt;/p&gt;
&lt;h3 id=&#34;3promptmsgdefault&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3promptmsgdefault&#34;&gt;#&lt;/a&gt; 3.prompt(msg,default)&lt;/h3&gt;
&lt;p&gt;// 弹出输入框，返回消息或 null&lt;/p&gt;
&lt;p&gt;以上三个方法都会暂停代码的执行&lt;/p&gt;
&lt;h3 id=&#34;4openurlnameoptions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4openurlnameoptions&#34;&gt;#&lt;/a&gt; 4.open(url,name,[options])&lt;/h3&gt;
&lt;p&gt;打开一个新窗口并返回新 window 对象&lt;/p&gt;
&lt;p&gt;name: 不命名会每次打开新窗口，命名的第一次打开新窗口，之后在这个窗口中加载&lt;/p&gt;
&lt;p&gt;options 为字符串：width=400,height=400,top=200,left=200’&lt;/p&gt;
&lt;p&gt;opener 父窗口对象，通过 open 方法打开的窗口才有 opener 对象&lt;/p&gt;
&lt;h3 id=&#34;5close&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5close&#34;&gt;#&lt;/a&gt; 5.close():&lt;/h3&gt;
&lt;p&gt;关闭窗口&lt;/p&gt;
&lt;h3 id=&#34;6print&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6print&#34;&gt;#&lt;/a&gt; 6.print():&lt;/h3&gt;
&lt;p&gt;调出打印对话框&lt;/p&gt;
&lt;h2 id=&#34;属性对象-location&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性对象-location&#34;&gt;#&lt;/a&gt; 属性对象 location&lt;/h2&gt;
&lt;p&gt;location 是 BOM 最有用的对象之一，保存着当前窗口中加载文档的相关信息，还提供一些导航功能，它是个很特别的对象，既是 window 的属性，也是 document 的属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var src=https://www.baidu.com/s?wd=yangmi
location.href=&#39;整个网址/src&#39;
location.hash=&#39;#后面的字符&#39;
location.search=&#39;?wd=yangmi&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十-dom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十-dom&#34;&gt;#&lt;/a&gt; 十、DOM&lt;/h1&gt;
&lt;h2 id=&#34;概念-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-3&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;DOM 是 Document Object Model（文档对象模型）的缩写，它是 W3C 国际组织的一套 Web 标准。是针对 HTML 和 XML 文档的一个 API，它定义了访问 HTML 文档对象的一套属性、方法和事件。&lt;/p&gt;
&lt;p&gt;1. 节点&lt;/p&gt;
&lt;p&gt;元素节点&lt;/p&gt;
&lt;p&gt;属性节点&lt;/p&gt;
&lt;p&gt;文本节点&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;bb&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;bilibili&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;//此处4个节点，1元素，2属性，1文本&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;获取元素节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取元素节点&#34;&gt;#&lt;/a&gt; 获取元素节点&lt;/h2&gt;
&lt;h3 id=&#34;1通过id名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1通过id名&#34;&gt;#&lt;/a&gt; 1. 通过 id 名&lt;/h3&gt;
&lt;p&gt;document.getElementById (“id 名”)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 ID 获取元素的节点（速度最快）&lt;/li&gt;
&lt;li&gt;必须通过 document 调用&lt;/li&gt;
&lt;li&gt;返回 DOM 节点对象，如果 id 不存在返回 null&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2通过类名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2通过类名&#34;&gt;#&lt;/a&gt; 2. 通过类名&lt;/h3&gt;
&lt;p&gt;getElementsByClassName (“类名”); // 通过类名获取；可以通过其他元素节点获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 class 类名获取节点列表&lt;/li&gt;
&lt;li&gt;返回类数组，如果类名不存在返回空数组 []&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var box=document.getElementById(&amp;quot;box&amp;quot;);
var bb=box.getElementsByClassName(&amp;quot;bb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3通过标签名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3通过标签名&#34;&gt;#&lt;/a&gt; 3. 通过标签名&lt;/h3&gt;
&lt;p&gt;getElementByTagName (“标签名”)；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过标签名获取元素节点列表&lt;/li&gt;
&lt;li&gt;返回类数组，如果 tagname 不存在返回空数组 []&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4通过name属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4通过name属性&#34;&gt;#&lt;/a&gt; 4. 通过 name 属性&lt;/h3&gt;
&lt;p&gt;document.getElementsByName()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 name 属性获取元素节点列表&lt;/li&gt;
&lt;li&gt;必须通过 document 调用&lt;/li&gt;
&lt;li&gt;返回类数组，如果 name 属性不存在返回空数组 []&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：如果确认元素存在，但是返回 null 或 []，一定是代码执行顺序的问题&lt;/p&gt;
&lt;h3 id=&#34;5利用节点关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5利用节点关系&#34;&gt;#&lt;/a&gt; 5. 利用节点关系，&lt;/h3&gt;
&lt;p&gt;获取其他节点（包含文本节点）&lt;/p&gt;
&lt;h4 id=&#34;获取父级节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取父级节点&#34;&gt;#&lt;/a&gt; 获取父级节点&lt;/h4&gt;
&lt;p&gt;ele.parentNode  // 得到节点的父节点&lt;/p&gt;
&lt;h4 id=&#34;获取子节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取子节点&#34;&gt;#&lt;/a&gt; 获取子节点&lt;/h4&gt;
&lt;p&gt;ele.childNodes  // 得到 ele 元素的全部子节点列表（类数组）&lt;/p&gt;
&lt;p&gt;ele.firstChild  // 获得 ele 元素的第一个子节点&lt;/p&gt;
&lt;p&gt;ele.lastChild  // 获得 ele 元素的最后一个子节点&lt;/p&gt;
&lt;h4 id=&#34;获取兄弟节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取兄弟节点&#34;&gt;#&lt;/a&gt; 获取兄弟节点&lt;/h4&gt;
&lt;p&gt;ele.nextSibling  // 获得 ele 元素的下一个兄弟节点&lt;/p&gt;
&lt;p&gt;ele.previousSibling  // 获得 ele 元素的上一个兄弟节点&lt;/p&gt;
&lt;h3 id=&#34;6节点的三个属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6节点的三个属性&#34;&gt;#&lt;/a&gt; 6. 节点的三个属性&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;nodeType&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;nodeName&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;nodeValue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1. 元素节点&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;标签名大写&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2. 属性节点&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;属性名&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3. 文本节点&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#text&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文本内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7利用元素节点关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7利用元素节点关系&#34;&gt;#&lt;/a&gt; 7. 利用元素节点关系&lt;/h3&gt;
&lt;h4 id=&#34;获取父级节点元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取父级节点元素&#34;&gt;#&lt;/a&gt; 获取父级节点元素&lt;/h4&gt;
&lt;p&gt;parentElement&lt;/p&gt;
&lt;h4 id=&#34;获取子级元素节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取子级元素节点&#34;&gt;#&lt;/a&gt; 获取子级元素节点&lt;/h4&gt;
&lt;p&gt;children 获取元素的全部子元素&lt;/p&gt;
&lt;p&gt;firstElementChild 获取第一个子元素&lt;/p&gt;
&lt;p&gt;lastElementChild 获取最后一个子元素&lt;/p&gt;
&lt;h4 id=&#34;获取兄弟元素节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取兄弟元素节点&#34;&gt;#&lt;/a&gt; 获取兄弟元素节点&lt;/h4&gt;
&lt;p&gt;nextElementSibling 获取下一个元素&lt;/p&gt;
&lt;p&gt;previousElementSibling 获取上一个元素&lt;/p&gt;
&lt;h3 id=&#34;8节点的创建与插入方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8节点的创建与插入方法&#34;&gt;#&lt;/a&gt; 8. 节点的创建与插入方法&lt;/h3&gt;
&lt;p&gt;创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;document.createElement () 创建一个元素节点&lt;/li&gt;
&lt;li&gt;document.createTextNode () 创建一个文本节点&lt;/li&gt;
&lt;li&gt;document.createAttribute () 创建一个属性节点（了解）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;插入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parent.appendChild ()  向节点的子节点列表的结尾添加新的子节点&lt;/li&gt;
&lt;li&gt;parent.insertBefore (new,node)  在指定的子节点 node 前插入新的子节点 new。&lt;/li&gt;
&lt;li&gt;ele.setAttributeNode (attrNode) 在指定元素中插入一个属性节点（了解）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对页面已存在节点的处理&lt;/p&gt;
&lt;p&gt;复制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cloneNode (boolean)  复制节点，为 true 是深复制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parent.removeChild (ele)  删除（并返回）当前节点 parent 的指定子节点 ele。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parent.hasChildNodes () 判断当前节点是否拥有子节点，返回布尔值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;元素节点对象的属性及方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素节点对象的属性及方法&#34;&gt;#&lt;/a&gt; 元素节点（对象）的属性及方法&lt;/h2&gt;
&lt;h3 id=&#34;1常用属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1常用属性&#34;&gt;#&lt;/a&gt; 1. 常用属性&lt;/h3&gt;
&lt;p&gt;可以通过点语法或方括号访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tagName 获取元素元素的标签名&lt;/li&gt;
&lt;li&gt;id 设置 / 获取元素 id 属性&lt;/li&gt;
&lt;li&gt;name 设置 / 获取元素 name 属性&lt;/li&gt;
&lt;li&gt;style 设置 / 获取元素的内联样式&lt;/li&gt;
&lt;li&gt;className 设置 / 获取元素的 class 属性&lt;/li&gt;
&lt;li&gt;innerHTML 设置 / 获取元素的内容（包含 html 代码）&lt;/li&gt;
&lt;li&gt;outerHTML 设置或获取元素及其内容（包含 html 代码）&lt;/li&gt;
&lt;li&gt;innerText 设置或获取位于元素标签内的文本&lt;/li&gt;
&lt;li&gt;outerText 设置 (包括标签) 或获取 (不包括标签) 元素的文本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2元素方法修改html属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2元素方法修改html属性&#34;&gt;#&lt;/a&gt; 2. 元素方法（修改 html 属性）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ele.getAttribute (attr) // 获取元素的属性值（自定义属性获取）&lt;/li&gt;
&lt;li&gt;ele.setAttribute (attr,val); // 设置元素的属性&lt;/li&gt;
&lt;li&gt;ele.removeAttribute (attr) // 删除属性 attr&lt;/li&gt;
&lt;li&gt;ele.hasAttribute (attr) // 判断是否存在属性 attr&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3盒模型相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3盒模型相关&#34;&gt;#&lt;/a&gt; 3. 盒模型相关&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;offsetTop: 当前元素离&amp;lt;定位父级&amp;gt;元素顶部的距离。
offsetLeft: 当前元素离&amp;lt;定位父级&amp;gt;元素左边的距离。
	以上两个属性如果没定位的父级，则相对于根元素html的距离
offsetWidth: 当前元素的宽度（border + padding + content）
offsetHeight: 当前元素的高度（border + padding + content）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;table对象了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#table对象了解&#34;&gt;#&lt;/a&gt; table 对象 (了解)&lt;/h2&gt;
&lt;h3 id=&#34;1-table对象属性方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-table对象属性方法&#34;&gt;#&lt;/a&gt; 1. table 对象属性 &amp;amp; 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rows 返回包含表格中所有行的一个数组&lt;/li&gt;
&lt;li&gt;tBodies 返回包含表格中所有 tbody 的一个数组&lt;/li&gt;
&lt;li&gt;insertRow (index) 在表格中插入一个新行。&lt;/li&gt;
&lt;li&gt;deleteRow (index) 从表格删除一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-tr对象属性方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-tr对象属性方法&#34;&gt;#&lt;/a&gt; 2. tr 对象属性 &amp;amp; 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cells 返回包含表格中所有单元格的一个数组&lt;/li&gt;
&lt;li&gt;rowIndex 返回该行在表中的位置&lt;/li&gt;
&lt;li&gt;sectionRowIndex 返回在 tBody 、tHead 或 tFoot 中行的位置。&lt;/li&gt;
&lt;li&gt;insertCell (index) 在一行中的指定位置插入一个空的列&lt;/li&gt;
&lt;li&gt;deleteCell (index) 删除行中的指定的单元格&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-tdth对象属性方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-tdth对象属性方法&#34;&gt;#&lt;/a&gt; 3. td/th 对象属性 &amp;amp; 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cellIndex 返回单元格在表格行的单元格集合中的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;十一-事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十一-事件&#34;&gt;#&lt;/a&gt; 十一、事件&lt;/h1&gt;
&lt;h2 id=&#34;鼠标事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#鼠标事件&#34;&gt;#&lt;/a&gt; 鼠标事件&lt;/h2&gt;
&lt;p&gt;onclick 当用户点击某个对象时调用的事件。&lt;/p&gt;
&lt;p&gt;ondblclick 当用户双击某个对象时调用的事件。&lt;/p&gt;
&lt;p&gt;onmousedown 鼠标按钮被按下。&lt;/p&gt;
&lt;p&gt;onmouseup 鼠标按键被松开。&lt;/p&gt;
&lt;p&gt;onmouseover 鼠标移到某元素之上。&lt;/p&gt;
&lt;p&gt;onmouseout 鼠标从某元素移开。&lt;/p&gt;
&lt;p&gt;onmousemove 鼠标被移动时触发。&lt;/p&gt;
&lt;p&gt;onmouseenter 在鼠标光标从元素外部移动到元素范围之内时触发。这个事件不冒泡&lt;/p&gt;
&lt;p&gt;onmouseleave 在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡&lt;/p&gt;
&lt;p&gt;oncontextmenu 鼠标右键菜单展开时触发&lt;/p&gt;
&lt;p&gt;PS：click = mousedown + mouseup, dblclick = click*2 (短时间内两次单击);&lt;br&gt;
 执行顺序：mouseover=&amp;gt;mouseenter; mouseout =&amp;gt; mouseleave&lt;/p&gt;
&lt;h2 id=&#34;事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件对象&#34;&gt;#&lt;/a&gt; 事件对象&lt;/h2&gt;
&lt;p&gt;事件执行过程中的状态，用来保存当前事件的信息的对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ele.事件 = function(e)&amp;#123;
	e = e || window.event;//获取event对象的兼容写法。IE8-：window.event
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;兼容性代码：e=e||window.event&lt;/p&gt;
&lt;p&gt;// 标准浏览器：e&lt;/p&gt;
&lt;p&gt;//ie8：false ||window.event ==&amp;gt;window.event&lt;/p&gt;
&lt;h3 id=&#34;1事件对象的属性与鼠标相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1事件对象的属性与鼠标相关&#34;&gt;#&lt;/a&gt; 1. 事件对象的属性（与鼠标相关）&lt;/h3&gt;
&lt;p&gt;e.button&lt;/p&gt;
&lt;p&gt;当事件被触发时，返回哪个鼠标按钮被点击&lt;/p&gt;
&lt;p&gt;W3C 标准：0 代表鼠标按下左键；1 代表按下了滚轮；2 代表按下了右键；&lt;/p&gt;
&lt;p&gt;IE8：1 鼠标左键，2 鼠标右键，3 左右同时按，4 滚轮，5 左键加滚轮，6 右键加滚轮，7 三个同时；&lt;/p&gt;
&lt;h3 id=&#34;2光标位置信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2光标位置信息&#34;&gt;#&lt;/a&gt; 2. 光标位置信息&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;e.clientX /e.clientY 光标相对于浏览器可视区域的位置，也就是浏览器坐标。
e.screenX/e.screenY 光标指针相对于电脑屏幕的水平/垂直坐标。
e.pageX/e.pageY:鼠标相对于文档的位置。
	* 包括滚动条滚动的距离，即：e.clientX+window.scrollX
	* IE8-不支持
	e.offsetX,e.offsetY: 光标相对于事件源对象的相对偏移量。
	* 事件源对象：触发事件的对象
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;键盘事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#键盘事件&#34;&gt;#&lt;/a&gt; 键盘事件&lt;/h2&gt;
&lt;p&gt;onkeydown 某个键盘按键被按下。&lt;br&gt;
onkeyup 某个键盘按键被松开。&lt;br&gt;
onkeypress 键盘 &amp;lt;字符键&amp;gt; 被按下触发，而且如果按住不放的话，会重复触发此事件。&lt;/p&gt;
&lt;p&gt;1. 事件 对象的属性（与键盘相关）&lt;/p&gt;
&lt;p&gt;（1）which/keyCode&lt;/p&gt;
&lt;p&gt;对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码 (ascii 码)&lt;/p&gt;
&lt;p&gt;对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。&lt;/p&gt;
&lt;p&gt;兼容代码：e.which=e.which||e.keyCode&lt;/p&gt;
&lt;p&gt;（2）altKey 当事件被触发时，ALT 键是否被按下，返回值为布尔值&lt;/p&gt;
&lt;p&gt;（3）ctrlKey 当事件被触发时 CTRL 键是否被按下&lt;/p&gt;
&lt;p&gt;（4）shiftKey 当事件被触发时，Shift 键是否被按下；&lt;/p&gt;
&lt;h2 id=&#34;阻止浏览器的默认行为&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#阻止浏览器的默认行为&#34;&gt;#&lt;/a&gt; 阻止浏览器的默认行为&lt;/h2&gt;
&lt;p&gt;1. 阻止右键鼠标的默认行为&lt;/p&gt;
&lt;p&gt;oncontextmenu&lt;/p&gt;
&lt;p&gt;2. 文本的选择&lt;/p&gt;
&lt;p&gt;3. 表单的提交&lt;/p&gt;
&lt;p&gt;4. 链接的跳转&lt;/p&gt;
&lt;p&gt;标准： event.preventDefault ();&lt;/p&gt;
&lt;p&gt;IE8-: event.returnValue=false;&lt;/p&gt;
&lt;p&gt;兼容：event.preventDefault? event.preventDefault ():event.returnValue=false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		//1.全局阻止
		// document.oncontextmenu=function(e)&amp;#123;
		// 	e.preventDefault();
		// &amp;#125;
		//2.元素内阻止
		// var box=document.getElementById(&#39;box&#39;);
		// box.oncontextmenu=function(e)&amp;#123;
		// 	e.preventDefault();
		// &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;事件冒泡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件冒泡&#34;&gt;#&lt;/a&gt; 事件冒泡&lt;/h2&gt;
&lt;h3 id=&#34;什么是事件冒泡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是事件冒泡&#34;&gt;#&lt;/a&gt; 什么是事件冒泡：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个对象上触发某类事件（如 onclick 事件），那么 click 事件就会沿着 DOM 树向这个对象的父级传播，从里到外，直至它被处理程序处理，或者事件到达了最顶层（document/window）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;演示从里到外的元素添加相同的事件查看事件冒泡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#演示从里到外的元素添加相同的事件查看事件冒泡&#34;&gt;#&lt;/a&gt; 演示：从里到外的元素添加相同的事件，查看事件冒泡&lt;/h4&gt;
&lt;p&gt;1）不是所有的事件都能冒泡。&lt;/p&gt;
&lt;p&gt;​	以下事件不冒泡：blur、focus、load、unload…。&lt;/p&gt;
&lt;p&gt;​	【onmouseover 与 onmouseenter 的区别】&lt;/p&gt;
&lt;p&gt;2）冒泡到最顶层的目标不同。大部分浏览器到 window 对象，IE8 - 到 document 对象&lt;/p&gt;
&lt;h3 id=&#34;停止事件的传播&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#停止事件的传播&#34;&gt;#&lt;/a&gt; 停止事件的传播&lt;/h3&gt;
&lt;p&gt;兼容：e.stopPropagation?e.stopPropagation ():e.cancelBubble = true;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 标准：event.stopPropagation(); 
 IE8-：event.cancelBubble = true; 
 // 阻止事件冒泡兼容写法：
 if(e.stopPropagation)&amp;#123;
 	e.stopPropagation();
 &amp;#125;else&amp;#123;
	e.cancelBubble = true;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;事件委托&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件委托&#34;&gt;#&lt;/a&gt; 事件委托&lt;/h3&gt;
&lt;p&gt;​	利用事件冒泡原理，把本来绑定给某个元素的事件委托给它的父级（已经存在页面元素）处理。&lt;/p&gt;
&lt;h4 id=&#34;事件源对象触发事件的元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件源对象触发事件的元素&#34;&gt;#&lt;/a&gt; 事件源对象：触发事件的元素&lt;/h4&gt;
&lt;p&gt;标准：event.target&lt;br&gt;
IE8-：event.srcElement&lt;/p&gt;
&lt;p&gt;兼容：e.target=e.target || e.srcElement;&lt;/p&gt;
&lt;h4 id=&#34;案例表格删除当前行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#案例表格删除当前行&#34;&gt;#&lt;/a&gt; 案例：表格删除当前行&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;//影响页面性能的三大操作：
	//* 事件数量
	//* dom节点操作次数
	//* 请求次数
output.onclick = function(e)&amp;#123;	
	//兼容性问题
    e = e || window.event;
    var target = e.target || e.srcElement;
    if(target.className === &#39;btnDel&#39;)&amp;#123;
    	//this指的是谁?
        var currentTr = target.parentNode.parentNode;
        currentTr.parentNode.removeChild(currentTr);
    &amp;#125;else if(target.className === &#39;btnCopy&#39;)&amp;#123;
        var currentTr = target.parentNode.parentNode;
        currentTr.parentNode.appendChild(currentTr.cloneNode(true));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;事件捕获&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件捕获&#34;&gt;#&lt;/a&gt; 事件捕获&lt;/h2&gt;
&lt;p&gt;从 DOM 树顶端到当前元素，执行事件。&lt;/p&gt;
&lt;h2 id=&#34;绑定事件的方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绑定事件的方式&#34;&gt;#&lt;/a&gt; 绑定事件的方式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;//（1）作为html属性
//		&amp;lt;div onclick=&amp;quot;sum()&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 不常用，不实用。
//（2）DOM节点绑定
//		*同一元素的同名事件会被覆盖
//  	*事件处理函数只能冒泡阶段执行
//		div.onclick = function()&amp;#123;&amp;#125;
//（3）事件监听器
//		addEventListener(事件,function()&amp;#123;&amp;#125;[,是否捕获])
//		默认false冒泡不捕获，true捕获
//		*同名事件不会被覆盖
//  	*事件处理函数默认冒泡阶段执行
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;事件监听器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件监听器&#34;&gt;#&lt;/a&gt; 事件监听器&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;//标准浏览器：元素.addEventListener(事件名,事件处理函数,是否捕获（默认false，为冒泡）)
target.addEventListener(&amp;quot;click&amp;quot;, fn, false);
//IE8-：元素.attachEvent(on+事件名,事件处理函数)没有捕获阶段
target.attachEvent(&amp;quot;onclick&amp;quot;,fun);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;可以绑定多个处理函数在一个对象上，执行顺序按照绑定的顺序来 (标准)
&lt;ul&gt;
&lt;li&gt;不同元素事件执行顺序跟 html 结构有关&lt;/li&gt;
&lt;li&gt;相同元素事件执行顺序跟绑定先后有关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以绑定多个函数在一个对象上，执行顺序按照绑定的反序（ie8-）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;封装：绑定事件，兼容浏览器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function bind(ele,type,handler,isCapture)&amp;#123;
	// 优先使用事件监听器
	if(ele.addEventListerner)&amp;#123;
		// 标准浏览器
		ele.addEventListerner(type,handler,isCapture);
	&amp;#125;else if(ele.attachEvent)&amp;#123;
		// IE8-
		ele.attachEvent(&#39;on&#39; + type,handler);
	&amp;#125;else&amp;#123;
		// DOM节点绑定方式
		ele[&#39;on&#39; + type] = handler
	&amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;事件的移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件的移除&#34;&gt;#&lt;/a&gt; 事件的移除&lt;/h2&gt;
&lt;h3 id=&#34;dom绑定事件的移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom绑定事件的移除&#34;&gt;#&lt;/a&gt; DOM 绑定事件的移除&lt;/h3&gt;
&lt;p&gt;​	ele.on + 事件 = null；&lt;/p&gt;
&lt;h3 id=&#34;事件监听器移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件监听器移除&#34;&gt;#&lt;/a&gt; 事件监听器移除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;标准：removeEventListener (type,fn, true) 传入的参数 fn 要跟添加时一样 (同一个函数)，否则不能移除事件&lt;/li&gt;
&lt;li&gt;IE8-：detachEvent (‘on’+type,fun)，传入的参数 fun 要跟添加时一样，否则不能移除事件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;br&gt;
页面事件绑定数量越多，越影响性能（速度越慢）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;十二-正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十二-正则表达式&#34;&gt;#&lt;/a&gt; 十二、正则表达式&lt;/h1&gt;
&lt;h2 id=&#34;概念-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-4&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;正则表达式（regular expression）是一个描述字符模式的对象&lt;/p&gt;
&lt;p&gt;能够进行强大的 “模式匹配” 和 “文本检索与替换” 功能。前端往往有大量的表单数据校验的工作，采用正则表达式会使得数据校验的工作量大大减轻&lt;/p&gt;
&lt;h2 id=&#34;创建正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建正则表达式&#34;&gt;#&lt;/a&gt; 创建正则表达式&lt;/h2&gt;
&lt;p&gt;1. 字面量&lt;/p&gt;
&lt;p&gt;var reg=/ 字符串 || 匹配规则 /gi;&lt;/p&gt;
&lt;p&gt;g 全局匹配，i 不区分大小写&lt;/p&gt;
&lt;p&gt;2. 构造函数&lt;/p&gt;
&lt;p&gt;var reg=new RegExp (“字符串 || 匹配规则”,gi);&lt;/p&gt;
&lt;h2 id=&#34;支持正则表达式的字符串方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#支持正则表达式的字符串方法&#34;&gt;#&lt;/a&gt; 支持正则表达式的字符串方法&lt;/h2&gt;
&lt;p&gt;1.search()&lt;/p&gt;
&lt;p&gt;返回第一次匹配时所在的索引值，如果匹配不到则返回 - 1；&lt;/p&gt;
&lt;p&gt;2.match()&lt;/p&gt;
&lt;p&gt;默认匹配字符串，返回一个数组&lt;/p&gt;
&lt;p&gt;0：所匹配的字符&lt;/p&gt;
&lt;p&gt;index: 匹配第一个字符所在的索引&lt;/p&gt;
&lt;p&gt;input: 对字符串的引用&lt;/p&gt;
&lt;p&gt;全局匹配 (g)，返回一个匹配所有字符串的数组，如果匹配不到则返回 null&lt;/p&gt;
&lt;p&gt;3.replace()&lt;/p&gt;
&lt;p&gt;替换字符串&lt;/p&gt;
&lt;h2 id=&#34;匹配规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#匹配规则&#34;&gt;#&lt;/a&gt; 匹配规则&lt;/h2&gt;
&lt;p&gt;1. 字符类（不说数量则默认只匹配一个）&lt;/p&gt;
&lt;p&gt;\d 数字&lt;/p&gt;
&lt;p&gt;\D 非数字&lt;/p&gt;
&lt;p&gt;\w 代表数字、字母、下划线&lt;/p&gt;
&lt;p&gt;\W 非数字字母和下划线字符&lt;/p&gt;
&lt;p&gt;\s 空格&lt;/p&gt;
&lt;p&gt;\S 空格以外的字符&lt;/p&gt;
&lt;p&gt;. 除换行以外的所有字符&lt;/p&gt;
&lt;p&gt;\b : 匹配一个单词边界，也就是指单词和空格间的位置&lt;/p&gt;
&lt;p&gt;\B : 匹配非单词边界。&lt;/p&gt;
&lt;p&gt;单词和数字会被认为没有边界&lt;/p&gt;
&lt;p&gt;PS: 以上所有字符类都只是匹配 “一个” 字符&lt;/p&gt;
&lt;p&gt;2. 特殊符号 ^ $ . * + ? = ! : | \ / () [] {}&lt;/p&gt;
&lt;p&gt;(1) 表示数量：（默认遵循贪婪模式，越多越好）&lt;/p&gt;
&lt;p 1,=&#34;&#34;&gt;+ 匹配 1 个或多个字符&lt;/p&gt;
&lt;p 0,=&#34;&#34;&gt;* 匹配 0 个字符以上&lt;/p&gt;
&lt;p 0,1=&#34;&#34;&gt;? 匹配 0 个或 1 个字符&lt;/p&gt;
&lt;p&gt;{2,4} 最少 2 个，最多 4 个；匹配到 2~4 个字符&lt;/p&gt;
&lt;p&gt;(2)[] 代表任意 “单个字符”，里面的内容表示 “或” 的关系&lt;/p&gt;
&lt;p&gt;- 表示范围&lt;/p&gt;
&lt;p&gt;例如：console.log (str.match (/[a-z]+/g));&lt;/p&gt;
&lt;p&gt;^ 代表非&lt;/p&gt;
&lt;p&gt;(): 表示一个整体，普通括号 (?😃&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var reg=/(?:\d&amp;#123;17&amp;#125;|\d&amp;#123;14&amp;#125;)[\dx]/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(): 表示分组（n 是以最左边括号出现的顺序排列)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$1: 表示第一个分组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n: 表示第 n 个分组（不能写在正则表达式里）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\n: 在正则分组后面使用，表示对第 n 个分组的引用 (一定要写在正则表达式里)&lt;/p&gt;
&lt;p&gt;PS: 编写的正则分组数量越少越好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;var str=“张益达，李小璐，张非凡”;&lt;/p&gt;
&lt;p&gt;|: 表示或者&lt;/p&gt;
&lt;p&gt;锚点定位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;^: 表示以什么开头&lt;/li&gt;
&lt;li&gt;$: 表示以什么结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表示数量，对前一个字符计数，&lt;/p&gt;
&lt;ul&gt;
&lt;li 0,=&#34;&#34;&gt;*: 代表 0 个或 0 个以上 &amp;lt;===&amp;gt;&lt;/li&gt;
&lt;li 1,=&#34;&#34;&gt;+: 代表 1 个或 1 个以上 &amp;lt;===&amp;gt;&lt;/li&gt;
&lt;li 0,1=&#34;&#34;&gt;?: 代表 0 个或 1 个 &amp;lt;===&amp;gt;&lt;/li&gt;
&lt;li&gt;{}:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;\d&amp;#123;5&amp;#125;: 匹配5个数字
\d&amp;#123;5,10&amp;#125;: 匹配5个到10个数字
\d&amp;#123;5,&amp;#125;: 匹配5个或5个以上的数字
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;非贪婪模式，在后面加问号&lt;/p&gt;
&lt;p&gt;/\d{5,10}?/g&lt;/p&gt;
&lt;h1 id=&#34;十三-es5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十三-es5&#34;&gt;#&lt;/a&gt; 十三、ES5&lt;/h1&gt;
&lt;h2 id=&#34;支持es5的浏览器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#支持es5的浏览器&#34;&gt;#&lt;/a&gt; 支持 ES5 的浏览器&lt;/h2&gt;
&lt;p&gt;ie9+&lt;/p&gt;
&lt;h2 id=&#34;页面加载事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#页面加载事件&#34;&gt;#&lt;/a&gt; 页面加载事件&lt;/h2&gt;
&lt;p&gt;1、解析 HTML 结构&lt;/p&gt;
&lt;p&gt;2、加载外部脚本和样式表文件&lt;/p&gt;
&lt;p&gt;3、解析并执行脚本代码&lt;/p&gt;
&lt;p&gt;4、DOM 树构建完成 //DOMContentLoaded&lt;/p&gt;
&lt;p&gt;5、加载图片等外部文件&lt;/p&gt;
&lt;p&gt;6、页面加载完毕 &lt;a href=&#34;//window.onload&#34;&gt;//window.onload&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* readystatechange事件（准备阶段状态改变，两个状态）
    * interactive 	：DOM树完成执行
    * complete		：类似window.onload,但比window.onload先执行
* DOMContentLoaded事件
	* DOM树完成执行
    * 必须使用事件监听器绑定document事件
PS:以上事件用以取代window.onload事件（实际开发不常用）

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;es5的严格模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es5的严格模式&#34;&gt;#&lt;/a&gt; ES5 的严格模式&lt;/h2&gt;
&lt;p&gt;ie9 不支持严格模式&lt;/p&gt;
&lt;p&gt;1、使用严格模式：在当前作用域的最前面 &amp;quot;use strict&amp;quot;&lt;/p&gt;
&lt;p&gt;意义：增加 JS 语法的严谨性&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;、为什么要用严格模式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 消除javascript语法的一些不合理，不严谨的地方，减少一些怪异行为；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 消除代码运行的一些不安全之处，保证代码运行的安全；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 提高编译器效率，增加运行速度；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 为未来新版本的javascript做好铺垫；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;、如何使用严格模式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 全局：针对整个js文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  将”use strict”放在js文件的第一行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 局部：针对单个函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  将”use strict”放在函数体的第一行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token string&#34;&gt;&#34;use strict&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   		 &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;这是严格模式&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;、执行严格模式后的一些限制&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 不使用&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt;声明变量严格模式中将不通过&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 删除系统内置的属性会报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 不能删除&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt;声明的全局变量（会自动成为window的属性）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 对象有重名的属性将报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; obj&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;小王&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;王大锤&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 函数有重名的形参将报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; arguments严格定义为参数，保存实参信息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 不允许对arguments赋值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 禁止使用arguments&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;callee（相当于递归）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 函数必须声明在顶层，不能写在条件判断语句或&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;循环语句中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 报错&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;获取元素节点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取元素节点-2&#34;&gt;#&lt;/a&gt; 获取元素节点&lt;/h2&gt;
&lt;p&gt;1、document.querySelector (css 选择器) 获取匹配选择器的第一个元素节点，返回 DOM 节点&lt;/p&gt;
&lt;p&gt;1、document.querySelectorAll (css 选择器) 获取匹配选择器的所有元素节点，返回类数组&lt;/p&gt;
&lt;h2 id=&#34;function方法bind&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#function方法bind&#34;&gt;#&lt;/a&gt; Function 方法 bind ()&lt;/h2&gt;
&lt;p&gt;1、bind () 用于将当前函数和指定对象绑定（改变 this 指向），返回一个新函数&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 应用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; btns &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;.btn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;btns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    btns&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onclick&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 方式 1 (1)：var self = this;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;//(2)console.log(self.innerHTML);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 方式 2.bind () 改变 this 的指向&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;获取class的属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取class的属性&#34;&gt;#&lt;/a&gt; 获取 class 的属性&lt;/h2&gt;
&lt;p&gt;操作类名的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;classList对象
	-length:class类名的个数
	-add():添加class方法
	-remove():删除class方法
	-toggle():切换class方法
	-contains():是否含有某个类，返回布尔值
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data自定义属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#data自定义属性&#34;&gt;#&lt;/a&gt; data 自定义属性&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;-w3c规定的自定义属性的格式为[data-**=&amp;quot;&amp;quot;]
-dataset对象
	data-age=&amp;quot;17&amp;quot; &amp;lt;==&amp;gt;ele.dataset.age=17;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十四-es6&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十四-es6&#34;&gt;#&lt;/a&gt; 十四、ES6&lt;/h1&gt;
&lt;h2 id=&#34;let变量声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#let变量声明&#34;&gt;#&lt;/a&gt; let 变量声明&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;let:声明变量
-变量声明不会提前
-let不允许相同作用域内多次声明同一变量
-块级作用域&amp;#123;&amp;#125;  //花括号内为块级作用域
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;const声明常量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#const声明常量&#34;&gt;#&lt;/a&gt; const 声明常量&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;-变量声明不会提前
-const不允许相同作用域内多次声明同一变量
-块级作用域
-声明后无法修改值
*建议命名时全部大写，用_隔开多个单词
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解构&#34;&gt;#&lt;/a&gt; 解构&lt;/h2&gt;
&lt;p&gt;声明变量时，从数组或对象中提取值，对变量进行赋值，这被叫做 &amp;quot;解构&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;（一）数组解构
1、常规操作
	var [a,b,c]=[1,2,3]; //等同于var a=1,b=2,c=3
2、...表示获取剩余的所有参数
	var [a,...b]=[1,2,3,4]; //等同于var a=1,b=[2,3,4];
3、解构失败
如果变量个数多于赋值数，多余变量为undefined;
例如：var [a]=1; //报错：1 is not iterable
解构-左右都要有中括号
4、指定默认值
	var [a,b,c=1]=[10,30] //若解构失败，为默认值
	//a=10,b=30,c=1
（二）对象解构
1、常规操作
	obj=&amp;#123;
        guid:&amp;quot;01&amp;quot;,
        name:&amp;quot;猫爪杯&amp;quot;,
        price:888
	&amp;#125;
	var &amp;#123;guid,name,price&amp;#125;=obj;
2、解构失败：变量名与属性名不相同，返回值为undefined
3、如果变量名与属性名不相同，则必须写成以下格式才能取到值
&amp;#123;原属性名:变量名&amp;#125;
4、指定默认值
	var &amp;#123;a=10&amp;#125;=&amp;#123;&amp;#125;; //当a解构失败的话，拿到默认值
（三）应用
1、交换变量值
var x=10;
var y=20;
var [x,y]=[y,x];
2、函数返回多个值
    //数组：
    function example()&amp;#123;
         return [1,2,3]
    &amp;#125;
    var [x,y,z] = example();
    //对象：
    function example()&amp;#123;
         return &amp;#123;name:&amp;quot;lemon&amp;quot;,age:18&amp;#125;;
    &amp;#125;
    var &amp;#123;name,age&amp;#125; = example();
3、定义函数形参（重点）
    //数组：
    function test([x,y,z])&amp;#123;
        //相当于 var [x,y,z] = [1,2,3];
    &amp;#125;
    test([1,2,3]);
    //对象：
    function test(&amp;#123;name,age&amp;#125;)&amp;#123;
        //相当于 var &amp;#123;name,age&amp;#125; = &amp;#123;name:&amp;quot;lemon&amp;quot;,age:18&amp;#125;;
    &amp;#125;
    test(&amp;#123;name:&amp;quot;lemon&amp;quot;,age:18&amp;#125;);

    //常规操作：参数可以设置默认值
    fuction test(&amp;#123;x=0,y=0,z=0&amp;#125;)&amp;#123;
        //相当于var &amp;#123;x=0,y=0,z=0&amp;#125; = &amp;#123;x:10&amp;#125;
        //为避免没有实参值传入，给形参默认值
    &amp;#125;
    test(&amp;#123;x:10&amp;#125;);

    //扩展：若形参是基本数据类型，函数也可以对形参进行设置默认值的操作。
    var func1 = function(x=1,y=2)&amp;#123;return x+y&amp;#125;；
    func1(); // 得到 3
    //同样，也可以用...表示获取剩余参数
    var func2 = (x, ...args) =&amp;gt; &amp;#123; console.log(args) &amp;#125;;
    func2(1,2,3); // 输出 [2,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串扩展&#34;&gt;#&lt;/a&gt; 字符串扩展&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;字符串方法
1、includes
	判断是否包含某个字符，返回布尔值
&#39;html5&#39;.includes(&#39;html&#39;);//true
2、startsWith/endsWith
	是否以某一字符或某一字符串开头/结尾
	let str=&#39;google&#39;;
    str.startsWith(&#39;goo&#39;);  //true
    str.endsWith(&#39;e&#39;);    //true
3、repeat(n)
	得到字符串重复n次后的结果，n可以为小数，但不能为负数
    &#39;laoxie&#39;.repeat(2);//laoxielaoxie

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串模板&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串模板&#34;&gt;#&lt;/a&gt; 字符串模板&lt;/h2&gt;
&lt;p&gt;template string&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-使用反引号``表示，你可以通过一种更加美观、更加方便的方式向字符串中插入变量
-格式：$&amp;#123;变量|函数&amp;#125;，
 `你好，我的名字叫$&amp;#123;username&amp;#125;,接下来是我的自我介绍：$&amp;#123;introduce()&amp;#125;` 
 模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;函数扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数扩展&#34;&gt;#&lt;/a&gt; 函数扩展&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;（一）箭头函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;（一）箭头函数
*可以省略function、return、()、&amp;#123;&amp;#125;
 1.&amp;#123;&amp;#125;内部只有一句返回代码，可以省略return
 	没有参数或有多个参数不能省略()
 	//var sum = () =&amp;gt; 3;var sum = (a,b) =&amp;gt; 3;
 	只有一个参数，可以省略()
 	//var sum = a =&amp;gt; 3;
 2.&amp;#123;&amp;#125;内部有多句代码，不能省略&amp;#123;&amp;#125;、return
 	=&amp;gt;后紧接着的&amp;#123;&amp;#125;代表代码块
 	如果返回一个对象，两种写法
 	(1)var sum=()=&amp;gt;(&amp;#123;name:&#39;lemon&#39;&amp;#125;)
 	(2)var sum=()=&amp;gt;&amp;#123;return &amp;#123;name:&#39;lemon&amp;#125;&amp;#125;
 3.箭头函数没有this，它的this继承自外部作用域
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（二）生成器函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next()&lt;/code&gt;  方法会执行 generator 的代码，然后，每次遇到 &lt;code&gt;yield x;&lt;/code&gt;  就返回一个对象 &lt;code&gt;&amp;#123;value: x, done: true/false&amp;#125;&lt;/code&gt; ，然后 “暂停”。返回的 &lt;code&gt;value&lt;/code&gt;  就是 &lt;code&gt;yield&lt;/code&gt;  的返回值， &lt;code&gt;done&lt;/code&gt;  表示这个 generator 是否已经执行结束了。如果 &lt;code&gt;done&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt; ，则 &lt;code&gt;value&lt;/code&gt;  就是 &lt;code&gt;return&lt;/code&gt;  的返回值。&lt;/p&gt;
&lt;p&gt;当执行到 &lt;code&gt;done&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt;  时，这个 generator 对象就已经全部执行完毕，不要再继续调用 &lt;code&gt;next()&lt;/code&gt;  了。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;over&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; countNum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:11,done:false&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:12,done:false&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:13,done:false&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:&#34;over&#34;,done:true&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;set集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set集合&#34;&gt;#&lt;/a&gt; set 集合&lt;/h2&gt;
&lt;p&gt;类似于数组，但是成员的值都是唯一的，可自动去重，去重的前提是两个值全等于。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
（二）set的方法
    * add(value)：添加某个值，返回Set结构本身。
    * delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
    * has(value)：返回一个布尔值，表示Set集合中是否存在该值。
    * clear()：清除所有成员，没有返回值。
（三）利用set去重数组(对引用类型数据无效)
    var arr = [1, 2, 3, 4, 5, 5, 5, 5]；
    let items = new Set(arr);
    //去重后将set集合重新转成数组
    arr = Array.from(items)；
（四）遍历set集合
	* forEach()
	* for…of
        set.forEach((item,idx)=&amp;gt;&amp;#123;
            console.log(item,idx);//索引值与item值相同
        &amp;#125;)

        var imgs = new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]); //根据KEY遍历 
        for(let item of imgs)&amp;#123;
             console.log(item); 
        &amp;#125; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for…of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是最简洁、最直接的遍历数组元素的语法&lt;/li&gt;
&lt;li&gt;这个方法避开了 for-in 循环的所有缺陷&lt;/li&gt;
&lt;li&gt;for…of 跟 for-in 的区别很明显，就是直接取值，而不再取下标了&lt;/li&gt;
&lt;li&gt;与 forEach () 不同的是，它可以正确响应 break、continue 和 return 语句&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr = [10,12,18,30];
for (var value of arr) &amp;#123;
  console.log(value);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要有 [迭代器 Symbol (Symbol.iterator)  ] 就可以用 for…of 遍历：&lt;/p&gt;
&lt;p&gt;Array、DOM、Set/Map 集合、String、不支持普通对象&lt;/p&gt;
&lt;h2 id=&#34;对象扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象扩展&#34;&gt;#&lt;/a&gt; 对象扩展&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;（一）对象合并方法
Object.assign(obj1,obj2,...objN);合并对象到obj1，返回obj1
	var obj1 = &amp;#123;a:1&amp;#125;；
    var newObj1 = Object.assign(obj1,&amp;#123;b:2&amp;#125;);
    1.合并对象到obj1,所以obj1 = &amp;#123;a:1,b:2&amp;#125;
    2.返回obj1，传递给newObj1，所以newObj1 = &amp;#123;a:1,b:2&amp;#125;

    var newObj2 = Object.assign(obj1,&amp;#123;b:2&amp;#125;,&amp;#123;b:4,c:3&amp;#125;);
    *若存在相同属性，后面的覆盖前面的。//newObj=obj1=&amp;#123;a:1,b:4,c:3&amp;#125;
（二）对象的传递与复制 
    var obj = &amp;#123;
        name:&amp;quot;laoxie&amp;quot;,
        hobby:[&#39;大保健&#39;,&#39;money&#39;]
    &amp;#125;
    1.对象的传递：
    var newObj = obj; //此时修改obj的任意属性，也会同时影响newObj
    2.对象的复制
    （1）for...in遍历复制
    for(var key in obj)&amp;#123;
        newObj2[key] = obj[key];
    &amp;#125;
    （2）利用assign（）
		var newObj3 = Object.assign(&amp;#123;&amp;#125;,obj);
    	注意：以上两种复制方式，都只支持浅拷贝（对于引用类型，只拷贝引用）
		obj.hobby.push(&#39;羽毛球&#39;);//此时也会影响newObj2与newObj3

    （3）深拷贝
		var newObj3 = JSON.parse(JSON.stringify(person))；
		//有缺陷，只支持 JSON 格式的数据类型，对于时间对象和正则不友好
（三）对象的简写
	ES6允许在对象之中直接写变量
    1. 属性简写
        var myName = &#39;laoxie&#39;;
        var obj = &amp;#123;myName&amp;#125;;//等效于var obj = &amp;#123;myName:&#39;laoxie&#39;&amp;#125;。
    	//变量名作为属性名，变量值作为属性值。
    2.变量值作为属性名
        var obj = &amp;#123;
            [myName]:18 //等效于 laoxie:18
        &amp;#125;
    3.方法简写
        var obj = &amp;#123;
            coding()&amp;#123;&amp;#125; //等效于 coding:function()&amp;#123;&amp;#125;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;map对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map对象&#34;&gt;#&lt;/a&gt; Map 对象&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;js 对象（Object）只能用字符串当作键 (属性名)。这让它的使用有了很大的限制。所以 ES6 推出了一种类似于对象的数据集合：Map 集合，它能让所有类型的数据作为键&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		* 设置set(key, value)
		* 获取get(key)
		* has(key)
		* delete(key)
		* clear()
	（1）创建：
        let map = new Map(); 
    （2）设置：
        map.set(&#39;name&#39;,&#39;laoxie&#39;);
        map.set(6,666);
        // 把数组作为键
        var arr = [10,20,30];
        map.set(arr,&#39;数组&#39;);
        //获取：
        map.get(arr); //&#39;数组&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. 遍历方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    * keys() 获取所有键，可以用Array.from()转成数组
    * values() 获取所有值，可以用Array.from()转成数组
    * entries() 获取所有键值对，可以用Array.from()转成数组
    * 循环遍历，配合解构赋值 for...of
    for(var item of map)&amp;#123;
        console.log(item); //每个item得到的都是一个数组，索引0为键，索引1为值
    &amp;#125; 
    //解构写法：
    for(var [key,value] of map)&amp;#123;
        console.log(key,value);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;symbol字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#symbol字符串&#34;&gt;#&lt;/a&gt; Symbol 字符串&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1.概念
	ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，一旦创建后就不可更改，是一种类似于字符串的数据类型，但Symbol 值不能与其他类型的值进行运算，否则报错。
2.创建
    (1)没有参数的情况
    var s1 = Symbol();
    var s2 = Symbol();
    s1 === s2 // false

    (2)Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了标识和区分，对调式非常有用
    // 有参数的情况
    var s1 = Symbol(&amp;quot;foo&amp;quot;);
    var s2 = Symbol(&amp;quot;foo&amp;quot;);
    s1 === s2 // false

    (3)Symbol值不能与其他类型的值进行运算
3.用途
    * 给对象创建私有属性
    * 给现有的对象添加属性，可能会产生命名冲突，Symbol的出现解决这个问题
    var attr = Symbol();

    // 第一种写法,不用加引号
    var a = &amp;#123;&amp;#125;;
    a[attr] = &#39;Nani&#39;;

    // 第二种写法（注意加方括号，否则回被当作普通属性）
    var a = &amp;#123;
        [attr]: &#39;Nani&#39;;
    &amp;#125;;

    // 以上写法都得到同样结果
    a[attr] // &amp;quot;Nani&amp;quot;
4.Symbol.for() 登记symbol,会先查找当前Symbol是否存在
    // 存在：则引用，不存在：则创建登记
    var s11 = Symbol.for(&#39;xiaoming&#39;);//创建一个Symbol
    var s12 = Symbol.for(&#39;xiaoming&#39;);//引用一个Symbol
    //注意：直接使用Symbol()创建的Symbol值的键不会被登记，所以也就获取不到
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
