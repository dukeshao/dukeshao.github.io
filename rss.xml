<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>你的名字</title>
        <link>https://dukeshao.com</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Wed, 13 Jul 2022 06:59:07 +0800</pubDate>
        <lastBuildDate>Wed, 13 Jul 2022 06:59:07 +0800</lastBuildDate>
        <category>CSS</category>
        <category>HTML</category>
        <category>Javascript</category>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/Canvas/</guid>
            <title>Canvas</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/Canvas/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:07 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;canvas简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#canvas简介&#34;&gt;#&lt;/a&gt; canvas 简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是 HTML5 提供的一种新标签&lt;/li&gt;
&lt;li&gt;是一个矩形区域的画布，可以用 JavaScript 在上面绘画，控制其每一个像素，本身不具备绘图功能。&lt;/li&gt;
&lt;li&gt;拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;canvas width=&amp;quot;600&amp;quot; height=&amp;quot;600&amp;quot;&amp;gt;你的浏览器不支持canvas，请升级浏览器&amp;lt;/canvas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;canvas用途&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#canvas用途&#34;&gt;#&lt;/a&gt; canvas 用途&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;游戏：canvas 在基于 Web 的图像显示方面比 Flash 更加立体、更加精巧，canvas 游戏在流畅度和跨平台方面更牛。&lt;/li&gt;
&lt;li&gt;可视化数据。数据图表话，比如：百度的 echart&lt;/li&gt;
&lt;li&gt;banner 广告：Flash 曾经辉煌的时代，智能手机还未曾出现。现在以及未来的智能机时代，HTML5 技术能够在 banner 广告上发挥巨大作用，用 Canvas 实现动态的广告效果再合适不过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;canvas标签语法和属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#canvas标签语法和属性&#34;&gt;#&lt;/a&gt; canvas 标签语法和属性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;可以设置 width 和 height 属性，但是属性值单位必须是 px，否则忽略，默认 300*150px&lt;/li&gt;
&lt;li&gt;不要用 CSS 控制它的宽和高，会造成图片拉伸，&lt;/li&gt;
&lt;li&gt;js 重新设置 canvas 标签的宽高属性会让画布擦除所有的内容。&lt;/li&gt;
&lt;li&gt;可以给 canvas 画布设置背景色&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;canvas坐标系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#canvas坐标系&#34;&gt;#&lt;/a&gt; canvas 坐标系&lt;/h3&gt;
&lt;p&gt;canvas 坐标系，从最左上角 0,0 开始。x 向右增大， y 向下增大&lt;/p&gt;
&lt;img data-src=&#34;/2022/07/13/C_Javascript/Canvas/canvas-x-y.png&#34; class=&#34;&#34; title=&#34;canvas坐标系&#34;&gt;
&lt;h2 id=&#34;canvas-api&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#canvas-api&#34;&gt;#&lt;/a&gt; Canvas API&lt;/h2&gt;
&lt;h3 id=&#34;绘图上下文context&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绘图上下文context&#34;&gt;#&lt;/a&gt; 绘图上下文 context&lt;/h3&gt;
&lt;p&gt;上下文：工具包，是所有的绘制操作 api 的入口或者集合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;canvas 自身无法绘制任何内容。Canvas 的绘图是使用 JavaScript 操作的。&lt;/li&gt;
&lt;li&gt;context 对象就是 JavaScript 操作 Canvas 的接口&lt;/li&gt;
&lt;li&gt;使用 getContext (‘2d’) 来获取 2D 绘图上下文。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; canvas &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;canvas&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; ctx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; canvas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2d&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;// 注意：2d 小写， 3d：webgl&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;绘制图形&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绘制图形&#34;&gt;#&lt;/a&gt; 绘制图形&lt;/h3&gt;
&lt;h4 id=&#34;属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性&#34;&gt;#&lt;/a&gt; 属性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;lineWidth     设置线宽&lt;/li&gt;
&lt;li&gt;strokeStyle   设置描边样式（默认黑色）&lt;/li&gt;
&lt;li&gt;fillStyle     设置填充样式（默认黑色）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法&#34;&gt;#&lt;/a&gt; 方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;moveTo (x,y)   设置绘制路径的起点（移动画笔位置）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lineTo (x,y)   画线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;closePath ()   闭合路径，必须闭合路径才能成功填充&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;beginPath ()   开启一个新状态，基于之前的状态开启新的状态，新的状态会保持之前的设置&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;beginPath&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 开启新的状态后，当设置新的值时，只会作用于当前状态，不会影响之前的状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lindeWidth &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strokeStyle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;# ddd&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rect (x,y,width,height) 绘制矩形路径&lt;br&gt;
 x, y 是矩形左上角坐标， width 和 height 都是以像素计（下同）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: rect 方法只是规划了矩形的路径，并没有填充和描边&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;strokeRect (x,y,width,height)  绘制描边矩形&lt;/li&gt;
&lt;li&gt;fillRect (x,y,width,height)    绘制填充矩形&lt;/li&gt;
&lt;li&gt;stroke ()      描边&lt;/li&gt;
&lt;li&gt;fill ()        填充，该方法会自动闭合路径&lt;/li&gt;
&lt;li&gt;clearRect (x,y,width,height)   清除矩形区域，&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 重新设置 canvas 的宽 / 高也能达到清空的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;arc (x,y,radius,startAngle,endAngle,counterclockwise)   画圆弧 / 画圆
&lt;ul&gt;
&lt;li&gt;x,y：圆心坐标。&lt;/li&gt;
&lt;li&gt;radius：半径大小。&lt;/li&gt;
&lt;li&gt;startAngle: 绘制开始的角度（x 轴为 0 度）。&lt;/li&gt;
&lt;li&gt;endAngel: 结束的角度，注意是弧度。&lt;/li&gt;
&lt;li&gt;counterclockwise：是否是逆时针。true 是逆时针，false：顺时针&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;弧度和角度的转换公式： rad = deg*Math.PI/180;
在Math提供的方法中sin、cos等都使用的弧度 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** 绘图步骤（5 步）：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;、获得画布&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; canvas  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;cavsElem&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;、获得canvas上下文&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; ctx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; canvas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2d&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;、绘制路径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 设置绘制起点（移动画笔位置）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;moveTo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lineTo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lineTo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;、设置样式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 设置线宽&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lineWidth &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 设置描边样式（默认黑色）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strokeStyle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 设置填充样式（默认黑色）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fillStyle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;# f60&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;、描边&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;填充&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stroke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token constant&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;：fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;方法会自动闭合路径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;绘制字体了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绘制字体了解&#34;&gt;#&lt;/a&gt; 绘制字体（了解）&lt;/h3&gt;
&lt;h4 id=&#34;属性-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性-2&#34;&gt;#&lt;/a&gt; 属性&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;font      设置或返回文本内容的当前字体属性，语法与 CSS 相同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;textAlign 设置或返回文本内容的当前对齐方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start（默认）: 文本在指定的位置开始。&lt;/li&gt;
&lt;li&gt;end : 文本在指定的位置结束。&lt;/li&gt;
&lt;li&gt;center: 文本的中心被放置在指定的位置。&lt;/li&gt;
&lt;li&gt;left : 文本左对齐。&lt;/li&gt;
&lt;li&gt;right : 文本右对齐。&lt;/li&gt;
&lt;/ul&gt;
  &lt;img data-src=&#34;/2022/07/13/C_Javascript/Canvas/textAsign.png&#34; class=&#34;&#34; title=&#34;textAlign示意图&#34;&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;textBaseline 设置或返回在绘制文本时使用的当前文本基线&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alphabetic ： 默认。文本基线是普通的字母基线。&lt;/li&gt;
&lt;li&gt;top ： 文本基线是 em 方框的顶端。。&lt;/li&gt;
&lt;li&gt;hanging ： 文本基线是悬挂基线。&lt;/li&gt;
&lt;li&gt;middle ： 文本基线是 em 方框的正中。&lt;/li&gt;
&lt;li&gt;ideographic： 文本基线是 em 基线。&lt;/li&gt;
&lt;li&gt;bottom ： 文本基线是 em 方框的底端&lt;/li&gt;
&lt;/ul&gt;
  &lt;img data-src=&#34;/2022/07/13/C_Javascript/Canvas/font-baseline.png&#34; class=&#34;&#34; title=&#34;textBaseline示意图&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;方法-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法-2&#34;&gt;#&lt;/a&gt; 方法&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;fillText (text,x,y)    填充字体&lt;/li&gt;
&lt;li&gt;strokeText (text,x,y)  描边字体
&lt;ul&gt;
&lt;li&gt;x,y：绘制文字起始坐标&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;measureText (text) 检测字体宽度，返回包含指定文本宽度的对象
&lt;ul&gt;
&lt;li&gt;text: 文本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绘制图片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绘制图片&#34;&gt;#&lt;/a&gt; 绘制图片&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本绘制图片的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;drawImage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    参数：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y 绘制图片左上角的坐标，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    img是绘制图片的dom对象。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;在画布上绘制图像，并规定图像的宽度和高度&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;drawImage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    参数：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    width 绘制图片的宽度， &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    height：绘制图片的高度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    如果指定宽高，最好成比例，不然图片会被拉伸&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    等比公式： height &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; 原高度&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;width&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;原宽度&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;图片裁剪，并把裁剪完成后的那部分图片绘制到画布上&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;drawImage&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sy&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;swidth&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sheight&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    参数：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;sy 裁剪的左上角坐标，&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    swidth：裁剪图片的宽度。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;sheight&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;裁剪的高度&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;设置阴影了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置阴影了解&#34;&gt;#&lt;/a&gt; 设置阴影（了解）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;shadowColor ： 设置或返回用于阴影的颜色&lt;/li&gt;
&lt;li&gt;shadowBlur ： 设置或返回用于阴影的模糊级别，数值越高，模糊程度越大 （默认为 0，不模糊）&lt;/li&gt;
&lt;li&gt;shadowOffsetX： 设置或返回阴影距形状的水平距离&lt;/li&gt;
&lt;li&gt;shadowOffsetY： 设置或返回阴影距形状的垂直距离&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fillStyle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;# fc0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shadowColor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;# 333&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shadowBlur &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shadowOffsetX &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shadowOffsetY &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fillRect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;创建渐变样式了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建渐变样式了解&#34;&gt;#&lt;/a&gt; 创建渐变样式（了解）&lt;/h3&gt;
&lt;h4 id=&#34;线性渐变&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#线性渐变&#34;&gt;#&lt;/a&gt; 线性渐变&lt;/h4&gt;
&lt;p&gt;线性渐变是一个对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;语法：ctx.createLinearGradient (x0,y0,x1,y1);&lt;br&gt;
 参数：x0,y0 起始坐标，x1,y1 结束坐标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;addColorStop(stop,color)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stop：介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置&lt;/li&gt;
&lt;li&gt;color：颜色值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 创建线性渐变的对象，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; grd&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createLinearGradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;170&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 添加一个渐变颜色，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 参数 1：0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 参数 2：具体颜色&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    grd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addColorStop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;black&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 添加一个渐变颜色&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    grd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addColorStop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;white&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 关键点，把渐变设置到 填充的样式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fillStyle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;grd&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;径向渐变&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#径向渐变&#34;&gt;#&lt;/a&gt; 径向渐变&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ctx.createRadialGradient(x0,y0,r0,x1,y1,r1);
&lt;ul&gt;
&lt;li&gt;x0: 渐变的开始圆的 x 坐标&lt;/li&gt;
&lt;li&gt;y0: 渐变的开始圆的 y 坐标&lt;/li&gt;
&lt;li&gt;r0: 开始圆的半径&lt;/li&gt;
&lt;li&gt;x1: 渐变的结束圆的 x 坐标&lt;/li&gt;
&lt;li&gt;y1: 渐变的结束圆的 y 坐标&lt;/li&gt;
&lt;li&gt;r1: 结束圆的半径&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; rlg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createRadialGradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 添加一个渐变颜色&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rlg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addColorStop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;# ccc&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rlg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addColorStop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;# efefef&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rlg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addColorStop&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;# fff&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 设置 填充样式为延续渐变的样式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fillStyle &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; rlg&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fillRect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;绘制背景图了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绘制背景图了解&#34;&gt;#&lt;/a&gt; 绘制背景图（了解）&lt;/h3&gt;
&lt;p&gt;ctx.createPattern (img,repeat) 方法在指定的方向内重复指定的元素了解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数一：设置平铺背景的图片的 DOM 节点，&lt;/li&gt;
&lt;li&gt;参数二：背景平铺的方式。
&lt;ul&gt;
&lt;li&gt;image ： 规定要使用的图片、画布或视频元素。&lt;/li&gt;
&lt;li&gt;repeat ： 默认。该模式在水平和垂直方向重复。&lt;/li&gt;
&lt;li&gt;repeat-x ： 该模式只在水平方向重复。&lt;/li&gt;
&lt;li&gt;repeat-y ： 该模式只在垂直方向重复。&lt;/li&gt;
&lt;li&gt;no-repeat： 该模式只显示一次（不重复）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; ctx&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getContext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;2d&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; img&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;lamp&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; pat&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createPattern&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;repeat&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fillStyle&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pat&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//  把背景图设置给填充的样式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ctx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;画布变换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#画布变换&#34;&gt;#&lt;/a&gt; 画布变换&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：画布变换仅仅是改变画布状态，不会影响之前画布上的内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;缩放&lt;br&gt;
 scale (scaleWidth,scaleHeight) 方法缩放当前绘图，参数为 0~1 的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;位移画布&lt;br&gt;
 translate (x,y) 方法重新映射画布上的 (0,0) 位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;旋转&lt;br&gt;
 rotate (radian) 方法旋转当前的绘图，注意参数是弧度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;绘制环境保存和还原&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绘制环境保存和还原&#34;&gt;#&lt;/a&gt; 绘制环境保存和还原&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ctx.save () 保存当前环境的状态&lt;br&gt;
可以把当前绘制环境 context 保存到缓存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ctx.restore () 返回之前保存过的路径状态和属性&lt;br&gt;
获取最近通过 save () 方法缓存的 context&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;保存base64编码图片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#保存base64编码图片&#34;&gt;#&lt;/a&gt; 保存 base64 编码图片&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;toDataURL(type, encoderOptions);
&lt;ul&gt;
&lt;li&gt;type，设置输出的类型，比如 image/png image/jpeg 等&lt;/li&gt;
&lt;li&gt;encoderOptions：0-1 之间的数字，用于标识输出图片的品质&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 必须在服务器环境下使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; canvas &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;canvas&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; dataURL &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; canvas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toDataURL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; img &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;querySelector&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;img&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; canvas&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toDataURL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;image/png&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 将画布的内容赋值给图片的 src 属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 下载&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 下载后的问题名&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; filename &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;xxx&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; Date&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;.png&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 创建 a 标签用于下载图片（必须有 download 属性）&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; save_link &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    save_link&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;href &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataURL&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    save_link&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;download &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; filename&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 自定义事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; event &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;MouseEvents&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    event&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;initMouseEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    save_link&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;贝塞尔曲线了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#贝塞尔曲线了解&#34;&gt;#&lt;/a&gt; 贝塞尔曲线（了解）&lt;/h3&gt;
&lt;h4 id=&#34;二次方曲线&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二次方曲线&#34;&gt;#&lt;/a&gt; 二次方曲线&lt;/h4&gt;
&lt;p&gt;quadraticCurveTo(cpx,cpy,x,y)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpx： 贝塞尔控制点的 x 坐标&lt;/li&gt;
&lt;li&gt;cpy： 贝塞尔控制点的 y 坐标&lt;/li&gt;
&lt;li&gt;x ： 结束点的 x 坐标&lt;/li&gt;
&lt;li&gt;y ： 结束点的 y 坐标&lt;img data-src=&#34;/2022/07/13/C_Javascript/Canvas/quadratic.png&#34; class=&#34;&#34; title=&#34;二次方曲线示意图&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;贝塞尔曲线&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#贝塞尔曲线&#34;&gt;#&lt;/a&gt; 贝塞尔曲线&lt;/h4&gt;
&lt;p&gt;bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：三次贝塞尔曲线需要三个点。前两个点是用于三次贝塞尔计算中的控制点，第三个点是曲线的结束点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;cp1x： 第一个贝塞尔控制点的 x 坐标&lt;/li&gt;
&lt;li&gt;cp1y： 第一个贝塞尔控制点的 y 坐标&lt;/li&gt;
&lt;li&gt;cp2x： 第二个贝塞尔控制点的 x 坐标&lt;/li&gt;
&lt;li&gt;cp2y： 第二个贝塞尔控制点的 y 坐标&lt;/li&gt;
&lt;li&gt;x: 结束点的 x 坐标&lt;/li&gt;
&lt;li&gt;y: 结束点的 y 坐标&lt;img data-src=&#34;/2022/07/13/C_Javascript/Canvas/bezier.png&#34; class=&#34;&#34; title=&#34;贝塞尔曲线示意图&#34;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;canvas应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#canvas应用&#34;&gt;#&lt;/a&gt; Canvas 应用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Echarts&lt;/li&gt;
&lt;li&gt;Highcharts&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/WEB%20%E7%BB%84%E4%BB%B6%E6%A0%87%E5%87%86/</guid>
            <title>WEB 组件标准</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/WEB%20%E7%BB%84%E4%BB%B6%E6%A0%87%E5%87%86/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:06 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;web-组件标准&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#web-组件标准&#34;&gt;#&lt;/a&gt; WEB 组件标准&lt;/h2&gt;
&lt;p&gt;四大 Web 组件标准：HTML Template、Shadow DOM、Custom Elements、HTML Imports&lt;/p&gt;
&lt;p&gt;实际上 HTML Imports 已经被废弃了，所以变成 &amp;quot;三大&amp;quot; 了&lt;/p&gt;
&lt;h2 id=&#34;一-html-template&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-html-template&#34;&gt;#&lt;/a&gt; 一、HTML Template&lt;/h2&gt;
&lt;p&gt;概念：相信很多人都有所耳闻，简单的讲也就是 HTML5 中的  &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;  标签，正常情况下它无色无味，感知不到它的存在，甚至它下面的 img 都不会被下载，script 都不会被执行。 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;  就如它的名字一样，它只是一个模版，只有到你用到它时，它才会变得有意义。&lt;/p&gt;
&lt;h2 id=&#34;二-shadow-dom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-shadow-dom&#34;&gt;#&lt;/a&gt; 二、Shadow DOM&lt;/h2&gt;
&lt;p&gt;概念：Shadow DOM 则是原生组件封装的基本工具，它可以实现组件与组件之间的独立性。&lt;/p&gt;
&lt;h2 id=&#34;三-custom-elements&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-custom-elements&#34;&gt;#&lt;/a&gt; 三、Custom Elements&lt;/h2&gt;
&lt;p&gt;概念：Custom Elements 是用来包装原生组件的容器，通过它，你就只需要写一个标签，就能得到一个完整的组件&lt;/p&gt;
&lt;h2 id=&#34;四-html-imports废弃&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-html-imports废弃&#34;&gt;#&lt;/a&gt; 四、HTML Imports (废弃)&lt;/h2&gt;
&lt;p&gt;1. 概念：HTML Imports 则是 HTML 中类似于 ES6 Module 的一个东西，你可以直接 import 另一个 html 文件，然后使用其中的 DOM 节点。但是，由于 HTML Imports 和 ES6 Module 实在是太像了，并且除了 Chrome 以外没有浏览器愿意实现它，所以它已经被废弃并不推荐使用了。未来会使用 ES6 Module 来取代它，但是现在貌似还没有取代的方案，在新版的 Chrome 中这个功能已经被删除了，并且在使用的时候会在 Console 中给出警告。警告中说使用 ES Modules 来取代，但是我测试在 Chrome 71 中 ES Module 会强制检测文件的 MIME 类型必须为 JavaScript 类型，应该是暂时还没有实现支持&lt;/p&gt;
&lt;p&gt;2.MIME 类型：MIME 的全称是 Multipurpose Internet Mail Extensions，即多用途互联网邮件扩展类型。&lt;/p&gt;
&lt;p&gt;这是 HTTP 协议中用来定义文档性质及格式的标准。IETF RFC 6838，对 HTTP 传输内容类型进行了全面定义。而 IANA (互联网号码分配机构) 是负责管理所有标准 MIME 类型的官方机构。可以在这里) 找到所有的标准 MIME。&lt;/p&gt;
&lt;p&gt;服务器通过 MIME 告知响应内容类型，而浏览器则通过 MIME 类型来确定如何处理文档。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/IndexedDB/</guid>
            <title>IndexedDB</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/IndexedDB/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:05 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;indexeddb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#indexeddb&#34;&gt;#&lt;/a&gt; IndexedDB&lt;/h2&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 获取 indexedDB 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; indexedDB &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;indexedDB &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;webkitIndexedDB &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mozIndexedDB &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;msIndexedDB&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; timestamp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getTime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 打开数据库&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; request &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; indexedDB&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;yuhun&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; timestamp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用时间戳当做版本号，每次打开数据库都可以触发 onupgradeneeded 事件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; fileName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;雀之灵_招摇啊_20200411_2354&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onupgradeneeded&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;objectStoreNames&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fileName&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我需要创建一个新的存储对象&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; objectStore &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; db&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createObjectStore&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fileName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;keyPath&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;御魂ID&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;autoIncrement&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 指定可以被索引的字段，unique 字段是否唯一&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        objectStore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;御魂ID&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;御魂ID&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token literal-property property&#34;&gt;unique&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            objectStore&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;数据库版本更改为:&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; timestamp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/ES6_10/</guid>
            <title>ES6-10</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/ES6_10/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:04 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一-es6-10新特性一览&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-es6-10新特性一览&#34;&gt;#&lt;/a&gt; 一、ES6-10 新特性一览&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;ES 全称 ECMAScript，ECMAScript 是 ECMA 制定的标准化脚本语言。目前 JavaScript 使用的 ECMAScript 版本为 ECMA-417。关于 ECMA 的最新资讯可以浏览 ECMA news 查看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ECMA 规范最终由 TC39 敲定。TC39 由包括浏览器厂商在内的各方组成，他们开会推动 JavaScript 提案沿着一条严格的发展道路前进。 从提案到入选 ECMA 规范主要有以下几个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stage 0: strawman—— 最初想法的提交。&lt;/li&gt;
&lt;li&gt;Stage 1: proposal（提案）—— 由 TC39 至少一名成员倡导的正式提案文件，该文件包括 API 事例。&lt;/li&gt;
&lt;li&gt;Stage 2: draft（草案）—— 功能规范的初始版本，该版本包含功能规范的两个实验实现。&lt;/li&gt;
&lt;li&gt;Stage 3: candidate（候选）—— 提案规范通过审查并从厂商那里收集反馈&lt;/li&gt;
&lt;li&gt;Stage 4: finished（完成）—— 提案准备加入 ECMAScript，但是到浏览器或者 Nodejs 中可能需要更长的时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二-es6新特性2015&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-es6新特性2015&#34;&gt;#&lt;/a&gt; 二、ES6 新特性（2015）&lt;/h2&gt;
&lt;p&gt;ES6 的特性比较多，在 ES5 发布近 6 年（2009-11 至 2015-6）之后才将其标准化。两个发布版本之间时间跨度很大，所以 ES6 中的特性比较多。 在这里列举几个常用的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类&lt;/li&gt;
&lt;li&gt;模块化&lt;/li&gt;
&lt;li&gt;箭头函数&lt;/li&gt;
&lt;li&gt;函数参数默认值&lt;/li&gt;
&lt;li&gt;模板字符串&lt;/li&gt;
&lt;li&gt;解构赋值&lt;/li&gt;
&lt;li&gt;延展操作符&lt;/li&gt;
&lt;li&gt;对象属性简写&lt;/li&gt;
&lt;li&gt;Promise&lt;/li&gt;
&lt;li&gt;Let 与 Const&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1类class&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1类class&#34;&gt;#&lt;/a&gt; 1. 类（class）&lt;/h3&gt;
&lt;p&gt;对熟悉 Java，object-c，c# 等纯面向对象语言的开发者来说，都会对 class 有一种特殊的情怀。ES6 引入了 class（类），让 JavaScript 的面向对象编程变得更加简单和易于理解。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  class Animal &amp;#123;
    constructor(name,color) &amp;#123;      this.name = name;      this.color = color;    &amp;#125;
    toString() &amp;#123;      console.log(&#39;name:&#39; + this.name + &#39;,color:&#39; + this.color);
    &amp;#125;  &amp;#125;
 var animal = new Animal(&#39;dog&#39;,&#39;white&#39;); animal.toString();
 console.log(animal.hasOwnProperty(&#39;name&#39;));  console.log(animal.hasOwnProperty(&#39;toString&#39;));  console.log(animal.__proto__.hasOwnProperty(&#39;toString&#39;)); 
 class Cat extends Animal &amp;#123;  constructor(action) &amp;#123;
    // 如果没有置顶consructor,默认带super函数的constructor将会被添加、    super(&#39;cat&#39;,&#39;white&#39;);    this.action = action;  &amp;#125;  toString() &amp;#123;    console.log(super.toString());  &amp;#125; &amp;#125;
 var cat = new Cat(&#39;catch&#39;) cat.toString();

 console.log(cat instanceof Cat);  console.log(cat instanceof Animal); 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2模块化module&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2模块化module&#34;&gt;#&lt;/a&gt; 2. 模块化 (Module)&lt;/h3&gt;
&lt;p&gt;ES5 不支持原生的模块化，在 ES6 中模块作为重要的组成部分被添加进来。模块的功能主要由 export 和 import 组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过 export 来规定模块对外暴露的接口，通过 import 来引用其它模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突。&lt;/p&gt;
&lt;h4 id=&#34;导出export&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导出export&#34;&gt;#&lt;/a&gt; 导出 (export)&lt;/h4&gt;
&lt;p&gt;ES6 允许在一个模块中使用 export 来导出多个变量或函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;导出变量&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export var name = &#39;Rainbow&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;心得：ES6 不仅支持变量的导出，也支持常量的导出。  &lt;code&gt;export const sqrt =Math.sqrt;//导出常量&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ES6 将一个文件视为一个模块，上面的模块通过 export 向外输出了一个变量。一个模块也可以同时往外面输出多个变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; var name = &#39;Rainbow&#39;; var age = &#39;24&#39;; export &amp;#123;name, age&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;导出函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export function myModule(someArg) &amp;#123;  return someArg;&amp;#125;  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;导入import&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#导入import&#34;&gt;#&lt;/a&gt; 导入 (import)&lt;/h4&gt;
&lt;p&gt;定义好模块的输出以后就可以在另外一个模块通过 import 引用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &amp;#123;myModule&amp;#125; from &#39;myModule&#39;;import &amp;#123;name,age&amp;#125; from &#39;test&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;心得：一条 import 语句可以同时导入默认函数和其它变量。  &lt;code&gt;importdefaultMethod, &amp;#123; otherMethod &amp;#125; from &#39;xxx.js&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3箭头arrow函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3箭头arrow函数&#34;&gt;#&lt;/a&gt; 3. 箭头（Arrow）函数&lt;/h3&gt;
&lt;p&gt;这是 ES6 中最令人激动的特性之一。  &lt;code&gt;=&amp;gt;&lt;/code&gt;  不只是关键字 function 的简写，它还带来了其它好处。箭头函数与包围它的代码共享同一个  &lt;code&gt;this&lt;/code&gt; , 能帮你很好的解决 this 的指向问题。有经验的 JavaScript 开发者都熟悉诸如  &lt;code&gt;var self = this;&lt;/code&gt;  或  &lt;code&gt;var that =this&lt;/code&gt;  这种引用外围 this 的模式。但借助  &lt;code&gt;=&amp;gt;&lt;/code&gt; ，就不需要这种模式了。&lt;/p&gt;
&lt;h4 id=&#34;箭头函数的结构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#箭头函数的结构&#34;&gt;#&lt;/a&gt; 箭头函数的结构&lt;/h4&gt;
&lt;p&gt;箭头函数的箭头 =&amp;gt; 之前是一个空括号、单个的参数名、或用括号括起的多个参数名，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过 return 来返回值，否则返回的是 undefined）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;()=&amp;gt;1v=&amp;gt;v+1(a,b)=&amp;gt;a+b()=&amp;gt;&amp;#123;    alert(&amp;quot;foo&amp;quot;);&amp;#125;e=&amp;gt;&amp;#123;    if (e == 0)&amp;#123;        return 0;    &amp;#125;    return 1000/e;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;心得：不论是箭头函数还是 bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;卸载监听器时的陷阱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#卸载监听器时的陷阱&#34;&gt;#&lt;/a&gt; 卸载监听器时的陷阱&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;错误的做法&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class PauseMenu extends React.Component&amp;#123;    componentWillMount()&amp;#123;        AppStateIOS.addEventListener(&#39;change&#39;, this.onAppPaused.bind(this));    &amp;#125;    componentWillUnmount()&amp;#123;        AppStateIOS.removeEventListener(&#39;change&#39;, this.onAppPaused.bind(this));    &amp;#125;    onAppPaused(event)&amp;#123;    &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;正确的做法&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;class PauseMenu extends React.Component&amp;#123;    constructor(props)&amp;#123;        super(props);        this._onAppPaused = this.onAppPaused.bind(this);    &amp;#125;    componentWillMount()&amp;#123;        AppStateIOS.addEventListener(&#39;change&#39;, this._onAppPaused);    &amp;#125;    componentWillUnmount()&amp;#123;        AppStateIOS.removeEventListener(&#39;change&#39;, this._onAppPaused);    &amp;#125;    onAppPaused(event)&amp;#123;    &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除上述的做法外，我们还可以这样做：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class PauseMenu extends React.Component&amp;#123;    componentWillMount()&amp;#123;        AppStateIOS.addEventListener(&#39;change&#39;, this.onAppPaused);    &amp;#125;    componentWillUnmount()&amp;#123;        AppStateIOS.removeEventListener(&#39;change&#39;, this.onAppPaused);    &amp;#125;    onAppPaused = (event) =&amp;gt; &amp;#123;
    &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是：不论是 bind 还是箭头函数，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（譬如卸载监听器），那么你必须自己保存这个引用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4函数参数的默认值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4函数参数的默认值&#34;&gt;#&lt;/a&gt; 4. 函数参数的默认值&lt;/h3&gt;
&lt;p&gt;ES6 支持在定义函数的时候为其设置默认值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function foo(height = 50, color = &#39;red&#39;)&amp;#123;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;不使用默认值：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;function foo(height, color)&amp;#123;    var height = height || 50;    var color = color || &#39;red&#39;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样写一般没问题，但当  &lt;code&gt;参数的布尔值为false&lt;/code&gt;  时，就会有问题了。比如，我们这样调用 foo 函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;foo(0, &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为  &lt;code&gt;0的布尔值为false&lt;/code&gt; ，这样 height 的取值将是 50。同理 color 的取值为‘red’。&lt;/p&gt;
&lt;p&gt;所以说，  &lt;code&gt;函数参数默认值&lt;/code&gt; 不仅能是代码变得更加简洁而且能规避一些问题。&lt;/p&gt;
&lt;h3 id=&#34;5模板字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5模板字符串&#34;&gt;#&lt;/a&gt; 5. 模板字符串&lt;/h3&gt;
&lt;p&gt;ES6 支持  &lt;code&gt;模板字符串&lt;/code&gt; ，使得字符串的拼接更加的简洁、直观。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不使用模板字符串：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var name = &#39;Your name is &#39; + first + &#39; &#39; + last + &#39;.&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;使用模板字符串：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var name = `Your name is $&amp;#123;first&amp;#125; $&amp;#123;last&amp;#125;.`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 ES6 中通过  &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  就可以完成字符串的拼接，只需要将变量放在大括号之中。&lt;/p&gt;
&lt;p&gt;解构赋值语法是 JavaScript 的一种表达式，可以方便的从数组或者对象中快速提取值赋给定义的变量。&lt;/p&gt;
&lt;h4 id=&#34;获取数组中的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取数组中的值&#34;&gt;#&lt;/a&gt; 获取数组中的值&lt;/h4&gt;
&lt;p&gt;从数组中获取值并赋值到变量中，变量的顺序与数组中对象顺序对应。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var foo = [&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;, &amp;quot;four&amp;quot;];
var [one, two, three] = foo;console.log(one); console.log(two); console.log(three); 
//如果你要忽略某些值，你可以按照下面的写法获取你想要的值var [first, , , last] = foo;console.log(first); console.log(last); 
//你也可以这样写var a, b; 
[a, b] = [1, 2];console.log(a); console.log(b); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果没有从数组中的获取到值，你可以为变量设置一个默认值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a, b;
[a=5, b=7] = [1];console.log(a); console.log(b); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过解构赋值可以方便的交换两个变量的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = 1;var b = 3;
[a, b] = [b, a];console.log(a); console.log(b); 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;获取对象中的值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取对象中的值&#34;&gt;#&lt;/a&gt; 获取对象中的值&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;const student = &amp;#123;  name:&#39;Ming&#39;,  age:&#39;18&#39;,  city:&#39;Shanghai&#39;  &amp;#125;;
const &amp;#123;name,age,city&amp;#125; = student;console.log(name); console.log(age); console.log(city); 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7延展操作符spread-operator&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7延展操作符spread-operator&#34;&gt;#&lt;/a&gt; 7. 延展操作符 (Spread operator)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;延展操作符...&lt;/code&gt;  可以在函数调用 / 数组构造时，将数组表达式或者 string 在语法层面展开；还可以在构造对象时，将对象表达式按 key-value 的方式展开。&lt;/p&gt;
&lt;h4 id=&#34;语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#语法&#34;&gt;#&lt;/a&gt; 语法&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;函数调用：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;myFunction(...iterableObj);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;数组构造或字符串：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;[...iterableObj, &#39;4&#39;, ...&#39;hello&#39;, 6];
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;构造对象时，进行克隆或者属性拷贝（ECMAScript 2018 规范新增特性）：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;let objClone = &amp;#123; ...obj &amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#应用场景&#34;&gt;#&lt;/a&gt; 应用场景&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在函数调用时使用延展操作符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;function sum(x, y, z) &amp;#123;  return x + y + z;&amp;#125;const numbers = [1, 2, 3];

console.log(sum.apply(null, numbers));

console.log(sum(...numbers));
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;构造数组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;没有展开语法的时候，只能组合使用 push，splice，concat 等方法，来将已有数组元素变成新数组的一部分。有了展开语法，构造新数组会变得更简单、更优雅：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const stuendts = [&#39;Jine&#39;,&#39;Tom&#39;]; const persons = [&#39;Tony&#39;,... stuendts,&#39;Aaron&#39;,&#39;Anna&#39;];conslog.log(persions)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;和参数列表的展开类似， &lt;code&gt;...&lt;/code&gt;  在构造字数组时，可以在任意位置多次使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数组拷贝&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var arr = [1, 2, 3];var arr2 = [...arr]; arr2.push(4); console.log(arr2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;展开语法和 Object.assign () 行为一致，执行的都是浅拷贝 (只遍历一层)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;连接多个数组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var arr1 = [0, 1, 2];var arr2 = [3, 4, 5];var arr3 = [...arr1, ...arr2];//等同于var arr4 = arr1.concat(arr2);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;在ecmascript-2018中延展操作符增加了对对象的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在ecmascript-2018中延展操作符增加了对对象的支持&#34;&gt;#&lt;/a&gt; 在 ECMAScript 2018 中延展操作符增加了对对象的支持&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;var obj1 = &amp;#123; foo: &#39;bar&#39;, x: 42 &amp;#125;;var obj2 = &amp;#123; foo: &#39;baz&#39;, y: 13 &amp;#125;;
var clonedObj = &amp;#123; ...obj1 &amp;#125;;

var mergedObj = &amp;#123; ...obj1, ...obj2 &amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;javascript&lt;/p&gt;
&lt;h4 id=&#34;在react中的应用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#在react中的应用&#34;&gt;#&lt;/a&gt; 在 React 中的应用&lt;/h4&gt;
&lt;p&gt;通常我们在封装一个组件时，会对外公开一些 props 用于实现功能。大部分情况下在外部使用都应显示的传递 props 。但是当传递大量的 props 时，会非常繁琐，这时我们可以使用  &lt;code&gt;...(延展操作符,用于取出参数对象的所有可遍历属性)&lt;/code&gt;  来进行传递。&lt;/p&gt;
&lt;h4 id=&#34;一般情况下我们应该这样写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一般情况下我们应该这样写&#34;&gt;#&lt;/a&gt; 一般情况下我们应该这样写&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;CustomComponent name =&#39;Jine&#39; age =&amp;#123;21&amp;#125; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 … ，等同于上面的写法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;const params = &amp;#123;    name: &#39;Jine&#39;,    age: 21&amp;#125;&amp;lt;CustomComponent &amp;#123;...params&amp;#125; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;配合解构赋值避免传入一些不需要的参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var params = &amp;#123;    name: &#39;123&#39;,    title: &#39;456&#39;,    type: &#39;aaa&#39;&amp;#125;
var &amp;#123; type, ...other &amp;#125; = params;
&amp;lt;CustomComponent type=&#39;normal&#39; number=&amp;#123;2&amp;#125; &amp;#123;...other&amp;#125; /&amp;gt;//等同于&amp;lt;CustomComponent type=&#39;normal&#39; number=&amp;#123;2&amp;#125; name=&#39;123&#39; title=&#39;456&#39; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8对象属性简写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8对象属性简写&#34;&gt;#&lt;/a&gt; 8. 对象属性简写&lt;/h3&gt;
&lt;p&gt;在 ES6 中允许我们在设置一个对象的属性的时候不指定属性名。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不使用 ES6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;const name=&#39;Ming&#39;,age=&#39;18&#39;,city=&#39;Shanghai&#39;;
const student = &amp;#123;    name:name,    age:age,    city:city&amp;#125;;console.log(student);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对象中必须包含属性和值，显得非常冗余。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 ES6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;const name=&#39;Ming&#39;,age=&#39;18&#39;,city=&#39;Shanghai&#39;;
const student = &amp;#123;    name,    age,    city&amp;#125;;console.log(student);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对象中直接写变量，非常简洁。&lt;/p&gt;
&lt;h3 id=&#34;9promise&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9promise&#34;&gt;#&lt;/a&gt; 9.Promise&lt;/h3&gt;
&lt;p&gt;Promise 是异步编程的一种解决方案，比传统的解决方案 callback 更加的优雅。它最早由社区提出和实现的，ES6 将其写进了语言标准，统一了用法，原生提供了 Promise 对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不使用 ES6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;嵌套两个 setTimeout 回调函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setTimeout(function()&amp;#123;    console.log(&#39;Hello&#39;);     setTimeout(function()    &amp;#123;        console.log(&#39;Hi&#39;);     &amp;#125;, 1000);&amp;#125;, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 ES6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;var waitSecond = new Promise(function(resolve, reject)&amp;#123;    setTimeout(resolve, 1000);&amp;#125;);
waitSecond    .then(function()    &amp;#123;      console.log(&amp;quot;Hello&amp;quot;);       return waitSecond;    &amp;#125;)    .then(function()    &amp;#123;        console.log(&amp;quot;Hi&amp;quot;);     &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的的代码使用两个 then 来进行异步编程串行化，避免了回调地狱：&lt;/p&gt;
&lt;h3 id=&#34;10支持let与const&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10支持let与const&#34;&gt;#&lt;/a&gt; 10. 支持 let 与 const&lt;/h3&gt;
&lt;p&gt;在之前 JS 是没有块级作用域的，const 与 let 填补了这方便的空白，const 与 let 都是块级作用域。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 var 定义的变量为函数级作用域：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;  var a = 10;&amp;#125;
console.log(a); 
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 let 与 const 定义的变量为块级作用域：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;#123;  let a = 10;&amp;#125;
console.log(a); 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;三-es7新特性2016&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-es7新特性2016&#34;&gt;#&lt;/a&gt; 三、ES7 新特性（2016）&lt;/h2&gt;
&lt;p&gt;ES2016 添加了两个小的特性来说明标准化过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组 includes () 方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false。&lt;/li&gt;
&lt;li&gt;a ** b 指数运算符，它与 Math.pow (a, b) 相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1arrayprototypeincludes&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1arrayprototypeincludes&#34;&gt;#&lt;/a&gt; 1.Array.prototype.includes()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;includes()&lt;/code&gt;  函数用来判断一个数组是否包含一个指定的值，如果包含则返回  &lt;code&gt;true&lt;/code&gt; ，否则返回  &lt;code&gt;false&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;includes&lt;/code&gt;  函数与  &lt;code&gt;indexOf&lt;/code&gt;  函数很相似，下面两个表达式是等价的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr.includes(x)arr.indexOf(x) &amp;gt;= 0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来我们来判断数字中是否包含某个元素：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在 ES7 之前的做法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用  &lt;code&gt;indexOf()&lt;/code&gt;  验证数组中是否存在某个元素，这时需要根据返回值是否为 - 1 来判断：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let arr = [&#39;react&#39;, &#39;angular&#39;, &#39;vue&#39;];
if (arr.indexOf(&#39;react&#39;) !== -1)&amp;#123;    console.log(&#39;react存在&#39;);&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 ES7 的 includes ()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用 includes () 验证数组中是否存在某个元素，这样更加直观简单：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let arr = [&#39;react&#39;, &#39;angular&#39;, &#39;vue&#39;];
if (arr.includes(&#39;react&#39;))&amp;#123;    console.log(&#39;react存在&#39;);&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2指数操作符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2指数操作符&#34;&gt;#&lt;/a&gt; 2. 指数操作符&lt;/h3&gt;
&lt;p&gt;在 ES7 中引入了指数运算符  &lt;code&gt;**&lt;/code&gt; ，  &lt;code&gt;**&lt;/code&gt;  具有与  &lt;code&gt;Math.pow(..)&lt;/code&gt;  等效的计算结果。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不使用指数操作符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用自定义的递归函数 calculateExponent 或者 Math.pow () 进行指数运算：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function calculateExponent(base, exponent)&amp;#123;    if (exponent === 1)    &amp;#123;        return base;    &amp;#125;    else    &amp;#123;        return base * calculateExponent(base, exponent - 1);    &amp;#125;&amp;#125;
console.log(calculateExponent(2, 10)); console.log(Math.pow(2, 10)); 
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;使用指数操作符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用指数运算符 **，就像 +、- 等操作符一样：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;四-es8新特性2017&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-es8新特性2017&#34;&gt;#&lt;/a&gt; 四、ES8 新特性（2017）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;async/await&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.values()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.entries()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;String padding:  &lt;code&gt;padStart()&lt;/code&gt;  和  &lt;code&gt;padEnd()&lt;/code&gt; ，填充字符串达到当前长度&lt;/li&gt;
&lt;li&gt;函数参数列表结尾允许逗号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.getOwnPropertyDescriptors()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ShareArrayBuffer&lt;/code&gt;  和  &lt;code&gt;Atomics&lt;/code&gt;  对象，用于从共享内存位置读取和写入&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1asyncawait&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1asyncawait&#34;&gt;#&lt;/a&gt; 1.async/await&lt;/h3&gt;
&lt;p&gt;ES2018 引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了  &lt;code&gt;next()&lt;/code&gt;  方法返回一个 Promise。因此  &lt;code&gt;await&lt;/code&gt;  可以和  &lt;code&gt;for...of&lt;/code&gt;  循环一起使用，以串行的方式运行异步操作。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; array&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    &lt;span class=&#34;token function&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2objectvalues&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2objectvalues&#34;&gt;#&lt;/a&gt; 2.Object.values()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.values()&lt;/code&gt;  是一个与  &lt;code&gt;Object.keys()&lt;/code&gt;  类似的新函数，但返回的是 Object 自身属性的所有值，不包括继承的值。&lt;/p&gt;
&lt;p&gt;假设我们要遍历如下对象  &lt;code&gt;obj&lt;/code&gt;  的所有值：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;不使用 Object.values () :ES7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; vals&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vals&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;使用 Object.values () :ES8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; values&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;从上述代码中可以看出  &lt;code&gt;Object.values()&lt;/code&gt;  为我们省去了遍历 key，并根据这些 key 获取 value 的步骤。&lt;/p&gt;
&lt;h3 id=&#34;3objectentries&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3objectentries&#34;&gt;#&lt;/a&gt; 3.Object.entries()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.entries()&lt;/code&gt;  函数返回一个给定对象自身可枚举属性的键值对的数组。&lt;/p&gt;
&lt;p&gt;接下来我们来遍历上文中的  &lt;code&gt;obj&lt;/code&gt;  对象的所有属性的 key 和 value：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不使用 Object.entries () :ES7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;keys&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;key:&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; value:&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//key:b value:2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;使用 Object.entries () :ES8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;entries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;key: &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;key&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt; value:&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;value&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//key:b value:2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;4string-padding&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4string-padding&#34;&gt;#&lt;/a&gt; 4.String padding&lt;/h3&gt;
&lt;p&gt;在 ES8 中 String 新增了两个实例函数  &lt;code&gt;String.prototype.padStart&lt;/code&gt;  和  &lt;code&gt;String.prototype.padEnd&lt;/code&gt; ，允许将空字符串或其他字符串添加到原始字符串的开头或结尾。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;String.padStart(targetLength,[padString])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;targetLength: 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。&lt;/li&gt;
&lt;li&gt;padString:(可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 &amp;quot; &amp;quot;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0.0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;10&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0.0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;padStart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;String.padEnd(targetLength,padString])&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;targetLength: 当前字符串需要填充到的目标长度。如果这个数值小于当前字符串的长度，则返回当前字符串本身。&lt;/li&gt;
&lt;li&gt;padString:(可选) 填充字符串。如果字符串太长，使填充后的字符串长度超过了目标长度，则只保留最左侧的部分，其他部分会被截断，此参数的缺省值为 &amp;quot; &amp;quot;；&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0.0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;padEnd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0.0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;padEnd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;5函数参数列表结尾允许逗号&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5函数参数列表结尾允许逗号&#34;&gt;#&lt;/a&gt; 5. 函数参数列表结尾允许逗号&lt;/h3&gt;
&lt;p&gt;主要作用是方便使用 git 进行多人协作开发时修改同一个函数减少不必要的行变更。&lt;/p&gt;
&lt;h3 id=&#34;6objectgetownpropertydescriptors&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6objectgetownpropertydescriptors&#34;&gt;#&lt;/a&gt; 6.Object.getOwnPropertyDescriptors()&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.getOwnPropertyDescriptors()&lt;/code&gt;  函数用来获取一个对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数原型：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;返回  &lt;code&gt;obj&lt;/code&gt;  对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Jine&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token keyword&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;18&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getOwnPropertyDescriptors&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   age: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     enumerable: true,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     set: undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//   name: &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//     enumerable: true,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//        writable:true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;7sharedarraybuffer对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7sharedarraybuffer对象&#34;&gt;#&lt;/a&gt; 7.SharedArrayBuffer 对象&lt;/h3&gt;
&lt;p&gt;SharedArrayBuffer 对象用来表示一个通用的，固定长度的原始二进制数据缓冲区，类似于 ArrayBuffer 对象，它们都可以用来在共享内存（shared memory）上创建视图。与 ArrayBuffer 不同的是，SharedArrayBuffer 不能被分离。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new SharedArrayBuffer(length)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8atomics对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8atomics对象&#34;&gt;#&lt;/a&gt; 8.Atomics 对象&lt;/h3&gt;
&lt;p&gt;Atomics 对象提供了一组静态方法用来对 SharedArrayBuffer 对象进行原子操作。&lt;/p&gt;
&lt;p&gt;这些原子操作属于 Atomics 模块。与一般的全局对象不同，Atomics 不是构造函数，因此不能使用 new 操作符调用，也不能将其当作函数直接调用。Atomics 的所有属性和方法都是静态的（与 Math 对象一样）。&lt;/p&gt;
&lt;p&gt;多个共享内存的线程能够同时读写同一位置上的数据。原子操作会确保正在读或写的数据的值是符合预期的，即下一个原子操作一定会在上一个原子操作结束后才会开始，其操作过程不会中断。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将指定位置上的数组元素与给定的值相加，并返回相加前该元素的值。&lt;/p&gt;
&lt;p&gt;将指定位置上的数组元素与给定的值相与，并返回与操作前该元素的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Atomics.compareExchange()&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果数组中指定的元素与给定的值相等，则将其更新为新的值，并返回该元素原先的值。&lt;/p&gt;
&lt;p&gt;将数组中指定的元素更新为给定的值，并返回该元素更新前的值。&lt;/p&gt;
&lt;p&gt;返回数组中指定元素的值。&lt;/p&gt;
&lt;p&gt;将指定位置上的数组元素与给定的值相或，并返回或操作前该元素的值。&lt;/p&gt;
&lt;p&gt;将数组中指定的元素设置为给定的值，并返回该值。&lt;/p&gt;
&lt;p&gt;将指定位置上的数组元素与给定的值相减，并返回相减前该元素的值。&lt;/p&gt;
&lt;p&gt;将指定位置上的数组元素与给定的值相异或，并返回异或操作前该元素的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;wait () 和 wake () 方法采用的是 Linux 上的 futexes 模型（fast user-space mutex，快速用户空间互斥量），可以让进程一直等待直到某个特定的条件为真，主要用于实现阻塞。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;检测数组中某个指定位置上的值是否仍然是给定值，是则保持挂起直到被唤醒或超时。返回值为 “ok”、“not-equal” 或 “time-out”。调用时，如果当前线程不允许阻塞，则会抛出异常（大多数浏览器都不允许在主线程中调用 wait ()）。&lt;/p&gt;
&lt;p&gt;唤醒等待队列中正在数组指定位置的元素上等待的线程。返回值为成功唤醒的线程数量。&lt;/p&gt;
&lt;p&gt;可以用来检测当前系统是否支持硬件级的原子操作。对于指定大小的数组，如果当前系统支持硬件级的原子操作，则返回 true；否则就意味着对于该数组，Atomics 对象中的各原子操作都只能用锁来实现。此函数面向的是技术专家。–&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;五-es9新特性2018&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-es9新特性2018&#34;&gt;#&lt;/a&gt; 五、ES9 新特性（2018）&lt;/h2&gt;
&lt;h3 id=&#34;1异步迭代&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1异步迭代&#34;&gt;#&lt;/a&gt; 1. 异步迭代&lt;/h3&gt;
&lt;p&gt;在  &lt;code&gt;async/await&lt;/code&gt;  的某些时刻，你可能尝试在同步循环中调用异步函数。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; array&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这段代码不会正常运行，下面这段同样也不会：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这段代码中，循环本身依旧保持同步，并在在内部异步函数之前全部调用完成。&lt;/p&gt;
&lt;p&gt;ES2018 引入异步迭代器（asynchronous iterators），这就像常规迭代器，除了  &lt;code&gt;next()&lt;/code&gt;  方法返回一个 Promise。因此  &lt;code&gt;await&lt;/code&gt;  可以和  &lt;code&gt;for...of&lt;/code&gt;  循环一起使用，以串行的方式运行异步操作。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; array&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    &lt;span class=&#34;token function&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2promisefinally&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2promisefinally&#34;&gt;#&lt;/a&gt; 2.Promise.finally()&lt;/h3&gt;
&lt;p&gt;一个 Promise 调用链要么成功到达最后一个  &lt;code&gt;.then()&lt;/code&gt; ，要么失败触发  &lt;code&gt;.catch()&lt;/code&gt; 。在某些情况下，你想要在无论 Promise 运行成功还是失败，运行相同的代码，例如清除，删除对话，关闭数据库连接等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.finally()&lt;/code&gt;  允许你指定最终的逻辑：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;doSomething&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token function&#34;&gt;doSomething1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;doSomething2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;doSomething3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;err&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;finally&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;3restspread-属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3restspread-属性&#34;&gt;#&lt;/a&gt; 3.Rest/Spread 属性&lt;/h3&gt;
&lt;p&gt;ES2015 引入了 Rest 参数和扩展运算符。三个点（…）仅用于数组。Rest 参数语法允许我们将一个不定数量的参数表示为一个数组。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;restParam&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;restParam&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;p1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;p3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// p2 = 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;展开操作符以相反的方式工作，将数组转换成可传递给函数的单独参数。例如  &lt;code&gt;Math.max()&lt;/code&gt;  返回给定数字中的最大值：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; values &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;99&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 100&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;ES2018 为对象解构提供了和数组一样的 Rest 参数（）和展开操作符，一个简单的例子：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; myObject &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;x &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; myObject&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// x = &amp;#123; b: 2, c: 3 &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;或者你可以使用它给函数传递参数：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;restParam&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token literal-property property&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;restParam&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;x &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// x = &amp;#123; b: 2, c: 3 &amp;#125;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;跟数组一样，Rest 参数只能在声明的结尾处使用。此外，它只适用于每个对象的顶层，如果对象中嵌套对象则无法适用。&lt;/p&gt;
&lt;p&gt;扩展运算符可以在其他对象内使用，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;obj1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token literal-property property&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以使用扩展运算符拷贝一个对象，像是这样  &lt;code&gt;obj2 = &amp;#123;...obj1&amp;#125;&lt;/code&gt; ，但是 &lt;strong&gt;这只是一个对象的浅拷贝&lt;/strong&gt;。另外，如果一个对象 A 的属性是对象 B，那么在克隆后的对象 cloneB 中，该属性指向对象 B。&lt;/p&gt;
&lt;h3 id=&#34;4正则表达式命名捕获组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4正则表达式命名捕获组&#34;&gt;#&lt;/a&gt; 4. 正则表达式命名捕获组&lt;/h3&gt;
&lt;p&gt;JavaScript 正则表达式可以返回一个匹配的对象 —— 一个包含匹配字符串的类数组，例如：以  &lt;code&gt;YYYY-MM-DD&lt;/code&gt;  的格式解析日期：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt;  reDate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;([0-9]&amp;#123;4&amp;#125;)-([0-9]&amp;#123;2&amp;#125;)-([0-9]&amp;#123;2&amp;#125;)&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  match  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; reDate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2018-04-30&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  year   &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;   month  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;   day    &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样的代码很难读懂，并且改变正则表达式的结构有可能改变匹配对象的索引。&lt;/p&gt;
&lt;p&gt;ES2018 允许命名捕获组使用符号  &lt;code&gt;?&amp;lt;name&amp;gt;&lt;/code&gt; ，在打开捕获括号  &lt;code&gt;(&lt;/code&gt; 后立即命名，示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt;  reDate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;(?&amp;lt;year&gt;[0-9]&amp;#123;4&amp;#125;)-(?&amp;lt;month&gt;[0-9]&amp;#123;2&amp;#125;)-(?&amp;lt;day&gt;[0-9]&amp;#123;2&amp;#125;)&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  match  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; reDate&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2018-04-30&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  year   &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;groups&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;year&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    month  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;groups&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;month&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 04  day    = match.groups.day;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;任何匹配失败的命名组都将返回  &lt;code&gt;undefined&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;命名捕获也可以使用在  &lt;code&gt;replace()&lt;/code&gt;  方法中。例如将日期转换为美国的 MM-DD-YYYY 格式：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt;  reDate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;(?&amp;lt;year&gt;[0-9]&amp;#123;4&amp;#125;)-(?&amp;lt;month&gt;[0-9]&amp;#123;2&amp;#125;)-(?&amp;lt;day&gt;[0-9]&amp;#123;2&amp;#125;)&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2018-04-30&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      usDate &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reDate&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;$&amp;lt;month&gt;-$&amp;lt;day&gt;-$&amp;lt;year&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;5正则表达式反向断言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5正则表达式反向断言&#34;&gt;#&lt;/a&gt; 5. 正则表达式反向断言&lt;/h3&gt;
&lt;p&gt;目前 JavaScript 在正则表达式中支持先行断言（lookahead）。这意味着匹配会发生，但不会有任何捕获，并且断言没有包含在整个匹配字段中。例如从价格中捕获货币符号：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt;  reLookahead &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\D(?=\d+)&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;match &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; reLookahead&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;$123.89&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;ES2018 引入以相同方式工作但是匹配前面的反向断言（lookbehind），这样我就可以忽略货币符号，单纯的捕获价格的数字：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt;  reLookbehind &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;(?&amp;lt;=\D)\d+&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;match &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; reLookbehind&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;$123.89&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以上是 &lt;strong&gt;肯定反向断言&lt;/strong&gt;，非数字  &lt;code&gt;\D&lt;/code&gt;  必须存在。同样的，还存在 &lt;strong&gt;否定反向断言&lt;/strong&gt;，表示一个值必须不存在，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt;  reLookbehindNeg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;(?&amp;lt;!\D)\d+&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;match &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; reLookbehind&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;$123.89&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; match&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;6正则表达式dotall模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6正则表达式dotall模式&#34;&gt;#&lt;/a&gt; 6. 正则表达式 dotAll 模式&lt;/h3&gt;
&lt;p&gt;正则表达式中点  &lt;code&gt;.&lt;/code&gt;  匹配除回车外的任何单字符，标记  &lt;code&gt;s&lt;/code&gt;  改变这种行为，允许行终止符的出现，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;hello.world&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello\nworld&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;hello.world&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-flags&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hello\nworld&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;7正则表达式-unicode-转义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7正则表达式-unicode-转义&#34;&gt;#&lt;/a&gt; 7. 正则表达式 Unicode 转义&lt;/h3&gt;
&lt;p&gt;到目前为止，在正则表达式中本地访问 Unicode 字符属性是不被允许的。ES2018 添加了 Unicode 属性转义 —— 形式为  &lt;code&gt;\p&amp;#123;...&amp;#125;&lt;/code&gt;  和  &lt;code&gt;\P&amp;#123;...&amp;#125;&lt;/code&gt; ，在正则表达式中使用标记  &lt;code&gt;u&lt;/code&gt;  (unicode) 设置，在  &lt;code&gt;\p&lt;/code&gt;  块儿内，可以以键值对的方式设置需要匹配的属性而非具体内容。例如：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; reGreekSymbol &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;\p&amp;#123;Script=Greek&amp;#125;&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-flags&#34;&gt;u&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;reGreekSymbol&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;π&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此特性可以避免使用特定 Unicode 区间来进行内容类型判断，提升可读性和可维护性。&lt;/p&gt;
&lt;h3 id=&#34;8非转义序列的模板字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8非转义序列的模板字符串&#34;&gt;#&lt;/a&gt; 8. 非转义序列的模板字符串&lt;/h3&gt;
&lt;p&gt;之前，  &lt;code&gt;\u&lt;/code&gt;  开始一个 unicode 转义，  &lt;code&gt;\x&lt;/code&gt;  开始一个十六进制转义，  &lt;code&gt;\&lt;/code&gt;  后跟一个数字开始一个八进制转义。这使得创建特定的字符串变得不可能，例如 Windows 文件路径  &lt;code&gt;C:\uuu\xxx\111&lt;/code&gt; 。更多细节参考模板字符串。&lt;/p&gt;
&lt;h2 id=&#34;六-es10新特性2019&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-es10新特性2019&#34;&gt;#&lt;/a&gt; 六、ES10 新特性（2019）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与 JSON 匹配&lt;/li&gt;
&lt;li&gt;更加友好的 JSON.stringify&lt;/li&gt;
&lt;li&gt;新增了 Array 的  &lt;code&gt;flat()&lt;/code&gt;  方法和  &lt;code&gt;flatMap()&lt;/code&gt;  方法&lt;/li&gt;
&lt;li&gt;新增了 String 的  &lt;code&gt;trimStart()&lt;/code&gt;  方法和  &lt;code&gt;trimEnd()&lt;/code&gt;  方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Object.fromEntries()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol.prototype.description&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;String.prototype.matchAll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function.prototype.toString()&lt;/code&gt;  现在返回精确字符，包括空格和注释&lt;/li&gt;
&lt;li&gt;简化  &lt;code&gt;try &amp;#123;&amp;#125; catch &amp;#123;&amp;#125;&lt;/code&gt; , 修改  &lt;code&gt;catch&lt;/code&gt;  绑定&lt;/li&gt;
&lt;li&gt;新的基本数据类型  &lt;code&gt;BigInt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;globalThis&lt;/li&gt;
&lt;li&gt;import()&lt;/li&gt;
&lt;li&gt;Legacy RegEx&lt;/li&gt;
&lt;li&gt;私有的实例方法和访问器&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1行分隔符u-2028和段分隔符u-2029符号现在允许在字符串文字中与json匹配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1行分隔符u-2028和段分隔符u-2029符号现在允许在字符串文字中与json匹配&#34;&gt;#&lt;/a&gt; 1. 行分隔符（U + 2028）和段分隔符（U + 2029）符号现在允许在字符串文字中，与 JSON 匹配&lt;/h3&gt;
&lt;p&gt;以前，这些符号在字符串文字中被视为行终止符，因此使用它们会导致 SyntaxError 异常。&lt;/p&gt;
&lt;h3 id=&#34;2更加友好的-jsonstringify&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2更加友好的-jsonstringify&#34;&gt;#&lt;/a&gt; 2. 更加友好的 JSON.stringify&lt;/h3&gt;
&lt;p&gt;如果输入 Unicode 格式但是超出范围的字符，在原先 JSON.stringify 返回格式错误的 Unicode 字符串。现在实现了一个改变 JSON.stringify 的第 3 阶段提案，因此它为其输出转义序列，使其成为有效 Unicode（并以 UTF-8 表示）&lt;/p&gt;
&lt;h3 id=&#34;3新增了array的-flat方法和-flatmap方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3新增了array的-flat方法和-flatmap方法&#34;&gt;#&lt;/a&gt; 3. 新增了 Array 的  &lt;code&gt;flat()&lt;/code&gt;  方法和  &lt;code&gt;flatMap()&lt;/code&gt;  方法&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;flat()&lt;/code&gt;  和  &lt;code&gt;flatMap()&lt;/code&gt;  本质上就是是归纳（reduce） 与 合并（concat）的操作。&lt;/p&gt;
&lt;h4 id=&#34;arrayprototypeflat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arrayprototypeflat&#34;&gt;#&lt;/a&gt; Array.prototype.flat()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;flat()&lt;/code&gt;  方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;arr2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;arr3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 使用 Infinity 作为深度，展开任意深度的嵌套数组 arr3.flat (Infinity);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;其次，还可以利用  &lt;code&gt;flat()&lt;/code&gt;  方法的特性来去除数组的空项&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr4 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;arr4&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;arrayprototypeflatmap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arrayprototypeflatmap&#34;&gt;#&lt;/a&gt; Array.prototype.flatMap()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;flatMap()&lt;/code&gt;  方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值 1 的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。 这里我们拿 map 方法与 flatMap 方法做一个比较。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;flatMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 只会将 flatMap 中的函数返回的数组 “压平” 一层 arr1.flatMap (x =&gt; [[x * 2]]);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;4新增了string的-trimstart方法和-trimend方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4新增了string的-trimstart方法和-trimend方法&#34;&gt;#&lt;/a&gt; 4. 新增了 String 的  &lt;code&gt;trimStart()&lt;/code&gt;  方法和  &lt;code&gt;trimEnd()&lt;/code&gt;  方法&lt;/h3&gt;
&lt;p&gt;新增的这两个方法很好理解，分别去除字符串首尾空白字符，这里就不用例子说声明了。&lt;/p&gt;
&lt;h3 id=&#34;5-objectfromentries&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5-objectfromentries&#34;&gt;#&lt;/a&gt; 5.  &lt;code&gt;Object.fromEntries()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Object.entries()&lt;/code&gt;  方法的作用是返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for…in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环也枚举原型链中的属性）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;而 Object.fromEntries () 则是 Object.entries () 的反转。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Object.fromEntries()&lt;/code&gt;  函数传入一个键值对的列表，并返回一个带有这些键值对的新对象。这个迭代参数应该是一个能够实现 @iterator 方法的的对象，返回一个迭代器对象。它生成一个具有两个元素的类似数组的对象，第一个元素是将用作属性键的值，第二个元素是与该属性键关联的值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 Object.fromEntries， 可以将 Map 转化为 Object:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;foo&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;baz&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fromEntries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;map&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;通过 Object.fromEntries， 可以将 Array 转化为 Object:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; obj &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fromEntries&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;6-symbolprototypedescription&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6-symbolprototypedescription&#34;&gt;#&lt;/a&gt; 6.  &lt;code&gt;Symbol.prototype.description&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;通过工厂函数 Symbol（）创建符号时，您可以选择通过参数提供字符串作为描述：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; sym &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Symbol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;The description&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;以前，访问描述的唯一方法是将符号转换为字符串：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;assert&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sym&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Symbol(The description)&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;现在引入了 getter Symbol.prototype.description 以直接访问描述：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;assert&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sym&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;description&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;The description&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;7-stringprototypematchall&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7-stringprototypematchall&#34;&gt;#&lt;/a&gt; 7.  &lt;code&gt;String.prototype.matchAll&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;matchAll()&lt;/code&gt;  方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。 在 matchAll 出现之前，通过在循环中调用 regexp.exec 来获取所有匹配项信息（regexp 需使用 /g 标志：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; regexp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;foo*&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;g&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;table football, foosball&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;matches &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; regexp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;Found &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;matches&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;. Next starts at &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;regexp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lastIndex&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// expected output: &#34;Found foo. Next starts at 19.&#34;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果使用 matchAll ，就可以不必使用 while 循环加 exec 方式（且正则表达式需使用／g 标志）。使用 matchAll 会得到一个迭代器的返回值，配合 for…of, array spread, or Array.from () 可以更方便实现功能：&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; regexp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;foo*&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;g&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;table football, foosball&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; matches &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matchAll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;regexp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; match &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; matches&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;  console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;match&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// Array [ &#34;foo&#34; ]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// Call matchAll again to create a new iteratormatches = str.matchAll(regexp);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;matches&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token parameter&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; m&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;matchall可以更好的用于分组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#matchall可以更好的用于分组&#34;&gt;#&lt;/a&gt; matchAll 可以更好的用于分组&lt;/h4&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; regexp &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token regex&#34;&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-source language-regex&#34;&gt;t(e)(st(\d?))&lt;/span&gt;&lt;span class=&#34;token regex-delimiter&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token regex-flags&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;test1test2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;regexp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; array &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;...&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;matchAll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;regexp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;array&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;array&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;8-functionprototypetostring现在返回精确字符包括空格和注释&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8-functionprototypetostring现在返回精确字符包括空格和注释&#34;&gt;#&lt;/a&gt; 8.  &lt;code&gt;Function.prototype.toString()&lt;/code&gt;  现在返回精确字符，包括空格和注释&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;/* comment */&lt;/span&gt; foo &lt;span class=&#34;token comment&#34;&gt;/* another comment */&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;foo&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// ES2019 会把注释一同打印 console.log (foo.toString ()); &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 箭头函数 const bar  = /* another comment */ () =&gt; &amp;#123;&amp;#125;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;bar&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;9修改-catch-绑定&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9修改-catch-绑定&#34;&gt;#&lt;/a&gt; 9. 修改  &lt;code&gt;catch&lt;/code&gt;  绑定&lt;/h3&gt;
&lt;p&gt;在 ES10 之前，我们必须通过语法为 catch 子句绑定异常变量，无论是否有必要。很多时候 catch 块是多余的。 ES10 提案使我们能够简单的把变量省略掉。&lt;/p&gt;
&lt;p&gt;不算大的改动。&lt;/p&gt;
&lt;p&gt;之前是&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;现在是&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;10新的基本数据类型-bigint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10新的基本数据类型-bigint&#34;&gt;#&lt;/a&gt; 10. 新的基本数据类型  &lt;code&gt;BigInt&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;现在的基本数据类型（值类型）不止 5 种（ES6 之后是六种）了哦！加上 BigInt 一共有七种基本数据类型，分别是： String、Number、Boolean、Null、Undefined、Symbol、BigInt&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/a_Hexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/TOC%E6%8C%87%E5%8D%97/</guid>
            <title>TOC指南</title>
            <link>https://dukeshao.com/2022/07/13/a_Hexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/TOC%E6%8C%87%E5%8D%97/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:03 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;markdown标题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#markdown标题&#34;&gt;#&lt;/a&gt; markdown 标题&lt;/h1&gt;
&lt;p&gt;在书写 Markdown 标题时，要注意不要跨级设置标题，hexo 生成 TOC 时或出现错乱问题&lt;/p&gt;
&lt;h1 id=&#34;免费随机acg图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#免费随机acg图&#34;&gt;#&lt;/a&gt; 免费随机 ACG 图&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9waWMuZ2ltaG95LmNvbS9hY2c=&#34;&gt;https://pic.gimhoy.com/acg&lt;/span&gt;&lt;br&gt;
 每次想拿一张随机 ACG 图，刷新页面就好，将图片在新页签打开，然后复制 URL 使用&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/cookie_%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
            <title>cookie_本地存储_设计模式</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/cookie_%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8_%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:02 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;网络知识&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络知识&#34;&gt;#&lt;/a&gt; 网络知识&lt;/h1&gt;
&lt;h2 id=&#34;通信协议&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通信协议&#34;&gt;#&lt;/a&gt; 通信协议&lt;/h2&gt;
&lt;p&gt;通信规则，设备与设备之间通信时共同遵守的规则&lt;/p&gt;
&lt;h2 id=&#34;tcpudpip&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tcpudpip&#34;&gt;#&lt;/a&gt; TCP/UDP/IP&lt;/h2&gt;
&lt;p&gt;IP： Internet Protocol（网络之间互连的协议），规定了计算机在因特网上进行通信时应当遵守的规则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP 地址：4 个字节，一共 32 位 ，用来标识设备在网络中的位置&lt;/li&gt;
&lt;li&gt;本机 ip 127.0.0.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TCP：Transmission Control Protocol（传输控制协议）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TCP 面向连接的协议（通信之前必须先建立连接）&lt;/li&gt;
&lt;li&gt;TCP 相对可靠，它建立连接的过程称为 3 次握手&lt;/li&gt;
&lt;li&gt;经历 3 次握手，才能建立连接&lt;/li&gt;
&lt;li&gt;所有的消息传送，需要对方确认送达&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;// 正常通信&lt;br&gt;
 A：“土豆，土豆，我是茄子，收到请回答”&lt;br&gt;
B：“茄子，茄子，我是土豆，收到消息，有什么指示？”&lt;br&gt;
A：“没事，没事，我以为你挂了呢”&lt;br&gt;
A：“开始传送消息…”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;// 如果对方没回应，则不断重复发送当前消息，直至对方收到回应为止。&lt;br&gt;
A：“茄子，茄子，我是土豆，我被人油炸了，现在改名叫薯片，收到请回答”&lt;br&gt;
…&lt;br&gt;
A：“茄子，茄子，我是土豆，我被人油炸了，现在改名叫薯片，收到请回答，第 2 遍”&lt;br&gt;
…&lt;br&gt;
A：“茄子，茄子，我是土豆，我被人油炸了，现在改名叫薯片，收到请回答，第 3 遍”&lt;br&gt;
…&lt;br&gt;
B：“薯片，薯片，我收到消息”&lt;br&gt;
 因此可以确保数据的准确送达&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;UDP: 面向数据报的协议 (不可靠的协议)，如果 TCP 比作是打电话，那么 UDP 就是在发短信&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无需建立连接，发送消息也无需对方确认&lt;/li&gt;
&lt;li&gt;无法保证数据的发送顺序，以及准确率&lt;/li&gt;
&lt;li&gt;UDP 通常用于视频、语音等通信（丢掉了一帧画面是无所谓的）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;httphttps&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#httphttps&#34;&gt;#&lt;/a&gt; http/https&lt;/h2&gt;
&lt;p&gt;超文本传输协议 HyperText Transfer Protocol，基于 TCP 协议的一种高级协议，用于客户端和服务器直接的通信.&lt;/p&gt;
&lt;p&gt;http 的特点是，请求完成后就立即断开与服务器的连接&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点:&lt;br&gt;
 通信使用明文（不加密），内容可能会被窃听&lt;br&gt;
不适用特定的 Web 服务器，如：聊天室，消息广播&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;socket&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#socket&#34;&gt;#&lt;/a&gt; socket&lt;/h2&gt;
&lt;p&gt;是一种通信模式，客户端与服务端一直保持着连接，用于随时传输数据&lt;/p&gt;
&lt;h1 id=&#34;cookie&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cookie&#34;&gt;#&lt;/a&gt; cookie&lt;/h1&gt;
&lt;h2 id=&#34;cookie的概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cookie的概念&#34;&gt;#&lt;/a&gt; cookie 的概念&lt;/h2&gt;
&lt;p&gt;cookie 是客户端与服务器端进行通讯使用的一个能够在浏览器本地化存储的技术&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：chrome 不支持本地文件的 cookie 读写&lt;/p&gt;
&lt;p&gt;数量 50 个（不同浏览器值不同）&lt;/p&gt;
&lt;p&gt;大小 4k（不同浏览器值不同）&lt;/p&gt;
&lt;p&gt;只能写入字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;cookie的基本设置及获取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cookie的基本设置及获取&#34;&gt;#&lt;/a&gt; cookie 的基本设置及获取&lt;/h2&gt;
&lt;p&gt;一次只能写入一个 cookie&lt;/p&gt;
&lt;p&gt;一次性读取所有 cookie，是一个字符串。里面的多个 cookir 值用分号；隔开&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 设置:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;name=value&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 读取：读取根目录下能访问的所有 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;cookie的组成部分&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cookie的组成部分&#34;&gt;#&lt;/a&gt; cookie 的组成部分&lt;/h2&gt;
&lt;p&gt;格式： &lt;code&gt;name=value[;expire=xx][;path=/][;domain=xx]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;expire 有效期
&lt;ul&gt;
&lt;li&gt;默认 Session，临时 cookie，关闭浏览器会被清除&lt;/li&gt;
&lt;li&gt;格式 &lt;code&gt;&#39;expire=&#39; + d.toUTCString&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;path 保存 cookie 的位置
&lt;ul&gt;
&lt;li&gt;默认当前 html 所在目录&lt;/li&gt;
&lt;li&gt;格式 &lt;code&gt;path=/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;domain 域名
&lt;ul&gt;
&lt;li&gt;默认当前域名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#案例&#34;&gt;#&lt;/a&gt; 案例&lt;/h2&gt;
&lt;p&gt;封装 cookie 的操作&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; Cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function-variable function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 1. 先获取所有 cookie，若 cookie 没有值，返回空字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 2. 拆分每一个 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cookies&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;path&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token comment&#34;&gt;// 拼接字符串&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; key &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;=&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;date&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            str &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;;expires=&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; date&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toUTCString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            str &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;;path=&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;path&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token comment&#34;&gt;// 获取过期的日期，重新设置 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;x&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 清空 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;保存图片拖拽位置&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 1. 鼠标松开，保存图片位置。即设置 cookie：保存 left,top&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;left=&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; girl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;left&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//100px&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;top=&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; girl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;top&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//100px&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 2. 页面加载，获取 cookie：获取 top,left&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 得到所有 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//3. 遍历数组，找出 top,left, 给图片设置位置&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;cookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cookie&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;left&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;top&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	girl&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;七天免登陆&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;btnSubmit&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onclick&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token comment&#34;&gt;// 5. 表单 submit 按下即提交，不管满不满足条件。所以阻止默认行为&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preventDefault&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 1. 获取用户名密码&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; _username &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; username&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;trim&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; _password &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//2. 若用户名长度为 0，退出函数。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;_username&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;用户名不能为空&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//3. 判断是否勾选 &#34;7 天内免登陆&#34; 选项。若勾选保存 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;checkbox&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;checked&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//d 此时是一个 UTC 时间对象，转成字符串格式&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;username=&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; _username &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;;expires=&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toUTCString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//4. 不管有没有勾选，点击提交，显示跳转页面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	location&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;href &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://www.baidu.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 6. 下一次访问：判断页面是否存在 cookie，是否存在 username 的 cookie，若存在自动登录，即自动跳转到百度&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//（1）判断页面是否存在 cookie，即 cookie 长度不为 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cookies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cookies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;=&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//（2）是否存在 username 的 cookie&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;username&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        	location&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;href &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://www.baidu.com&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;本地存储web-storage&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本地存储web-storage&#34;&gt;#&lt;/a&gt; 本地存储 Web Storage&lt;/h1&gt;
&lt;h2 id=&#34;好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#好处&#34;&gt;#&lt;/a&gt; 好处&lt;/h2&gt;
&lt;p&gt;减少网络流量：一旦数据保存在本地后，就可以避免再向服务器请求数据，因此减少不必要的数据请求，减少数据在浏览器和服务器间不必要地来回传递。&lt;/p&gt;
&lt;p&gt;快速显示数据：性能好，从本地读数据比通过网络从服务器获得数据快得多，本地数据可以即时获得。再加上网页本身也可以有缓存，因此整个页面和数据都在本地的话，可以立即显示。&lt;/p&gt;
&lt;p&gt;临时存储：很多时候数据只需要在用户浏览一组页面期间使用，关闭窗口后数据就可以丢弃了，这种情况使用 sessionStorage 非常方便。&lt;/p&gt;
&lt;h2 id=&#34;局限&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#局限&#34;&gt;#&lt;/a&gt; 局限&lt;/h2&gt;
&lt;p&gt;1、浏览器的大小不统一，并且在 IE8 以上的 IE 版本才支持 localStorage 这个属性&lt;/p&gt;
&lt;p&gt;2、目前所有的浏览器中都会把 localStorage 的值类型限定为 string 类型，这个在对我们日常比较常见的 JSON 对象类型需要一些转换&lt;/p&gt;
&lt;h2 id=&#34;增删改查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增删改查&#34;&gt;#&lt;/a&gt; 增删改查&lt;/h2&gt;
&lt;h3 id=&#34;写入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写入&#34;&gt;#&lt;/a&gt; 写入&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;！window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;localStorage&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;浏览器不支持localstorage&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; storage&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;localStorage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 写入 a 字段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    storage&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 写入 b 字段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 写入 c 字段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; storage&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; storage&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; storage&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;读取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读取&#34;&gt;#&lt;/a&gt; 读取&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; storage&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;localStorage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第一种方法读取&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第二种方法读取&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 第三种方法读取&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; c&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;修改同写入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#修改同写入&#34;&gt;#&lt;/a&gt; 修改（同写入）&lt;/h3&gt;
&lt;h3 id=&#34;删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除&#34;&gt;#&lt;/a&gt; 删除&lt;/h3&gt;
&lt;p&gt;1、将 localStorage 的所有内容清除&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; storage&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;localStorage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2、 将 localStorage 中的某个键值对删除&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; storage&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;localStorage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;removeItem&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;获取键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取键&#34;&gt;#&lt;/a&gt; 获取键&lt;/h2&gt;
&lt;p&gt;使用 key () 方法，向其中出入索引即可获取对应的键&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; storage&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;localStorage&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;storage&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;sessionstorage-localstorage-cookie的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sessionstorage-localstorage-cookie的区别&#34;&gt;#&lt;/a&gt; sessionStorage、localStorage、cookie 的区别&lt;/h1&gt;
&lt;h2 id=&#34;共同点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#共同点&#34;&gt;#&lt;/a&gt; 共同点：&lt;/h2&gt;
&lt;p&gt;都是保存在浏览器端，并且是同源的（URL 的协议、端口、主机名是相同的，只要有一个不同就属于不同源）&lt;/p&gt;
&lt;h2 id=&#34;不同点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同点&#34;&gt;#&lt;/a&gt; 不同点：&lt;/h2&gt;
&lt;p&gt;1、cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递，而 sessionStorage 和 localStorage 不会自动把数据发送给服务器，仅在本地保存。cookie 数据还有路径（path）的概念，可以限制 cookie 只属于某个路径下。&lt;/p&gt;
&lt;p&gt;2、存储大小限制也不同，cookie 数据不能超过 4K，同时因为每次 http 请求都会携带 cookie、所以 cookie 只适合&lt;/p&gt;
&lt;p&gt;保存很小的数据，如会话标识。sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。&lt;/p&gt;
&lt;p&gt;3、数据有效期不同，sessionStorage 仅仅在当前浏览器窗口关闭之前有效；localStorage 始终有效，窗口或者&lt;/p&gt;
&lt;p&gt;浏览器关闭之后也一直保存，因此作用持久数据；cookie，只在设置 cookie 过期时间之前有效，即使窗口关闭或者浏览器关闭。&lt;/p&gt;
&lt;p&gt;4、作用域不同：sessionStorage 在不同的浏览器窗口中不共享，即使是同一个页面，localStorage 在所有的同源窗口中是共享的，cookie 也是在所有同源的窗口中共享的。（只要 URL 的协议、端口、主机名三者中有一个不同，就属于不同的文档源）&lt;/p&gt;
&lt;h1 id=&#34;json&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#json&#34;&gt;#&lt;/a&gt; JSON&lt;/h1&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* 转换&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * 对象/数组 -&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; json字符串：JSON.stringify&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * json字符串 -&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; 对象/数组：JSON.parse&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* 格式：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * 属性名和字符串必须使用双引号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * 不能有注释&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * 不能存在多余逗号&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* 属性值必须为以下类型&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * String&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * Number&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * Boolean&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * Object&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * Array&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    * Null&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;案例-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#案例-2&#34;&gt;#&lt;/a&gt; 案例&lt;/h2&gt;
&lt;p&gt;将商品添加到购物车列表&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 3. 每次刷新，拿到上一次的存放值。第一次是为空数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// * 若已经存在值，默认为 JSON 字符串，要转回数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; goodslist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Cookie&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;goodslist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; goodslist &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;string&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goodslist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;goodslist&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 1. 利用事件委托实现添加到购物车的效果&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onclick&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    e &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; e &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;srcElement&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentNode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;className &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;add2cart&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 2. 若当前为按钮被点击&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// （1）生成一个商品信息对象 &amp;#123;guid，name，imgurl，price，qty（商品数量）&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// （2）推入数组，将数组添加到 cookie 里面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// （3）考虑如果商品信息已经添加过，则应该增加数组里面的该商品数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 	* 第一步：判断当前的 guid 是否在数组存在。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//  * 第二步：若存在，拿到该商品信息在数组中的索引，利用索引将 qty++&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; currentLi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentNode&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentNode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; guid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; currentLi&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data-guid&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; has &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goodslist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;some&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;g&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            idx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; g&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;guid &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; guid&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;has&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            goodslist&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;qty&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; goods &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;guid&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;guid&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;currentLi&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;children&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerText&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;imgurl&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;currentLi&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;children&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;src&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;price&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;currentLi&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;children&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerText&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token comment&#34;&gt;// 商品数量&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token literal-property property&#34;&gt;qty&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            goodslist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;goods&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;goodslist=&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;goodslist&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;显示购物车列表&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//1. 获取 goodslist 的 cookie，根据 cookie 数据生成 html 结构&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//2. 遍历时同时计算总价给 subPrice 元素赋值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; goodslist&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    goodslist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Cookie&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getCookie&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;goodslist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;typeof&lt;/span&gt; goodslist &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;string&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	goodslist &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;goodslist&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;//2. 遍历时，同时计算商品金额&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; total &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; ul &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ul&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ul&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; goodslist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;goods&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        total &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;price &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;qty&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;li data-guid=&#34;&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;guid&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#34;&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;img src=&#34;&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;imgurl&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#34;&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;h4&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;/h4&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;p class=&#34;price&#34;&gt;价格：&amp;lt;span&gt;&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;price&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;amp;times;&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;goods&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;qty&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;/span&gt;&amp;lt;/p&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;span class=&#34;btn-close&#34;&gt;&amp;amp;times;&amp;lt;/span&gt;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;/li&gt;&#39;&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    carList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    carList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ul&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    subPrice&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; total&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toFixed&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 3. 点击按钮，移除 cookie 数据，重新渲染商品列表。同时阻止浏览器默认行为&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;btnClear&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onclick&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    Cookie&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;goodslist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//4. 当点击某个商品的删除时&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//（1）获取到当前商品的 guid，遍历数组 goodslist，根据 guid 值相同，找到被删除的元素在数组中的索引。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//（2）通过索引，删除 goodslist 的中的某个商品。之后推出循环&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//（3）重新生成 cookie 后，渲染&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;carList&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onclick&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    e &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; e &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;target &lt;span class=&#34;token operator&#34;&gt;||&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;srcElement&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;className &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;btn-close&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; currentLi &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parentNode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; guid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; currentLi&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data-guid&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;goodslist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;goodslist&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;guid &lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt; guid&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                goodslist&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;splice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        Cookie&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;goodslist&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;goodslist&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;重载刷新当前页面&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重载刷新当前页面&#34;&gt;#&lt;/a&gt; 重载 / 刷新当前页面&lt;/h1&gt;
&lt;p&gt;1、reload 方法，该方法强迫浏览器刷新当前页面。&lt;br&gt;
语法：location.reload ([bForceGet])&lt;br&gt;
 参数： bForceGet， 可选参数， 默认为 false，从客户端缓存里取当前页。true, 则以 GET 方式，从服务端取最新的页面，相当于客户端点击 F5 (“刷新”)&lt;br&gt;
 2、 replace 方法，该方法通过指定 URL 替换当前缓存在历史里（客户端）的项目，因此当使用 replace 方法之后，你不能通过 “前进” 和 “后退” 来访问已经被替换的 URL。&lt;br&gt;
语法： location.replace (URL)&lt;br&gt;
 通常使用： location.reload () 或者是 history.go (0) 来做。&lt;br&gt;
此方法类似客户端点 F5 刷新页面，所以页面 method=”post” 时，会出现” 网页过期” 的提示。&lt;br&gt;
因为 Session 的安全保护机制。&lt;br&gt;
当调用 location.reload () 方法时， aspx 页面此时在服务端内存里已经存在， 因此必定是 IsPostback 的。&lt;br&gt;
如果有这种应用： 需要重新加载该页面，也就是说期望页面能够在服务端重新被创建，期望是 Not IsPostback 的。&lt;br&gt;
这里，location.replace () 就可以完成此任务。被 replace 的页面每次都在服务端重新生成。&lt;br&gt;
代码： location.replace (location.href);&lt;br&gt;
3、返回并刷新页面：&lt;br&gt;
location.replace(document.referrer);&lt;br&gt;
document.referrer// 前一个页面的 URL&lt;/p&gt;
&lt;p&gt;不要用 history.go (-1)，或 history.back (); 来返回并刷新页面，这两种方法不会刷新页面。&lt;/p&gt;
&lt;p&gt;4、Javascript 刷新页面的几种方法：&lt;/p&gt;
&lt;p&gt;1，history.go(0)&lt;/p&gt;
&lt;p&gt;2，location.reload()&lt;/p&gt;
&lt;p&gt;3，location=location&lt;/p&gt;
&lt;p&gt;4，location.assign(location)&lt;/p&gt;
&lt;p&gt;5，document.execCommand(‘Refresh’)&lt;/p&gt;
&lt;p&gt;6，window.navigate(location)&lt;/p&gt;
&lt;p&gt;7，location.replace(location)&lt;/p&gt;
&lt;p&gt;8，document.URL=location.href&lt;/p&gt;
&lt;h1 id=&#34;设计模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设计模式&#34;&gt;#&lt;/a&gt; 设计模式&lt;/h1&gt;
&lt;h2 id=&#34;一-工厂模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-工厂模式&#34;&gt;#&lt;/a&gt; 一、工厂模式&lt;/h2&gt;
&lt;p&gt;简单版工厂模式&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createBuwawa&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;eyes&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;mouth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; obj&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;eyes&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;eyes&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token literal-property property&#34;&gt;mouth&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;mouth&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; obj&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; peiqi&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;createBuwawa&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;佩奇&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;red&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;big&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;进阶版工厂模式&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;生产人员与取餐窗口相分离&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;麦当劳的工作人员&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;生产汉堡包&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;薯条&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Creator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 相当于在构造函数书写属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;food&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 生产食物&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Chuangkou&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;food&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;取餐窗口&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;提示、取餐&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Chuangkou&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;food&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;food&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;food&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;food&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;已做好&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3.&lt;/span&gt;调用&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; xiaoming&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Creator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; shutiao&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;xiaomming&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;薯条&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;shutiao&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;设计思想&lt;/p&gt;
&lt;p&gt;工人与服务员相分离&lt;/p&gt;
&lt;p&gt;符合开放封闭原则&lt;/p&gt;
&lt;h2 id=&#34;二-单例模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-单例模式&#34;&gt;#&lt;/a&gt; 二、单例模式&lt;/h2&gt;
&lt;p&gt;如果不存在实例对象，那么就创建实例对象，如果存在实例对象，那么就用该对象&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Single&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Single&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;getInstance&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;instance&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            instance&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Single&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; instance&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Single&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Single&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;三-适配者模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-适配者模式&#34;&gt;#&lt;/a&gt; 三、适配者模式&lt;/h2&gt;
&lt;p&gt;旧接口格式和使用者不兼容&lt;/p&gt;
&lt;p&gt;中间加一个适配转换接口&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;specificRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;德国标准插口&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Adapter&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;socket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Socket&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; info &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;socket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;specificRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;info&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;-转换器-中国标准接口&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Adater&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;四-代理模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-代理模式&#34;&gt;#&lt;/a&gt; 四、代理模式&lt;/h2&gt;
&lt;p&gt;使用者无权访问目标对象&lt;/p&gt;
&lt;p&gt;中间加代理，通过代理做授权和控制&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;（&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;（）&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReadImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;filename &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; filename&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;loadFromDisk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 模拟从硬盘中加载&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;loadFromDisk&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;loading...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;display...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 代理&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ProxyImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;readImg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ReadImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filename&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;readImg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; ProxyImg；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;）（）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; proxyImg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ProxyImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1.png&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;proxyImg&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;display&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;场景&lt;/p&gt;
&lt;p&gt;事件代理&lt;/p&gt;
&lt;p&gt;$.proxy&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#dv&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;$&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 使用外部函数的 this&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;red&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;ES6 proxy&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; star &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;张**&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token literal-property property&#34;&gt;age&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token literal-property property&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;13900001111&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 明星经纪人&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; agent &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Proxy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;star&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function-variable function&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;key&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;phone&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token comment&#34;&gt;// 返回经纪人自己的电话&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;16899997777&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;price&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token comment&#34;&gt;// 经纪人报价&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;120000&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 此时 target 为 stat 对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function-variable function&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;customPrice&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;val &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;价格太低&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				target&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; val&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;				&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;agent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//undefined&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;agent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;phone&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//16899997777&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;agent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;price&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//120000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;适配器模式 vs 代理模式&lt;/p&gt;
&lt;p&gt;适配器模式：提供一个不同的接口（如不同版本的插头）&lt;/p&gt;
&lt;p&gt;代理模式：提供一模一样的接口&lt;/p&gt;
&lt;h2 id=&#34;五-观察者模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-观察者模式&#34;&gt;#&lt;/a&gt; 五、观察者模式&lt;/h2&gt;
&lt;p&gt;发布 &amp;amp; 订阅，一对多&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 主题：保存状态，状态变化之后触发所有观察者对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Subject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;observers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; state&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;notifyAllObservers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;notifyAllObservers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;observers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;observers&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			observers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;attach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;observer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;observers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;observer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;subject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;subject  &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; subject&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;subject&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;attach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;update,state:&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;subject&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Subject&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 主题，大盒子保存所有观察者&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; o1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;o1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//o1 是观察者&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; o2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Observer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;o2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//02 是观察者&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 只要其中一个观察者状态概念，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;网页事件绑定&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#dv&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#dv&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#dv&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;promise&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;p1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;六-组合模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-组合模式&#34;&gt;#&lt;/a&gt; 六、组合模式&lt;/h2&gt;
&lt;p&gt;生成树形结构，表示 &amp;quot;整体 - 部分&amp;quot; 关系&lt;/p&gt;
&lt;p&gt;让整体和部分都具有一致的操作方式&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token literal-property property&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token literal-property property&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token literal-property property&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;div1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token literal-property property&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;container&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token literal-property property&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token literal-property property&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token literal-property property&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token literal-property property&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;123&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token literal-property property&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token literal-property property&#34;&gt;attr&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			&lt;span class=&#34;token literal-property property&#34;&gt;children&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;456&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//====== 对应的 html 结构 ===============&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div1&#34;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;container&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;456&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;p&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;div&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;七-策略模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-策略模式&#34;&gt;#&lt;/a&gt; 七、策略模式&lt;/h2&gt;
&lt;p&gt;不同策略分开处理&lt;/p&gt;
&lt;p&gt;避免出现大量的 if…else 或者 switch…case&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; type&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;ordinary&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;普通用户购买&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;member&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;会员用户购买&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;vip&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;			console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;vip用户购买&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; u1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ordinary&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;u1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; u2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ordinary&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;u2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; u3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ordinary&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;u3&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;type&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;money&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; type&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;money &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; money&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token function&#34;&gt;buy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		strategies&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;type&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;money&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; strategies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;ordinary&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;money&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; money&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;member&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;money&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; money&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;vip&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;money&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; money&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/B_CSS/CSS/</guid>
            <title>CSS</title>
            <link>https://dukeshao.com/2022/07/13/B_CSS/CSS/</link>
            <category>CSS</category>
            <pubDate>Wed, 13 Jul 2022 06:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;二-css基本语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-css基本语法&#34;&gt;#&lt;/a&gt; 二、CSS 基本语法&lt;/h1&gt;
&lt;h3 id=&#34;一-css简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-css简介&#34;&gt;#&lt;/a&gt; 一、css 简介&lt;/h3&gt;
&lt;p&gt;1、cascading style sheets 层叠样式表，主要作用是呈现样式&lt;br&gt;
​		* 层叠性&lt;br&gt;
​			给同一个元素添加相同的 css 属性，属性值之间会发生层叠问题。&lt;br&gt;
​		* 样式表&lt;/p&gt;
&lt;h3 id=&#34;二-css语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-css语法&#34;&gt;#&lt;/a&gt; 二、css 语法&lt;/h3&gt;
&lt;p&gt;1、格式：选择器 {声明}&lt;br&gt;
​		* 声明由  css 属性：属性值；组成&lt;br&gt;
​2、css 属性：&lt;br&gt;
​		*width 宽度&lt;br&gt;
​		*height 高度&lt;br&gt;
​		*background-color 背景颜色&lt;br&gt;
​			*red 红色  blue 蓝色  green 绿色  orange 橙色&lt;br&gt;
​3、css 注释：&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;/* css 注释 */&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;三-样式表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-样式表&#34;&gt;#&lt;/a&gt; 三、样式表&lt;/h3&gt;
&lt;p&gt;1、内部样式表 head&amp;gt;style，在 style 标签里面书写 css 语法格式&lt;br&gt;
 * 作用域：当前页面&lt;br&gt;
​2、外部样式表&lt;br&gt;
​	（1）建立外部样式表：css 文件夹 - 新建 css 文件，在该 css 文件里写 css 语法格式&lt;br&gt;
​	（2）在页面中链接该 css 文件，通过 head&amp;gt;link [rel=“stylesheet” href=“css 文件路径”]&lt;br&gt;
​	* 作用域：所有链接到该 css 文件的页面&lt;br&gt;
​3、内联（行内）样式表&lt;br&gt;
​	[style=“声明”]&lt;br&gt;
​	声明由 css 属性：属性值；组成&lt;br&gt;
​	* 作用域：当前元素&lt;br&gt;
​	* 优先级：就近原则（内联样式的优先级最高，内部样式与外部样式的优先级是一样大的，谁离该元素近谁就起作用）&lt;/p&gt;
&lt;h3 id=&#34;四-选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-选择器&#34;&gt;#&lt;/a&gt; 四、选择器&lt;/h3&gt;
&lt;p&gt;1、标签选择器（元素选择器、类型选择器）：将标签名字作为选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2、类选择器（class 选择器）：将。类名作为选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.box&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3、id 选择器：将 #id 名作为选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;#container&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;4、通配符选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;black&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;5、群组（并集）选择器：将选择器用逗号隔开，表示这些选择器同时被获取到&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;.box,#container&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;6、后代选择器：将选择器用空格隔开&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#header .box1&amp;#123;width:100px;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;header&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;7、伪类选择器&lt;br&gt;
​	（1）:link 锚链接未被访问前的样式&lt;br&gt;
​	（2）:visited 锚链接被访问后的样式&lt;br&gt;
​	（3）:hover 鼠标悬停在元素上，才触发&lt;br&gt;
​	（4）:active 鼠标点击元素时，触发样式&lt;br&gt;
书写顺序：lv-ha&lt;br&gt;
8、交集选择器&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;figcaption data-lang=&#34;CSS&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token selector&#34;&gt;div.box&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;100px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;五-选择器的优先级及权重&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-选择器的优先级及权重&#34;&gt;#&lt;/a&gt; 五、选择器的优先级及权重&lt;/h3&gt;
&lt;p&gt;​	（1）基本选择器的优先级&lt;br&gt;
​		* 前提：给同一个元素添加相同的 css 属性，才有优先级的比较&lt;br&gt;
​	!important / 行内样式 &amp;gt; id 选择器 &amp;gt; 类选择器 / 伪类选择器 &amp;gt; 标签选择器 &amp;gt; 通配符选择器&lt;br&gt;
​	（2）选择器的权重比较&lt;br&gt;
​		0000 原则：&lt;br&gt;
​			* 第一个 0 代表！important 或者内联样式&lt;br&gt;
​			* 第二个 0 代表 id 选择器的个数&lt;br&gt;
​			* 第三个 0 表示类选择器的个数&lt;br&gt;
​			* 第四个 0 表示标签选择器的个数&lt;br&gt;
​		继承的权重最低，为 0000&lt;/p&gt;
&lt;h1 id=&#34;三-css核心属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-css核心属性&#34;&gt;#&lt;/a&gt; 三、CSS 核心属性&lt;/h1&gt;
&lt;h3 id=&#34;一-字体属性-font&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-字体属性-font&#34;&gt;#&lt;/a&gt; 一、字体属性 font&lt;/h3&gt;
&lt;p&gt;​	1、&lt;strong&gt;字体大小 font-size&lt;/strong&gt;&lt;br&gt;
​		* 默认的字体大小为 16px，最小为 12px&lt;br&gt;
​		*9pt=12px，12pt=16px&lt;br&gt;
​	2、&lt;strong&gt;字体加粗 font-weight&lt;/strong&gt;&lt;br&gt;
​		* 属性值：normal 默认情况下不加粗  bold 加粗&lt;br&gt;
​		*（100-500 表示 normal，600-900 表示 bold）&lt;br&gt;
​	3、&lt;strong&gt;字体倾斜 font-style&lt;/strong&gt;&lt;br&gt;
​		* 属性值：normal 默认情况下不倾斜  italic 倾斜 oblique 更加倾斜&lt;br&gt;
​	4、&lt;strong&gt;字体家族 font-family&lt;/strong&gt;&lt;br&gt;
​		* 属性值为汉字或者多个单词，属性值要加双引号&lt;br&gt;
​		* 同一个 CSS 分属性的多个属性值用逗号隔开&lt;br&gt;
​	5、&lt;strong&gt;字体颜色 color&lt;/strong&gt;&lt;br&gt;
​		* 属性值：英文单词、十六进制（光学模式）[#000000]&lt;br&gt;
​		* 十六进制表示法：#000000&lt;br&gt;
​			* 每位数字的取值可以是 0-9 或者 a-f&lt;br&gt;
​			* 前面两位数字表示红色 #ff0000&lt;br&gt;
​			* 中间两位数字表示绿色 #00ff00&lt;br&gt;
​			* 后面两位数字表示蓝色 #0000ff&lt;br&gt;
​			* 若表示同一个颜色的两位数都相等，可以省略为三位数 #000 黑色 #fff 白色&lt;/p&gt;
&lt;h3 id=&#34;二-文本属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-文本属性&#34;&gt;#&lt;/a&gt; 二、文本属性&lt;/h3&gt;
&lt;p&gt;​	1、&lt;strong&gt;text-transform 检索文本的大小写&lt;/strong&gt;&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			none 默认不改变&lt;br&gt;
​			uppercase 全部转成大写&lt;br&gt;
​			lowercase 全部转成小写&lt;br&gt;
​			capitalize 首字母大写&lt;br&gt;
​	2、text-decoration 文本修饰&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			none 默认没有文本修饰&lt;br&gt;
​			underline 下划线&lt;br&gt;
​			overline 上划线&lt;br&gt;
​			line-through 删除线&lt;br&gt;
​			blink 闪烁：IE、Chrome 或 Safari 不支持 “blink” 属性值。&lt;br&gt;
​	3、text-indent 首行缩进&lt;br&gt;
​		* 单位： em 以一个字体的大小为基准&lt;br&gt;
​		* 可以为负数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;text-indent:2em;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	4、letter-spacing 字间距&lt;br&gt;
​		* 以字或字母作为分界点&lt;br&gt;
​	5、word-spacing 词间距&lt;br&gt;
​		* 以空格作为分界点&lt;br&gt;
​	6、text-align 文本在当前容器的水平方向的对齐方式&lt;br&gt;
​		* 属性值：left 默认向左对齐 	 center 居中对齐  right 向右对齐   justify 两端对&lt;br&gt;
​		* 文本：文字、图片&lt;br&gt;
​		* 容器：块级元素&lt;br&gt;
​	7、vertical-align 行内元素在垂直方向上的对齐方式&lt;br&gt;
​		* 属性值：baseline 默认以基线对齐  top 顶线对齐  bottom 底线对齐  middle 中线对齐&lt;br&gt;
​		* 常用于将文字与图片垂直方向居中对齐&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vertical-align:center;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	8、line-height 行高&lt;br&gt;
​		* 行高：一行的高度&lt;br&gt;
​		* 行高 = 文本的上间距 + 文本的下间距 + 字体大小&lt;br&gt;
​		*1. 在行高中，文字一定是居中显示的&lt;br&gt;
​		*2. 在同一段文本中，行高中的文本上间距 = 文本下间距&lt;br&gt;
​		*3. 常用操作：（1）若想一行文本在容器中垂直居中，可以将 line-height 设成容器的高度（2）若单行文本在居中偏上，则 line-height &amp;lt; 容器高度&lt;/p&gt;
&lt;h3 id=&#34;三-列表属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-列表属性&#34;&gt;#&lt;/a&gt; 三、列表属性&lt;/h3&gt;
&lt;p&gt;​	1、list-style-type 列表样式类型&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			disc 默认实心圆&lt;br&gt;
​			circle 空心圆&lt;br&gt;
​			square 方块&lt;br&gt;
​			none 没有样式 (用得最多)&lt;br&gt;
​	2、list-style-image: url (路径)  列表样式图片&lt;br&gt;
​	3、list-style-position 列表样式位置&lt;br&gt;
​		* 属性值： outside 在 li 的内容外边 inside 在 li 的内容里面（不稳定，不常用，有其他方式）&lt;br&gt;
​	* 总属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list-style: 1/2 3;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	* 用得最多的是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;list-style:none;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	块级元素除了 div、li 以外，基本都有默认的 margin 或 padding 样式&lt;/p&gt;
&lt;h3 id=&#34;四-背景属性-background&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-背景属性-background&#34;&gt;#&lt;/a&gt; 四、背景属性 background&lt;/h3&gt;
&lt;p&gt;​	1、background-color 背景颜色&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;background-color:red;
background-color:#f00;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	2、background-image:url (路径) 背景图片&lt;br&gt;
​		* 当容器的尺寸小于背景图片的尺寸，背景图片会有一部分丢失&lt;br&gt;
​		* 当容器尺寸大于背景图片的尺寸，背景图片会平铺满整个容器&lt;br&gt;
​		* 当容器尺寸等于背景图片的尺寸，背景图片能刚好在容器中完整的呈现&lt;br&gt;
​	3、background-repeat 背景图片是否平铺&lt;br&gt;
​		* 属性值： repeat 默认平铺  no-repeat 不平铺  repeat-x 水平方向平铺  repeat-y 垂直方向平铺&lt;br&gt;
​	4、background-pisition 背景图片在容器中的定位&lt;br&gt;
​		（1）数值：&lt;br&gt;
​			* 背景图片往左移，为负值&lt;br&gt;
​			* 背景图片往右移，为负值&lt;br&gt;
​		（2）方位：&lt;br&gt;
​			* 水平：left 左 center 中 right 右&lt;br&gt;
​			* 垂直： top 上 center 中 bottom 下&lt;br&gt;
​	5、background-attachment 背景图片的固定&lt;br&gt;
​		* 必须配合有滚动条的元素才能使用&lt;br&gt;
​		* 属性值：&lt;br&gt;
​			scroll 随着滚动条滚动而滚动&lt;br&gt;
​			fixed 滚动条滚动，背景图片固定位置&lt;br&gt;
总属性 background: 1 2 3 4 5;(可以缺省)&lt;/p&gt;
&lt;h3 id=&#34;五-浮动float&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-浮动float&#34;&gt;#&lt;/a&gt; 五、浮动 float&lt;/h3&gt;
&lt;p&gt;​	1、属性值：none 默认不浮动 left 向左浮动 right 向右浮动&lt;br&gt;
​	2、浮动元素的特点&lt;br&gt;
​		（1）当元素浮动了，相当于脱离了标准流，但里面的文字不会脱离文档流。&lt;br&gt;
​			* 标准流：元素的摆放顺序为从上往下、从左往右。&lt;br&gt;
​		（2）浮动的元素会按照行内块级元素进行摆放&lt;br&gt;
​			* 行内块级元素的特点：一行显示多个、可以设置宽高&lt;br&gt;
​		（3）一行放不下所有的浮动元素，浮动元素会换行显示。该元素在垂直方向上紧跟上一个元素的最低点摆放&lt;/p&gt;
&lt;h3 id=&#34;六-边框-border&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-边框-border&#34;&gt;#&lt;/a&gt; 六、边框 border&lt;/h3&gt;
&lt;p&gt;​	1、border-width 边框宽度&lt;br&gt;
​	2、border-style 边框样式&lt;br&gt;
​		* 属性值：solid 实线  dashed 虚线  dotted 点线 double 双线&lt;br&gt;
​	3、border-color 边框颜色&lt;br&gt;
​	* 总属性 border:1 2 3;&lt;br&gt;
​	*border - 方位：1 2 3&lt;br&gt;
​		* 方位：left right top bottom&lt;br&gt;
​	*border - 方位 - 分属性&lt;br&gt;
​		*border - 方位 -(width/style/color)&lt;br&gt;
​	* 分属性要覆盖总属性的某个值，则必须写在总属性的后面&lt;/p&gt;
&lt;h1 id=&#34;四-盒模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-盒模型&#34;&gt;#&lt;/a&gt; 四、盒模型&lt;/h1&gt;
&lt;h3 id=&#34;一-盒模型的组成&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-盒模型的组成&#34;&gt;#&lt;/a&gt; 一、盒模型的组成&lt;/h3&gt;
&lt;p&gt;1、盒模型 = content+padding +border+margin&lt;br&gt;
2、标准盒模型：width、height=content&lt;br&gt;
3、怪异盒模型：width、height=content+padding+border&lt;br&gt;
4、box-sizing 规定盒模型的解析方式&lt;br&gt;
 * content-box 标准盒模型，以 content 以内为 width、height 大小&lt;br&gt;
 * border-box 怪异盒模型，以 border 以内为 width、height 大小&lt;/p&gt;
&lt;h3 id=&#34;二-padding内填充&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-padding内填充&#34;&gt;#&lt;/a&gt; 二、padding 内填充&lt;/h3&gt;
&lt;p&gt;padding 的取值，遵循原则：上右下左，若某个方向的值缺省，找它的反义词的值。&lt;br&gt;
​padding - 方位：设置某个方位上的 padding&lt;br&gt;
​注意事项：&lt;br&gt;
​	padding 不能为负值&lt;br&gt;
​	背景是从 padding 的左上角开始摆放的，background-position:0 0; 在 padding 的左上角&lt;/p&gt;
&lt;h3 id=&#34;三-margin-外间距&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-margin-外间距&#34;&gt;#&lt;/a&gt; 三、margin 外间距&lt;/h3&gt;
&lt;p&gt;margin 的取值，遵循原则：上右下左，若某个方向的值缺省，找它的反义词的值。&lt;br&gt;
​margin - 方位：设置某个方位上的 margin&lt;br&gt;
​注意事项：&lt;br&gt;
​	margin 可以为负值&lt;br&gt;
​	margin 区域没有背景&lt;br&gt;
父元素的第一个子元素建议不要设置 margin-top，因为可能存在 margin 塌陷问题&lt;/p&gt;
&lt;h1 id=&#34;五-元素类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-元素类型&#34;&gt;#&lt;/a&gt; 五、元素类型&lt;/h1&gt;
&lt;h3 id=&#34;一-元素类型的分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-元素类型的分类&#34;&gt;#&lt;/a&gt; 一、元素类型的分类&lt;/h3&gt;
&lt;h4 id=&#34;一块级元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一块级元素&#34;&gt;#&lt;/a&gt; （一）块级元素&lt;/h4&gt;
&lt;p&gt;​	1. 特点：块级元素的宽高默认占其父级元素的一整行，若设置了宽度，多余的区域 margin 填充。&lt;br&gt;
​		* 利用块级元素水平方向多余的 margin 实现块级元素在父容器中水平居中，给当前元素加 margin:0 auto;&lt;br&gt;
​		* 块级元素可以设置宽高&lt;br&gt;
​		* 块级元素可以理解成容器，可以容纳所有的行内元素及部分的块级元素&lt;br&gt;
​			例如：ul 里面只能嵌套 li，dl&amp;gt;dt+dd&lt;br&gt;
​			例如：有语义的标签不能在里面嵌套 div、p 不能嵌套 p、标题标签不能嵌套标题&lt;br&gt;
​	2. 代表元素&lt;br&gt;
​		div、标题 h1-h6、p、列表 ul、ol&amp;gt;li;dl&amp;gt;dt+dd、form、option&lt;/p&gt;
&lt;h4 id=&#34;二行内元素内联元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二行内元素内联元素&#34;&gt;#&lt;/a&gt; （二）行内元素（内联元素）&lt;/h4&gt;
&lt;p&gt;​	1. 特点：一行显示多个；宽高由内容决定，即不能设置宽高；行内元素遵循盒模型规律，但是设置上下的 border、padding、margin 并没有真正的生效。&lt;br&gt;
​	2. 代表元素&lt;br&gt;
​		span，buis，strong，em，ins，del，a，img，input，select，textarea，label&lt;br&gt;
​	3. 实现行内元素在父容器中水平居中&lt;br&gt;
​		* 给父容器加 text-align:center;&lt;/p&gt;
&lt;h3 id=&#34;二-元素显示类型的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-元素显示类型的转换&#34;&gt;#&lt;/a&gt; 二、元素显示类型的转换&lt;/h3&gt;
&lt;p&gt;​	属性值：*block  转换成块级元素，拥有块级元素的所有特点&lt;br&gt;
​			*inline 转换 成行内元素，拥有行内元素的所有特点&lt;br&gt;
​			*list-item 块级元素的一种特殊显示类型，为列表项&lt;br&gt;
​			*inline-block 转换成行内块级元素&lt;br&gt;
​			*none 隐藏元素，不占位置&lt;br&gt;
（二）dispaly:inline-block; 行内元素的一种特殊显示类型&lt;br&gt;
​	特点：一行显示多个；可以设置宽高；&lt;br&gt;
​	代表元素：img/input/textarea&lt;br&gt;
​	存在问题：&lt;br&gt;
​		1. 设置成行内块，元素之间的换行会被解析成一个空格&lt;br&gt;
​			解决办法：不换行；给父元素设置 font-size 为 0&lt;br&gt;
​		2. 行内元素之间存在基线对齐的问题&lt;br&gt;
​			解决办法：vertical-align;&lt;br&gt;
 三、扩展知识&lt;/p&gt;
&lt;p&gt;​	行内可置换元素 (行内块级元素)：浏览器根据元素的标签和属性，来决定元素的具体显示内容 - img [src]/input [type]/textarea [cols]+[rows]&lt;br&gt;
​	行内不可置换元素（行内元素）&lt;/p&gt;
&lt;h6 id=&#34;隐藏元素的两种方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#隐藏元素的两种方式&#34;&gt;#&lt;/a&gt; 隐藏元素的两种方式&lt;/h6&gt;
&lt;p&gt;1.display:none; 隐藏元素，不占位置&lt;br&gt;
 2.visibility:hidden; 隐藏元素，占位置；&lt;br&gt;
注：overflow:hidden; 隐藏溢出容器的内容，不会隐藏容器&lt;/p&gt;
&lt;h1 id=&#34;六-定位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-定位&#34;&gt;#&lt;/a&gt; 六、定位&lt;/h1&gt;
&lt;h3 id=&#34;一-定位position&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-定位position&#34;&gt;#&lt;/a&gt; 一、定位 position&lt;/h3&gt;
&lt;p&gt;（一）. 静态定位 static：&lt;br&gt;
​	* 元素的默认定位，不设置就是该定位；&lt;br&gt;
​	* 标准流中的定位；&lt;/p&gt;
&lt;p&gt;（二）. 相对定位 relative：&lt;br&gt;
​	* 相对定位的元素都是相对于自己本身所在的位置进行定位移动；&lt;br&gt;
​	* 配合 top,right,bottom,left 属性使用，若是正值，则从自己的某条边往元素中间移动为正值。&lt;br&gt;
​	* 相对定位的元素不脱离标准流。（灵魂出窍）&lt;/p&gt;
&lt;p&gt;（三）. 绝对定位 absolute&lt;br&gt;
​	* 绝对定位的元素是相对于有定位的最近的父级元素或者 html 进行定位的&lt;br&gt;
​	* 配合 left,right,top,bottom 使用，从包含块的某条边往包含块的中间移动为正值。&lt;br&gt;
​	* 脱离了标准流&lt;br&gt;
​	扩展：包含块 - 定位参考框；一般子元素设置了绝对定位，父元素的定位一般都是相	对定位除非有特殊要求。&lt;br&gt;
4. 实现任意元素类型的元素在父容器中居中显示&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;扩展：1. 子元素绝对定位 absolute, 父元素相对定位 relative（子绝父相）；&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;2. 给子元素 {left:50%;top:50%;margin-left:- 自己宽度的一半；margin-top:- 自己高度的一半；}&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;扩展：盒模型相关的属性设置百分比都是根据父元素的宽高作为基准&lt;br&gt;
 width,height,padding,border,margin,left,top,right,bottom&lt;/p&gt;
&lt;p&gt;（四）. 固定定位 fixed&lt;br&gt;
​	* 固定定位的元素相对于浏览器的可视区域进行定位&lt;br&gt;
​	* 配合 left,right,top,bottom 使用，从浏览器可视区域的某条边往中间移动为正值&lt;br&gt;
​	* 固定定位的元素脱离了标准流&lt;br&gt;
拓展：子代选择器（ie8+）&amp;gt;&lt;br&gt;
 例如 ul&amp;gt;li 表示获取 ul 的子元素 li&lt;/p&gt;
&lt;h3 id=&#34;二-层级z-index&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-层级z-index&#34;&gt;#&lt;/a&gt; 二、层级 z-index&lt;/h3&gt;
&lt;p&gt;​	* 层级越高的元素在越上面&lt;br&gt;
​	* 默认情况下，定位的层级 &amp;gt; 标准流中的层级。浮动的层级 &amp;gt; 标准流中的层级（-1,0,1）&lt;br&gt;
​	* 只有设置了定位的元素才可以设置 z-index&lt;br&gt;
​	* 层级为整数，可以为负数&lt;/p&gt;
&lt;h3 id=&#34;三-overflow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-overflow&#34;&gt;#&lt;/a&gt; 三、overflow&lt;/h3&gt;
&lt;p&gt;​	内容溢出容器时的处理方式&lt;br&gt;
属性值：&lt;br&gt;
​	visible 默认可见&lt;br&gt;
​	hidden 隐藏溢出内容&lt;br&gt;
​	scroll 出现滚动条&lt;br&gt;
​	auto 自动判断溢出出现滚动条&lt;br&gt;
 overflow-x: 设置水平方向&lt;br&gt;
 overflow-y：设置垂直方向&lt;br&gt;
&lt;strong&gt;&lt;u&gt;当设置了某个方向的 overflow 不为 visible, 另外一个方向自动为 auto&lt;/u&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;七-图片整合技术&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-图片整合技术&#34;&gt;#&lt;/a&gt; 七、图片整合技术：&lt;/h1&gt;
&lt;p&gt;设置块、宽高背景、定位 absolute（记得给它爸爸加 relative）&lt;br&gt;
宽高不一致就单独设置&lt;br&gt;
背景的定位 background-position 也不一样，单独设置&lt;br&gt;
小图标相对于父元素的位置也不一样，单独设置 left、right、top、bottom&lt;/p&gt;
&lt;p&gt;** 原理：** 将一组背景图片有规律的合并成一张背景图（精灵图，雪碧图），再利用 background-position 实现背景图片的定位。&lt;/p&gt;
&lt;p&gt;** 好处：** 减少页面的请求次数，从而提高页面的加载速度；合并后的图片体积减小，从而提高加载速度；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;背景图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	1.h1：背景图&lt;br&gt;
​	2. 小图标：背景图&lt;br&gt;
​	3. 轮播图：都可以（建议用背景图）&lt;br&gt;
​	4. 每天都要更新的图片：都可以（建议用图片）&lt;/p&gt;
&lt;h1 id=&#34;八-自适应宽高&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#八-自适应宽高&#34;&gt;#&lt;/a&gt; 八、自适应宽高&lt;/h1&gt;
&lt;p&gt;概念：元素的大小能够根据窗口或子元素自动调整，这就是自适应。&lt;br&gt;
优点：可以适应在不同设备、不同窗口和不同分辨率下显示。&lt;/p&gt;
&lt;h3 id=&#34;一-宽度自适应&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-宽度自适应&#34;&gt;#&lt;/a&gt; 一、宽度自适应&lt;/h3&gt;
&lt;p&gt;概念：块级元素宽度设置成 100%，或者不设置宽度，宽度都为父元素的一整行&lt;/p&gt;
&lt;h3 id=&#34;二-高度自适应&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-高度自适应&#34;&gt;#&lt;/a&gt; 二、高度自适应&lt;/h3&gt;
&lt;p&gt;概念：父元素高度不设置，或者设置成 {height:auto;} 可以由子元素撑开&lt;/p&gt;
&lt;h6 id=&#34;一高度塌陷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一高度塌陷&#34;&gt;#&lt;/a&gt; （一）高度塌陷：&lt;/h6&gt;
&lt;p&gt;​	当子元素都浮动了，父元素的高度将没有办法被撑开&lt;br&gt;
 1	给父元素加 overflow:hidden; 缺点：造成该容器一部分布局内容丢失&lt;br&gt;
 2	给父元素添加最后一个子元素 {height:0;clear:both;overflow:hidden;} 缺点：产生大量的标签，影响页面性能&lt;br&gt;
 3	伪元素清除法（万能清除法）：给父元素添加类名 clearfix&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.clearfix:after&amp;#123;
     content:&amp;quot;&amp;quot;;
     display:block;
     height:0;
     clear:both;
     overflow:hidden;
     visibility:hidden;
     *zoom:1;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;二内容为空&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二内容为空&#34;&gt;#&lt;/a&gt; （二）内容为空&lt;/h6&gt;
&lt;p&gt;​	若子元素内容可能为空的情况下，父元素会出现高度为 0 的情况。&lt;br&gt;
解决办法：设置最小高度 min-height&lt;br&gt;
​	兼容 ie6 办法 1：在高版本浏览器，height 为固定高度，但是在 ie6，height 代表最小高度。&lt;br&gt;
​		* 所以只能让 ie6 才识别到 height 属性，因此得使用过滤器&lt;br&gt;
​		*_height 下划线属性过滤器，只有 ie6 才能识别&lt;br&gt;
​	兼容 ie6 办法 2：在高版本浏览器，!important 代表最高权重，而在 ie6 没有这个概念，会解析成普通属性&lt;br&gt;
​		* 设置 height:auto !important 给高版本浏览器识别，再设置 height: 具体值，事项 ie6 时覆盖 auto 属性值&lt;/p&gt;
&lt;h6 id=&#34;三自适应窗口高度&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三自适应窗口高度&#34;&gt;#&lt;/a&gt; （三）自适应窗口高度&lt;/h6&gt;
&lt;p height:100%;=&#34;&#34;&gt;​	元素高度自适应窗口高度（移动端和 PC 端后台用的较多，平时较少使用）&lt;br&gt;
* 当元素设置 {height:100%;}，即元素高度为父元素的高度&lt;br&gt;
 * 设置窗口高度为 100%，html,body&lt;/p&gt;
&lt;p height:100%;=&#34;&#34;&gt;给父元素添加类名 clearfix&lt;br&gt;
（2）若子元素内容可能为空的情况下，父元素会出现高度为 0 的情况。&lt;br&gt;
​	解决办法：设置最小高度 min-height&lt;br&gt;
​		* 当容器内容高度大于最小高度，按内容高度显示；当容器内容高度小于最小高度，按最小高度显示；&lt;br&gt;
​	兼容 ie6 办法 1：在高版本浏览器，height 为固定高度，但是在 ie6，height 代表最小高度。&lt;br&gt;
​		* 所以只能让 ie6 才识别到 height 属性，因此得使用过滤器&lt;br&gt;
​		*_height 下划线属性过滤器，只有 ie6 才能识别&lt;br&gt;
​	兼容 ie6 办法 2：在高版本浏览器，!important 代表最高权重，而在 ie6 没有这个概念，会解析成普通属性&lt;br&gt;
​		* 设置 height:auto !important 给高版本浏览器识别，再设置 height: 具体值，事项 ie6 时覆盖 auto 属性值&lt;br&gt;
 2. 元素高度自适应窗口高度（移动端和 PC 端后台用的较多，平时较少使用）&lt;br&gt;
​	* 当元素设置 {height:100%;}，即元素高度为父元素的高度&lt;br&gt;
​	* 设置窗口高度为 100%，html,body&lt;/p&gt;
&lt;h3 id=&#34;三-bfc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-bfc&#34;&gt;#&lt;/a&gt; 三、BFC&lt;/h3&gt;
&lt;h6 id=&#34;一概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一概念&#34;&gt;#&lt;/a&gt; （一）概念：&lt;/h6&gt;
&lt;p&gt;块级格式化上下文，是一个独立的渲染区域，规定了内部的块如何布局，且不影响外部元素。&lt;/p&gt;
&lt;h6 id=&#34;二布局规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二布局规则&#34;&gt;#&lt;/a&gt; （二）布局规则&lt;/h6&gt;
&lt;p&gt;内部的块级元素会在垂直方向上一个接一个摆放&lt;br&gt;
​属于同一个 BFC 的两个相邻块会发生 margin 重叠&lt;br&gt;
 bfc 的区域不会与浮动块重叠 (&lt;/p&gt;
&lt;h6 id=&#34;三应用场景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三应用场景&#34;&gt;#&lt;/a&gt; （三）应用场景：&lt;/h6&gt;
&lt;p&gt;1	解决高度塌陷：通过给父元素添加最后一个子元素 {height:0;clear:both;overflow:hidden;}&lt;br&gt;
 2	自适应两栏布局：左边固定宽度浮动 + 右 overflow:hidden; 左边固定宽度浮动 + 右 margin-left&lt;br&gt;
3	计算 BFC 的高度时，里面的浮动元素也参与计算（应用场景：给父元素加 {overflow:hidden;} 解决高度塌陷的问题）&lt;br&gt;
4	BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素（应用场景：解决 margin 重叠问题：给其中一个元素设置 overflow:hidden; 将自己的样式全部给其子元素）&lt;/p&gt;
&lt;h6 id=&#34;四触发元素成为bfc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四触发元素成为bfc&#34;&gt;#&lt;/a&gt; （四）触发元素成为 bfc&lt;/h6&gt;
&lt;p&gt;1	html 根元素&lt;br&gt;
 2	overflow 不为 visible，常用 overflow:hidden;&lt;br&gt;
3	浮动&lt;br&gt;
 4	脱离标准流的定位&lt;br&gt;
 5	display:inline-block; flex;&lt;/p&gt;
&lt;h1 id=&#34;十一-css3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十一-css3&#34;&gt;#&lt;/a&gt; 十一、CSS3&lt;/h1&gt;
&lt;p&gt;html:5 声明文档类型为 html5&lt;br&gt;
html:4t 声明文档类型为 html4.01 过渡版本&lt;br&gt;
 html:4s 声明文档类型为 html4.01 严格版本&lt;br&gt;
 html:xt 声明文档类型为 xhtml1.0 过渡版本&lt;br&gt;
 html:xs 声明文档类型为 xhtml1.0 严格版本&lt;/p&gt;
&lt;h3 id=&#34;一-选择器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-选择器&#34;&gt;#&lt;/a&gt; 一、选择器&lt;/h3&gt;
&lt;p&gt;（一）基本选择器&lt;br&gt;
​	通配符，标签，类，id，群组 选择器&lt;/p&gt;
&lt;p&gt;（二）层次（关系）选择器&lt;/p&gt;
&lt;p&gt;1. 后代选择器&lt;br&gt;
 E F: 匹配到 F 元素，且 F 元素是 E 元素的后代&lt;/p&gt;
&lt;p&gt;2. 子代选择器&lt;br&gt;
 E&amp;gt;F: 匹配到 F 元素，且 F 元素是 E 元素的子代&lt;/p&gt;
&lt;p&gt;3. 相邻兄弟选择器&lt;br&gt;
 E+F: 匹配到 F 元素，且 F 元素是 E 元素后的第一个元素&lt;/p&gt;
&lt;p&gt;4. 兄弟选择器&lt;br&gt;
 E~F: 匹配到 F 元素，且 F 元素是 E 元素后面的元素&lt;/p&gt;
&lt;p&gt;（三）动态伪类选择器&lt;br&gt;
:link 锚链接被点击前的样式&lt;br&gt;
:visited 锚链接被点击后的样式&lt;br&gt;
:hover 鼠标悬停在任意元素上，添加的样式&lt;br&gt;
:actived 鼠标点击（激活）任意元素时，添加的样式&lt;br&gt;
:focus 光标聚焦在表单元素上，添加的样式&lt;/p&gt;
&lt;p&gt;（四）目标伪类选择器&lt;br&gt;
 E:target  获取到作为目标的 E 元素&lt;/p&gt;
&lt;p&gt;（五）语言伪类选择器&lt;br&gt;
 q [lang=“no”] 会给标签内部的文本加上双引号&lt;br&gt;
:lang (no){&lt;br&gt;
​	quotes: “左符号”“右符号”;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;（六）UI 元素状态伪类选择器&lt;br&gt;
:enabled 给可用的表单元素添加样式&lt;br&gt;
:disabled 给不可用的表单元素添加样式&lt;br&gt;
:checked 给被选中的元素添加样式&lt;/p&gt;
&lt;p&gt;（七）结构伪类选择器&lt;/p&gt;
&lt;p&gt;1	E:first-child 父元素的第一个子元素，同时满足为 E 元素&lt;/p&gt;
&lt;p&gt;2	E:last-child 父元素的最后一个子元素，同时满足为 E 元素&lt;/p&gt;
&lt;p&gt;3	E:nth-child (n) n 从 1 开始计数，满足为父元素的第 n 个子元素，同时为 E 元素&lt;/p&gt;
&lt;p&gt;4	E:nth-last-child (n) n 从 1 开始计数，满足为父元素的倒数第 n 个子元素，同时为 E 元素；&lt;br&gt;
​	*2n 第偶数个孩子 (even)&lt;br&gt;
​	&lt;em&gt;2n-1 第奇数个孩子 (odd)&lt;br&gt;
​	*-n+a 满足为父元素的第 1 个到第 a 个孩子&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;5	E:first-of-type 满足为父元素的第一个 E 类型的子元素&lt;/p&gt;
&lt;p&gt;6	E:last-of-type 满足为父元素的最后一个 E 类型的子元素&lt;/p&gt;
&lt;p&gt;7	E:nth-of-type (n) 满足为父元素的第 n 个 E 类型的子元素&lt;/p&gt;
&lt;p&gt;8	E:nth-last-of-type (n) 满足为父元素的倒数第 n 个 E 类型的子元素&lt;br&gt;
 9	E:empty 获取到内容为空（连空格都没有）的 E 元素&lt;br&gt;
 10	E:only-child 满足为父元素的唯一的一个孩子，且为 E 元素&lt;br&gt;
 11	E:only-of-type 满足为父元素唯一的一个 E 元素类型的孩子&lt;br&gt;
（八）否定伪类选择器&lt;br&gt;
​	E :not (F) 在 E 元素的子元素中，除了 F 元素以外的所有&lt;br&gt;
（九）属性选择器&lt;br&gt;
 1	E [attr] 拥有 attr 属性的 E 元素会被获取到&lt;br&gt;
 2	E [attr=“val”] attr 属性值为 val 的 E 元素会被获取到&lt;br&gt;
 3	E [attr*=“val”] attr 属性值包含 val 的 E 元素会被获取到&lt;br&gt;
 4	E [attr^=“val”] attr 属性值以 val 值开头的 E 元素会被获取到&lt;br&gt;
 5	E [attr$=“val”] attr 属性值以 val 结尾的 E 元素会被获取到&lt;br&gt;
（十）伪类选择器&lt;br&gt;
 1	E::before 给 E 元素添加第一个子元素 (行内)&lt;br&gt;
 2	E::after 给 E 元素添加最后一个子元素 (行内)&lt;br&gt;
 3	E::first-letter 给 E 元素（块级）第一个文本添加样式&lt;br&gt;
 4	E::first-line 给 E 元素（块级）第一行文本添加样式&lt;br&gt;
 5	E::selection 给选中的文本添加样式&lt;br&gt;
​	* 火狐不支持，加私有前缀 -moz-&lt;/p&gt;
&lt;h3 id=&#34;二-文本属性-text-shadow&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-文本属性-text-shadow&#34;&gt;#&lt;/a&gt; 二、文本属性 text-shadow&lt;/h3&gt;
&lt;p&gt;1	文本阴影 text-shadow: x-offset y-offset blur color [,… 可以省略]; 多个用逗号隔开&lt;br&gt;
​	x-offset 水平偏移&lt;br&gt;
​	y-offset 垂直偏移&lt;br&gt;
​	blur 模糊区域&lt;br&gt;
​	color 阴影颜色&lt;/p&gt;
&lt;p&gt;2	文本溢出的处理方式 text-overflow&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;*clip 文本溢出直接被裁掉（默认）&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;*ellipsis 文本溢出用省略号代替&lt;/p&gt;
&lt;p&gt;实现单行文本省略：配合 overflow:hidden; width;white-space:nowrap; 使用&lt;/p&gt;
&lt;p&gt;实现多行文本省略：配合 overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webket-line-clamp:2;-webkit-box-orient:vertical; 使用&lt;/p&gt;
&lt;p&gt;3	单词换行 word-wrap&lt;br&gt;
​	normal 默认正常显示&lt;br&gt;
​	break-word 允许在单词内进行换行&lt;/p&gt;
&lt;p&gt;4	单词换行的规则 word-break&lt;br&gt;
​	normal 按照默认的换行规则&lt;br&gt;
​	break-all 允许在单词内部换行&lt;br&gt;
​	keep-all 只能在空格或连接符处换行&lt;br&gt;
 5	使用服务器端字体 @font-face {}&lt;br&gt;
​	*font-family 给字体起名字&lt;br&gt;
​	*src:url () 引入字体路径&lt;br&gt;
​	*font-family 使用该字体&lt;br&gt;
​	（2）字体图标&lt;br&gt;
​		&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5pY29uZm9udC5jb20=&#34;&gt;www.iconfont.com&lt;/span&gt;&lt;br&gt;
​		好处：图片放大会失真，而文字不会；占内存小，从而提高加载速度&lt;/p&gt;
&lt;h3 id=&#34;三-新增颜色模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-新增颜色模式&#34;&gt;#&lt;/a&gt; 三、新增颜色模式&lt;/h3&gt;
&lt;p&gt;1	rgba (red0-255,green0-255,blue0-255,alpha 不透明度 0-1)&lt;br&gt;
 2	hsla (色调 0-360，饱和度 0-100%，lighter0-100%，alpha 不透明度 0-1)&lt;br&gt;
 3	transparent 完全透明&lt;br&gt;
​	利用 transparet 实现三角形 (border)&lt;/p&gt;
&lt;h3 id=&#34;四-边框属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-边框属性&#34;&gt;#&lt;/a&gt; 四、边框属性&lt;/h3&gt;
&lt;p&gt;1	边框阴影 box-shadow&lt;br&gt;
​	box-shadow: x-offset y-offset blur spread color 外阴影 / 内阴影 [,… 可省略];&lt;br&gt;
​	*x-offset 水平偏移，往右为正&lt;br&gt;
​	*y-offset 垂直偏移，往下为正&lt;br&gt;
​	*blur 模糊区域&lt;br&gt;
​	*spread 扩展区域&lt;br&gt;
​	*color&lt;br&gt;
​	* 默认为外阴影 outset，内阴影 inset&lt;br&gt;
2	边框图片 border-image&lt;br&gt;
​	*boorder-image-source: url (); 引入边框图片，默认放在边框的四个角上&lt;br&gt;
​	*border-image-slice 边框图片切割。遵循上右下左原则，若缺省找反义词&lt;br&gt;
​	*border-image-width 边框图片宽度，若没写，默认就是 border 宽度&lt;br&gt;
​	*border-image-outset 边框图片向外延伸，不能为负数&lt;br&gt;
​	*border-image-repeat 边框图片是否重复，stretch 默认拉伸；repeat 只重复；round 重复完整图形&lt;br&gt;
 3	边框圆角 border-radius&lt;br&gt;
 * 将正方形做圆，border-radius:50%;&lt;br&gt;
*border - 垂直方位 - 水平方位 - radius: 水平半径 垂直半径；&lt;br&gt;
 水平方位：left right&lt;br&gt;
 垂直方位：top bottom&lt;br&gt;
*border-radius: 水平半径（左上角开始顺时针）/ 垂直半径（左上角开始顺时针）&lt;br&gt;
若某个方向的半径值缺省，找对角&lt;/p&gt;
&lt;h3 id=&#34;五-伪类及伪元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-伪类及伪元素&#34;&gt;#&lt;/a&gt; 五、伪类及伪元素&lt;/h3&gt;
&lt;p&gt;伪类模仿类的存在&lt;br&gt;
伪元素模仿元素的存在&lt;br&gt;
二、伪元素::&lt;br&gt;
1、E::before 给 E 元素添加第一个子元素&lt;br&gt;
​	*{content: “文字或图片路径”} 即使内容为空也不能省略 content 属性 content: “”;&lt;br&gt;
​	* 默认情况下为行内元素&lt;br&gt;
 2、E::after 给 E 元素添加最后一个子元素&lt;br&gt;
​	*{content: “文字或图片路径”} 即使内容为空也不能省略 content 属性 content: “”;&lt;br&gt;
​	* 默认情况下为行内元素&lt;br&gt;
 3、E::first-letter 给 E 元素的第一个字符添加样式&lt;br&gt;
 4、E::first-line 给 E 元素的第一行字符添加样式&lt;/p&gt;
&lt;h1 id=&#34;十二-背景属性-弹性盒&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十二-背景属性-弹性盒&#34;&gt;#&lt;/a&gt; 十二、背景属性、弹性盒&lt;/h1&gt;
&lt;h3 id=&#34;一-背景属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-背景属性&#34;&gt;#&lt;/a&gt; 一、背景属性&lt;/h3&gt;
&lt;p&gt;1	background-size 规定背景图片的尺寸&lt;br&gt;
 * 属性值：&lt;br&gt;
​	数值（或百分比）：水平 	垂直；若只写了一个值，代表水平方向的值，垂直方向会等比拉伸。大多数情况下，背景图片会发生变形。若 background-size:100% 100%; 则图片不会变形（错的）&lt;br&gt;
​	cover 背景图片完全覆盖容器，可能会出现背景图片丢失；背景图片等比缩放，不会出现变形的情况。&lt;br&gt;
​	contain 容器完全包含背景图片，可能会出现留白&lt;br&gt;
 * 应用：&lt;br&gt;
​	利用 {background-size:cover;background-position: center;} 实现大图片在容器中的显示&lt;br&gt;
 2	background-origin 背景图片的定位起始区域&lt;br&gt;
​	padding-box 默认的定位区域为 padding 以内。&lt;br&gt;
​	content-box 定位区域为 content 以内&lt;br&gt;
​	border-box 定位区域为 border 以内&lt;br&gt;
 3	background-clip 背景图片的最终显示区域&lt;br&gt;
​	padding-box 默认的显示区域为 padding 以内。&lt;br&gt;
​	content-box 显示定位区域为 content 以内&lt;br&gt;
​	border-box 显示区域为 border 以内&lt;br&gt;
 4	多张背景图片的使用&lt;/p&gt;
&lt;h3 id=&#34;二-弹性盒布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-弹性盒布局&#34;&gt;#&lt;/a&gt; 二、弹性盒布局&lt;/h3&gt;
&lt;p&gt;（一）概念原理：容器有能力让其子项目能够改变其宽度、高度（甚至顺序），以最佳的方式填充可用空间&lt;br&gt;
​	* 主轴：默认为水平方向&lt;br&gt;
​	* 侧轴：主轴的交叉轴，默认为垂直方向&lt;br&gt;
（二）容器的属性&lt;br&gt;
 1	display:flex; 将容器设置成弹性盒，里面的子项目会在主轴方向顺序排列（不会换行），侧轴方向的大小若缺省，会被默认拉伸&lt;br&gt;
 2	flex-direction 设置主轴方向&lt;br&gt;
​	row 从左到右&lt;br&gt;
​	row-reverse 从右到左&lt;br&gt;
​	column 从上往下&lt;br&gt;
​	column-reverse 从下往上&lt;br&gt;
 3	flex-wrap 设置主轴方向的换行&lt;br&gt;
​	*nowrap 默认不换行，若主轴方向放不下，子项目进行缩放&lt;br&gt;
​	*wrap 换行&lt;br&gt;
 4	justify-content   子项目在主轴方向的对齐方式&lt;br&gt;
​	*flex-start 默认在主轴方向的开始位置顺序摆放&lt;br&gt;
​	*flex-end 在主轴方向的结束位置顺序摆放&lt;br&gt;
​	*center 在主轴方向的中间位置顺序摆放&lt;br&gt;
​	*space-between 将主轴方向的剩余空间平分在子项目之间&lt;br&gt;
​	*space-around 将主轴方向的剩余空间环绕在子项目之间&lt;br&gt;
 5	align-items 子项目在侧轴方向（单行上）的对齐方式&lt;br&gt;
​	*stretch 若子项目在侧轴方向没有设置大小，则在当前行上默认拉伸&lt;br&gt;
​	*flex-start 若子项目在侧轴方向设置了大小，默认在侧轴方向（单行上）的开始位置顺序摆放&lt;br&gt;
​	*flex-end 在侧轴方向（单行上）的结束位置顺序摆放&lt;br&gt;
​	*center 在侧轴方向（单行上）的中间位置顺序摆放&lt;br&gt;
​	*baseline 在侧轴方向（单行上）以基线对齐&lt;br&gt;
 6	align-content 多行子项目在侧轴方向的对齐方式&lt;br&gt;
​	*flex-start 默认在侧轴方向的开始位置顺序摆放&lt;br&gt;
​	*flex-end 在侧轴方向的结束位置顺序摆放&lt;br&gt;
​	*center 在侧轴方向的中间位置顺序摆放&lt;br&gt;
​	*space-between 将侧轴方向的剩余空间平分在子项目之间&lt;br&gt;
​	*space-around 将侧轴方向的剩余空间环绕在子项目之间&lt;br&gt;
（三）子项目的属性&lt;br&gt;
 1	flex 设置子项目的比份，无单位。&lt;br&gt;
2	align-self 单个子项目在侧轴方向（单行上）的对齐方式&lt;br&gt;
​	属性值同 align-items&lt;br&gt;
3	order 规定子项目的排列顺序&lt;br&gt;
​	* 不定义 order 的子项目会排到前面&lt;br&gt;
​	*order 越小，排在越前面&lt;br&gt;
弹性盒：移动端使用。&lt;br&gt;
​	* 老版本语法：需要时查阅&lt;br&gt;
​	*flex 设置子项目在主轴方向的比份&lt;br&gt;
​		*flex-grow 定义子项目的扩展比率&lt;br&gt;
​		*flex-shrink 定义子项目的收缩比率&lt;br&gt;
​		*flex-basis 定义子项目的默认基准值&lt;br&gt;
​		flex 属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。&lt;br&gt;
​			auto: 当容器有多余空间，子项目平分剩余空间，放大。当容器空间不足，子项目平分缩小。&lt;br&gt;
​			none: 不管容器位置多还是少，子项目都不改变自己本身大小。&lt;/p&gt;
&lt;h3 id=&#34;三-多列布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-多列布局&#34;&gt;#&lt;/a&gt; 三、多列布局&lt;/h3&gt;
&lt;p&gt;1	概念：自动将内容按指定的列数排列，这种特性实现的效果和报纸、杂志类排版非常相似。&lt;br&gt;
2	核心属性：&lt;br&gt;
​	（1）column-count 列数，定义分列列数；最多列数，auto 自适应（由列宽、容器宽和列间距决定），也可固定&lt;br&gt;
​	（2）column-width 列宽，定义每列列宽； 类似于最小宽度 min-width； auto 自适应；&lt;br&gt;
​	（3）column-gap：定义列间距； 不能为负数；&lt;br&gt;
​	（4）column-rule：定义列边框；与定义边框一样：2px dashed #ccc;&lt;br&gt;
​	（5）column-span：定义多列布局中子元素的跨列效果；通常用于标题；&lt;br&gt;
​		*none：不跨列；&lt;br&gt;
​		*all：跨所有列&lt;br&gt;
​	（6）break-inside: avoid; 避免图片与文字断行&lt;br&gt;
 columns: column-width column-count;&lt;/p&gt;
&lt;h1 id=&#34;十三-移动端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十三-移动端&#34;&gt;#&lt;/a&gt; 十三、移动端&lt;/h1&gt;
&lt;h3 id=&#34;一设置理想视口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一设置理想视口&#34;&gt;#&lt;/a&gt; （一）设置理想视口&lt;/h3&gt;
&lt;p&gt;1	布局视口 viewpoint：比实际屏幕尺寸大很多，保证页面完整显示，但是是全局缩小后的页面。&lt;br&gt;
2	理想视口 viewpoint:meta 标签实现 meta:vp 移动端一定要记得加上这句代码&lt;br&gt;
​	许多智能手机都使用了一个比实际屏幕尺寸大很多的虚拟可视区域 viewpoint (布局视口)，主要目的就是让页面在智能手机端阅读时不会因为实际可视区域变形。所以你看到的页面还是普通样式，即一个全局缩小后的页面。为了让智能手机能根据媒体查询匹配对应样式，让页面在智能手机中正常显示，特意添加了一个 meta 标签。这个标签的主要作用就是让智能手机浏览页面时能进行优化，并且可以自定义界面可视区域的尺寸和缩放级别。&lt;br&gt;
​	如何识别手机尺寸通过设置 meta 语句：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;width: 可视区域的宽度；&lt;/p&gt;
&lt;p&gt;height: 可视区域的高度；&lt;/p&gt;
&lt;p&gt;device-width: 设备屏幕分辨率的宽度值&lt;/p&gt;
&lt;p&gt;initial-scale: 初始的缩放比例（0-10.0），取值为 1 时页面按实际尺寸显示，无任何缩放&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;minimum-scale 		允许用户缩放到的最小比例&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;maximum-scale 		允许用户缩放到的最大比例&lt;br&gt;
​&lt;/p&gt;
&lt;p&gt;user-scalable 		设定用户是否可以缩放（yes/no）&lt;br&gt;
​	可以写成：&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width,initial-scale=1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;二媒体查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二媒体查询&#34;&gt;#&lt;/a&gt; （二）媒体查询&lt;/h3&gt;
&lt;p&gt;1	分界点：&lt;br&gt;
超小屏幕 xs  （移动设备）768px 以下&lt;br&gt;
小屏设备 sm	768px-992px&lt;br&gt;
 中等屏幕 md	992px-1200px&lt;br&gt;
 宽屏设备 lg	1200px 以上&lt;br&gt;
 2	语法 @media screen and (条件){css 语法}&lt;br&gt;
​	*min-width 若当前页面宽度大于 min-width，则样式生效。按照从小到大的书写顺序。&lt;br&gt;
​	*max-width&lt;br&gt;
​	*min-device-width&lt;br&gt;
​	* 响应式布局：利用媒体查询，在不同的设备、不同的分辨率或者不同的屏幕宽度，对同一套页面的细节进行调整&lt;br&gt;
​		* 局限性：一般都只能做简单的页面&lt;br&gt;
​		*bootstrap 框架 以响应式出名&lt;br&gt;
一、弹性盒布局&lt;br&gt;
二、等比缩放布局&lt;br&gt;
移动端百分比布局：&lt;br&gt;
1	meta:vp	设置理想视口&lt;br&gt;
 2	稿纸 640px 时，在 iphone5 开发；稿纸 750px，在 iphone6 开发&lt;br&gt;
 3	拷贝三句代码，记得给 meta：vp 加 id 名；&lt;br&gt;
4	弹性盒布局：&lt;br&gt;
​	整个页面高度 100%，设置成弹性盒，主轴向下&lt;br&gt;
​	除了中间有滚动条的部分设置成 flex:1，其他部分直接设置高度；&lt;br&gt;
​	中间有滚动条部分设置 overflow-y:auto;overflow-x:hidden;(只设置 overflow-x:hidden 也可以，另外方向自动 auto;)&lt;/p&gt;
&lt;h3 id=&#34;三rem&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三rem&#34;&gt;#&lt;/a&gt; （三）rem&lt;/h3&gt;
&lt;p&gt;​	em 以当前一个字符的大小为基准&lt;br&gt;
​	rem 以 html 根部字体大小为基准&lt;br&gt;
移动端 rem 布局&lt;br&gt;
 1	meta:vp	设置理想视口&lt;br&gt;
 2	稿纸 640px 时，在 iphone5 开发；稿纸 750px，在 iphone6 开发&lt;br&gt;
 3	拷贝三句代码，记得给 meta：vp 加 id 名；&lt;br&gt;
4	弹性盒布局：&lt;br&gt;
​	整个页面高度 100%，设置成弹性盒，主轴向下&lt;br&gt;
​	除了中间有滚动条的部分设置成 flex:1，其他部分直接设置高度；&lt;br&gt;
​	中间有滚动条部分设置 overflow-y:auto;overflow-x:hidden;(只设置 overflow-x:hidden 也可以，另外方向自动 auto;)&lt;br&gt;
 5	拷贝另外 2 句 js 代码，目的是让 html 字体大小根据设备改变。在哪个设备开发，就要用当前根部字体大小将 px 换算成 rem&lt;br&gt;
​	建议字体大小别转 rem，用媒体查询做。&lt;/p&gt;
&lt;h3 id=&#34;四vw与vh&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四vw与vh&#34;&gt;#&lt;/a&gt; （四）vw 与 vh&lt;/h3&gt;
&lt;p&gt;相对于视口的高度和宽度&lt;br&gt;
 1vw 相当于视口宽度的 1%，1vh 相当于视口高度的 1%&lt;/p&gt;
&lt;h1 id=&#34;十四-渐变运动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十四-渐变运动&#34;&gt;#&lt;/a&gt; 十四、渐变 + 运动&lt;/h1&gt;
&lt;h3 id=&#34;一-渐变背景&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-渐变背景&#34;&gt;#&lt;/a&gt; 一、渐变（背景）&lt;/h3&gt;
&lt;p&gt;1. 线性渐变 linear-gradient&lt;br&gt;
 (1) gradient (linear, 起点，终点，颜色，[, 颜色])&lt;br&gt;
​	兼容问题&lt;br&gt;
​	起点终点可以是数值，0 0 代表左上角，100% 100% 或者 width 大小 height 大小代表右下角&lt;br&gt;
 (2) gradient (linear, 起点，终点，color-stop (颜色开始位置，颜色)[, 颜色])&lt;br&gt;
(3) linear-gradient ( 方向 || 角度， &lt;code&gt;&amp;lt;stop&#39;&amp;gt;&lt;/code&gt; ,  &lt;code&gt;&amp;lt;stop&#39;&amp;gt;&lt;/code&gt;  [,  &lt;code&gt;&amp;lt;stop&#39;&amp;gt;&lt;/code&gt; ]* )&lt;br&gt;
​	* 第一个参数表示线性渐变的方向。&lt;br&gt;
​	・to left：设置渐变为从右到左，相当于: 270deg;&lt;br&gt;
​	・to right：设置渐变从左到右，相当于: 90deg;&lt;br&gt;
​	・to top：设置渐变从下到上，相当于: 0deg;&lt;br&gt;
​	・to bottom：设置渐变从上到下，相当于: 180deg。（默认值）&lt;br&gt;
​	・也可以直接指定度数，如 45deg&lt;br&gt;
 角度：&lt;br&gt;
​	有前缀的兼容写法，角度跟象限角度一样&lt;br&gt;
​	新版本（不加前缀）角度 + 老版本 = 90deg&lt;br&gt;
2、radial-gradient 径向渐变&lt;br&gt;
​	从一个中心点开始沿着四周产生渐变效果&lt;br&gt;
 radial-gradient ([ [ at  &lt;code&gt;&amp;lt;position&amp;gt;&lt;/code&gt;  ]? [  &lt;code&gt;&amp;lt;shape&amp;gt;&lt;/code&gt;  ||  &lt;code&gt;&amp;lt;size&amp;gt;&lt;/code&gt;  ]  , ? &lt;code&gt;&amp;lt;color-stop&amp;gt;&lt;/code&gt; [ ,  &lt;code&gt;&amp;lt;color-stop&amp;gt;&lt;/code&gt;  ]+)&lt;br&gt;
​	*shape：渐变的形状，ellipse 椭圆形 (默认)，circle 表示圆形。&lt;br&gt;
​	*size：渐变的大小，即渐变到哪里停止，它有四个值。&lt;br&gt;
​		closest-side：最近边； farthest-side：最远边；&lt;br&gt;
​		closest-corner：最近角； farthest-corner：最远角（默认值）&lt;br&gt;
​	* &lt;code&gt;&amp;lt;position&amp;gt;&lt;/code&gt;  确定圆心的位置。&lt;br&gt;
​		如果提供 2 个参数，第一个表示横坐标，第二个表示纵坐标；&lt;br&gt;
​		如果只提供 1 个，第二值默认为 50%，即 center&lt;br&gt;
​	* &lt;code&gt;&amp;lt;color&amp;gt;&lt;/code&gt; ：指定颜色。&lt;/p&gt;
&lt;h3 id=&#34;二-过渡-transition&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-过渡-transition&#34;&gt;#&lt;/a&gt; 二、过渡 transition&lt;/h3&gt;
&lt;p&gt;1. 经过一定的时间， 从某个状态到另一个状态&lt;br&gt;
 2. 分属性&lt;br&gt;
​	(1) transition-property 过渡的属性（不可缺）&lt;br&gt;
​	(2) transition-duration 过渡的时间（不可缺）&lt;br&gt;
​	(3) transition-timing-function 过渡的形式&lt;br&gt;
​		linear 线性过渡&lt;br&gt;
​		ease 慢速进入慢速离开&lt;br&gt;
​		ease-in 慢速进入&lt;br&gt;
​		ease-out 慢速离开&lt;br&gt;
​	(4) transition-delay 过渡的延时&lt;br&gt;
 3. 总属性：&lt;br&gt;
​	transition: 1 2 3 4;&lt;/p&gt;
&lt;h3 id=&#34;三-变换transform&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-变换transform&#34;&gt;#&lt;/a&gt; 三、变换 transform&lt;/h3&gt;
&lt;h4 id=&#34;一2d变换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一2d变换&#34;&gt;#&lt;/a&gt; （一）2d 变换&lt;/h4&gt;
&lt;p&gt;1. 移动变换 translate&lt;br&gt;
​	transform: translate (水平，垂直)&lt;br&gt;
​	可以用百分比，代表自己宽高的百分比&lt;br&gt;
​	transform: translateX ()&lt;br&gt;
​	transflorm:translateY()&lt;br&gt;
 2. 缩放变换 scale (x,y)&lt;br&gt;
​	x,y 代表水平，垂直方向的缩放比例&lt;br&gt;
​	缩放的基准点为元素中心&lt;br&gt;
​	transform: scaleX (x)&lt;br&gt;
​	transform: scaleY(y)&lt;br&gt;
 3. 旋转 rotate (角度)&lt;br&gt;
​	transform: rotate (角度), 角度以顺时针旋转，旋转的基准点在元素中心&lt;br&gt;
 4. 扭曲变换 skew ()&lt;br&gt;
​	tranform:skew (x 轴旋转的角度，y 轴旋转的角度), 扭曲变换的基准点在元素中间&lt;br&gt;
​	transform: skewX (x 轴旋转的角度)&lt;br&gt;
​	transform: skewY (y 轴旋转的角度)&lt;br&gt;
 注意：若存在多个变换，在书写属性值时，应用空格将多个变换隔开&lt;br&gt;
 5. 改变元素变换的基准点 transform-origin&lt;/p&gt;
&lt;h4 id=&#34;二3d变换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二3d变换&#34;&gt;#&lt;/a&gt; （二）3d 变换&lt;/h4&gt;
&lt;p&gt;1. 移动变换&lt;br&gt;
​	transform:translate3d (x,y,z);&lt;br&gt;
​	transform:translateZ(z);&lt;br&gt;
2. 旋转变换&lt;br&gt;
​	transform:rotate3d (x,y,z,deg)&lt;br&gt;
​		xyz 取值为 0 或 1,0 代表不旋转，1 代表旋转&lt;br&gt;
​	transform:rotateX ()&lt;br&gt;
​	transform:rotateY()&lt;br&gt;
​	transform:rotateZ()&lt;br&gt;
 左手定律：大拇指指向轴的正方向，手指弯曲的方向为旋转的正方向&lt;br&gt;
 3.skew () 扭曲变换&lt;br&gt;
 4.transform-style 规定变换的样式（需要设置在父元素上）&lt;br&gt;
​	flat 默认为平面&lt;br&gt;
​	preserve-3d 使被转换的子元素保留其 3D 转换&lt;br&gt;
 5.perspective 设置观察的距离，景深（需要设置在父元素上）&lt;br&gt;
6.perspective-origin 设置观察的基准点（设置在父元素上）&lt;/p&gt;
&lt;h3 id=&#34;四-动画animation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-动画animation&#34;&gt;#&lt;/a&gt; 四、动画 animation&lt;/h3&gt;
&lt;p&gt;1. 定义动画 @keyframes&lt;br&gt;
​	@keyframes 动画名 {&lt;br&gt;
​	节点 {样式}&lt;br&gt;
}&lt;br&gt;
​	通过百分比将动画分成多个节点&lt;br&gt;
​	最后通过 animation 将动画应用到指定元素上&lt;br&gt;
 2.animation 用于设置动画属性&lt;br&gt;
​	animation-name 动画名字&lt;br&gt;
​	animation-duration 动画每次的播放时间&lt;br&gt;
​	animation-timing-function 动画播放形式；linear ease ease-in ease-out；steps (n) 相邻两个节点之间分成多少步，默认情况下每步都是用初始状态填充分配下来的时间段，steps (n)==&amp;gt;steps (n,end) 默认；steps (n,start) 用每一步的结束状态填充分配下来的时间&lt;br&gt;
​	animation-delay 动画延迟&lt;br&gt;
​	animation-iteration-count 动画的播放次数；infinite 无限次&lt;br&gt;
​	animation-direction 动画是否轮流反向播放； reverse 方向播放 alternate 交替播放 alternate-reverse 交替方向播放&lt;br&gt;
​	animation-fill-mode 动画完成模式；forwards 保持最后一个状态&lt;/p&gt;
&lt;h1 id=&#34;格式化上下文&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化上下文&#34;&gt;#&lt;/a&gt; 格式化上下文&lt;/h1&gt;
&lt;p&gt;（ &lt;code&gt;formatting contexts&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Formatting context&lt;/code&gt;  是 &lt;code&gt;W3C CSS2.1&lt;/code&gt;  规范中的一个概念。它是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系、相互作用。&lt;br&gt;
格式化上下文指的是初始化元素定义的环境。包含两个要点，元素定义的环境和初始化。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;CSS&lt;/code&gt;  中，元素定义的环境有两种，一种是块格式化上下文 (  &lt;code&gt;Block formatting context&lt;/code&gt;  )，另一种是行内格式化上下文 (  &lt;code&gt;Inline formatting context&lt;/code&gt;  )。 这两种上下文定义了在  &lt;code&gt;CSS&lt;/code&gt;  中元素所处的环境，格式化则表明了在这个环境中，元素处于此环境中应当被初始化，即元素在此环境中应当如何布局等。&lt;/p&gt;
&lt;h2 id=&#34;格式化上下文包含以下几种情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化上下文包含以下几种情况&#34;&gt;#&lt;/a&gt; 格式化上下文包含以下几种情况&lt;/h2&gt;
&lt;p&gt;a：块级格式化上下文 (  &lt;code&gt;Block formatting contexts&lt;/code&gt;  )( BFC )&lt;br&gt;
 b：行内格式化上下文 (  &lt;code&gt;Inline formatting contexts&lt;/code&gt;  ) ( IFC )&lt;br&gt;
 c：自适应格式化上下文 (  &lt;code&gt;Flex Formatting Contexts&lt;/code&gt;  )(FFC)（CSS3 新增）&lt;br&gt;
d：网格布局格式化上下文 (  &lt;code&gt;GridLayout Formatting Contexts&lt;/code&gt;  )(GFC)（CSS3 新增）&lt;/p&gt;
&lt;h2 id=&#34;boxcss布局的基本单位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#boxcss布局的基本单位&#34;&gt;#&lt;/a&gt;  &lt;code&gt;BOX&lt;/code&gt; :CSS 布局的基本单位&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Box&lt;/code&gt;  是  &lt;code&gt;CSS&lt;/code&gt;  布局的对象和基本单位， 直观点来说，就是一个页面是由很多个  &lt;code&gt;Box&lt;/code&gt;  组成的。元素的类型和  &lt;code&gt;display&lt;/code&gt;  属性，决定了这个  &lt;code&gt;Box&lt;/code&gt;  的类型。 不同类型的  &lt;code&gt;Box&lt;/code&gt; ， 会参与不同的  &lt;code&gt;Formatting Context&lt;/code&gt; （一个决定如何渲染文档的容器），因此 &lt;code&gt;Box&lt;/code&gt;  内的元素会以不同的方式渲染。让我们看看有哪些盒子：&lt;/p&gt;
&lt;p&gt;a：block-level box: &lt;code&gt;display&lt;/code&gt;  属性为  &lt;code&gt;block, list-item, table&lt;/code&gt;  的元素，会生成  &lt;code&gt;block-level box&lt;/code&gt; 。并且参与  &lt;code&gt;block fomatting context&lt;/code&gt; ；&lt;/p&gt;
&lt;p&gt;c：inline-level box:display 属性为  &lt;code&gt;inline, inline-block, inline-table&lt;/code&gt;  的元素，会生成  &lt;code&gt;inline-level box&lt;/code&gt; 。并且参与  &lt;code&gt;inline formatting context&lt;/code&gt; ；&lt;/p&gt;
&lt;h1 id=&#34;布局拓展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#布局拓展&#34;&gt;#&lt;/a&gt; 布局拓展&lt;/h1&gt;
&lt;h4 id=&#34;设置元素在父元素上居中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#设置元素在父元素上居中&#34;&gt;#&lt;/a&gt; 设置元素在父元素上居中&lt;/h4&gt;
&lt;p&gt;​	1、利用行内块级元素&lt;br&gt;
​	垂直居中：&lt;br&gt;
​		* 将元素设置成行内块级元素，同时尺子也要设置成行内块，高度与父元素一致，宽度为 0；&lt;br&gt;
​		* 将与元素及尺子都要设置 vertical-align:middle;&lt;br&gt;
​	水平居中：&lt;br&gt;
​		* 给父容器设置 text-align:center;&lt;br&gt;
 若子元素与父元素都浮动了，父元素可以不设置宽度，父元素能被子元素撑开；&lt;/p&gt;
&lt;h4 id=&#34;自适应两栏布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自适应两栏布局&#34;&gt;#&lt;/a&gt; 自适应两栏布局&lt;/h4&gt;
&lt;p&gt;某一栏确定宽度 + 浮动，另外一栏设置 margin 的值为上一栏的宽度，自己的宽度不设置&lt;/p&gt;
&lt;h4 id=&#34;自适应三栏布局&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自适应三栏布局&#34;&gt;#&lt;/a&gt; 自适应三栏布局&lt;/h4&gt;
&lt;p&gt;先写左右的元素设置宽度 + 浮动，最后才写中间的元素，设置 margin&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/A_HTML/HTML/</guid>
            <title>HTML</title>
            <link>https://dukeshao.com/2022/07/13/A_HTML/HTML/</link>
            <category>HTML</category>
            <pubDate>Wed, 13 Jul 2022 06:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一-html文件格式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-html文件格式&#34;&gt;#&lt;/a&gt; 一、HTML 文件格式&lt;/h2&gt;
&lt;p&gt;1、文件名&lt;/p&gt;
&lt;p&gt;xx.html&lt;/p&gt;
&lt;p&gt;2. 文档格式&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token doctype&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&#34;token doctype-tag&#34;&gt;DOCTYPE&lt;/span&gt; &lt;span class=&#34;token name&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;viewport&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;width=device-width, initial-scale=1.0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;http-equiv&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;X-UA-Compatible&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;content&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;ie=edge&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Document&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt;  告知文档类型为 html5&lt;/p&gt;
&lt;p&gt;&lt;code&gt;charset=&amp;quot;UTF-8&amp;quot;&lt;/code&gt;  字符编码为 UTF-8&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;head&amp;gt;,&amp;lt;meta&amp;gt;,&amp;lt;title&amp;gt;&lt;/code&gt;  标签默认样式 display:none&lt;/p&gt;
&lt;h2 id=&#34;二-html的基本语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-html的基本语法&#34;&gt;#&lt;/a&gt; 二、html 的基本语法&lt;/h2&gt;
&lt;p&gt;1	html 标签： 由尖括号包裹起来的一个整体&lt;/p&gt;
&lt;p&gt;2	html 元素： 由一对双标签或者一个单标签组成&lt;/p&gt;
&lt;p&gt;3	html 属性：[html 属性名 =“属性值”]，紧跟标签名字后面，空格隔开。一个 html 属性的多个属性值，也用空格隔开&lt;/p&gt;
&lt;p&gt;4	html 注释：书写一些信息方便自己或他人理解，不会显示在页面中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;!--注释--&amp;gt;&lt;/code&gt; ctrl/command+？&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 注释 --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;三-html基础标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-html基础标签&#34;&gt;#&lt;/a&gt; 三、HTML 基础标签&lt;/h2&gt;
&lt;h4 id=&#34;1标题标签h1-h6&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1标题标签h1-h6&#34;&gt;#&lt;/a&gt; 1. 标题标签 h1-h6&lt;/h4&gt;
&lt;p&gt;标题的语义从重到轻，默认样式从大到小，建议每个页面只用一次 h1&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;display&lt;/th&gt;
&lt;th&gt;font-weight&lt;/th&gt;
&lt;th&gt;font-size&lt;/th&gt;
&lt;th&gt;margin-block-start&lt;/th&gt;
&lt;th&gt;margin-block-end&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;h1&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;2em&lt;/td&gt;
&lt;td&gt;0.67em&lt;/td&gt;
&lt;td&gt;0.67em&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h2&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;1.5em&lt;/td&gt;
&lt;td&gt;0.83em&lt;/td&gt;
&lt;td&gt;0.83em&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h3&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;1.17em&lt;/td&gt;
&lt;td&gt;1em&lt;/td&gt;
&lt;td&gt;1em&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h4&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;1em&lt;/td&gt;
&lt;td&gt;1.33em&lt;/td&gt;
&lt;td&gt;1.33em&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h5&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;0.83em&lt;/td&gt;
&lt;td&gt;1.67em&lt;/td&gt;
&lt;td&gt;1.67em&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h6&lt;/td&gt;
&lt;td&gt;block&lt;/td&gt;
&lt;td&gt;bold&lt;/td&gt;
&lt;td&gt;0.67em&lt;/td&gt;
&lt;td&gt;2.33em&lt;/td&gt;
&lt;td&gt;2.33em&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Chrome、FireFox&lt;/p&gt;
&lt;h4 id=&#34;2段落标签pp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2段落标签pp&#34;&gt;#&lt;/a&gt; 2. 段落标签 &lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;语义：表示文本段落，一个 p 元素表示一个段落&lt;/p&gt;
&lt;h4 id=&#34;3列表标签ul-ol&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3列表标签ul-ol&#34;&gt;#&lt;/a&gt; 3. 列表标签 &lt;code&gt;ul、ol&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;无需列表 ul（unordered list）&amp;gt;  li 列表项（list item）&lt;/li&gt;
&lt;li&gt;有序列表 ol（ordered list）&amp;gt;  li 列表项（list item）&lt;/li&gt;
&lt;li&gt;自定义列表 dl（definition list）&amp;gt;  dt 自定义列表项（definition term） +  dd 对自定义列表项的描述（definition description）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ul、ol 的子元素只能是 li，不可以是其他元素&lt;/p&gt;
&lt;h4 id=&#34;4表格标签table&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4表格标签table&#34;&gt;#&lt;/a&gt; 4. 表格标签 &lt;code&gt;table&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;table &amp;gt; tr 行 &amp;gt; td 单元格&lt;/p&gt;
&lt;p&gt;table 的 html 属性：&lt;/p&gt;
&lt;p&gt;​	[border 给表格加上边框]&lt;/p&gt;
&lt;p&gt;​	[cellpadding 给表格单元格加上内填充（内容与边框之间的距离）]&lt;/p&gt;
&lt;p&gt;​	[cellspacing 单元格之间的距离]&lt;/p&gt;
&lt;p&gt;​	[width 表格宽度]&lt;/p&gt;
&lt;p&gt;​	[height 表格高度]&lt;/p&gt;
&lt;p&gt;td 的 html 属性：&lt;br&gt;
​	[colspan 合并列]&lt;br&gt;
​	[rowspan 合并行]&lt;/p&gt;
&lt;h4 id=&#34;5表单标签form&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5表单标签form&#34;&gt;#&lt;/a&gt; 5. 表单标签 &lt;code&gt;form&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;（1）表单的作用：收集数据，提交到服务器&lt;/p&gt;
&lt;p&gt;​	form&lt;/p&gt;
&lt;p&gt;​		[aciton 提交到的后台地址]&lt;/p&gt;
&lt;p&gt;​		[method 提交方式 get/post]&lt;/p&gt;
&lt;p&gt;（2）input 表单控件：[type 规定表单控件的类型]&lt;/p&gt;
&lt;p&gt;​	[type]&lt;/p&gt;
&lt;p&gt;​		text 文本框&lt;/p&gt;
&lt;p&gt;​		password 密码框&lt;/p&gt;
&lt;p&gt;​		radio 单选框&lt;/p&gt;
&lt;p&gt;​		checkbox 多选框&lt;/p&gt;
&lt;p&gt;​		button 按钮框&lt;/p&gt;
&lt;p&gt;​		submit 提交按钮（提交功能）&lt;/p&gt;
&lt;p&gt;​		reset 重置按钮&lt;/p&gt;
&lt;p&gt;​	[value]&lt;/p&gt;
&lt;p&gt;​		给表单控件添加内容&lt;/p&gt;
&lt;p&gt;​	[name]&lt;/p&gt;
&lt;p&gt;​		给同一组的单选框或多选框起相同的名字；&lt;/p&gt;
&lt;p&gt;​		拥有 name 属性的表单控件内容才可以提交到服务器&lt;/p&gt;
&lt;p&gt;​	[checked]&lt;/p&gt;
&lt;p&gt;​		给单选框或多选框设置默认选中&lt;/p&gt;
&lt;p&gt;（3）select &amp;gt; option 下拉列表&lt;/p&gt;
&lt;p&gt;​	option&lt;/p&gt;
&lt;p&gt;​		[value] 该 option 选项的值&lt;/p&gt;
&lt;p&gt;​		[selected] 下拉列表的选项被默认选中&lt;/p&gt;
&lt;p&gt;（4）textarea 文本域&lt;/p&gt;
&lt;p&gt;​	[cols] 列表&lt;/p&gt;
&lt;p&gt;​	[rows] 行数&lt;/p&gt;
&lt;h4 id=&#34;6换行标签br&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6换行标签br&#34;&gt;#&lt;/a&gt; 6. 换行标签 &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&#34;7分割线标签hr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7分割线标签hr&#34;&gt;#&lt;/a&gt; 7. 分割线标签 &lt;code&gt;&amp;lt;hr /&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;h4 id=&#34;8视觉标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8视觉标签&#34;&gt;#&lt;/a&gt; 8. 视觉标签&lt;/h4&gt;
&lt;p&gt;​	b 加粗     i 倾斜     u 下划线    s 删除线&lt;/p&gt;
&lt;h4 id=&#34;9语义标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#9语义标签&#34;&gt;#&lt;/a&gt; 9. 语义标签&lt;/h4&gt;
&lt;p&gt;​	strong 加粗     em 倾斜    ins 下划线    del 删除线&lt;/p&gt;
&lt;h4 id=&#34;10图片标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10图片标签&#34;&gt;#&lt;/a&gt; 10. 图片标签&lt;/h4&gt;
&lt;p&gt;​	[src] 引入图片的路径&lt;/p&gt;
&lt;p&gt;​		相对路径、绝对路径&lt;/p&gt;
&lt;p&gt;​	[alt] 图片未加载出来，呈现的文字&lt;/p&gt;
&lt;p&gt;​	[title] 光标移入图片时，呈现的文字&lt;/p&gt;
&lt;h4 id=&#34;11没有语义的元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#11没有语义的元素&#34;&gt;#&lt;/a&gt; 11. 没有语义的元素&lt;/h4&gt;
&lt;p&gt;div、span&lt;/p&gt;
&lt;h4 id=&#34;12锚点标签a&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#12锚点标签a&#34;&gt;#&lt;/a&gt; 12. 锚点标签 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;（1）跳转到其他页面&lt;/p&gt;
&lt;p&gt;（2）跳转到当前页面某个部分（命名锚点）&lt;/p&gt;
&lt;p&gt;​	给元素设置 id 名，给锚链接设置 [href=&amp;quot;#id 名&amp;quot;]，当点击锚链接，就能跳转到 id 名所在的元素&lt;/p&gt;
&lt;p&gt;（3）跳转到其他页面某个部分（命名锚点）&lt;/p&gt;
&lt;p&gt;​	给元素设置 id 名，给锚链接设置 [href=“路径 #id 名”]，当点击锚链接，就能跳转到 id 名所在的元素&lt;/p&gt;
&lt;p&gt;（4）不跳转&lt;/p&gt;
&lt;p&gt;​	如果使用了 a 标签，但是不想要 a 标签跳转&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;最常见的，不会跳转，但是会刷新页面 a [href=&amp;quot;#&amp;quot;]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;onclick 事件返回 false; a [href=&amp;quot;#&amp;quot; onclick=“return false”]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 href=&amp;quot;javascript:void (0)&amp;quot; 伪协议，不会跳转也不会刷新 a [href=“javascript:void (0)”]&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;四-高级表单和表格&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-高级表单和表格&#34;&gt;#&lt;/a&gt; 四、高级表单和表格&lt;/h2&gt;
&lt;h4 id=&#34;一-高级表单&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-高级表单&#34;&gt;#&lt;/a&gt; 一、高级表单&lt;/h4&gt;
&lt;p&gt;1. 表单字段集 fieldset&lt;br&gt;
​	* 作用：对文本及表单元素进行分组&lt;br&gt;
​	*fieldset 可以实现嵌套&lt;br&gt;
​	*fieldset 通过 disabled 属性禁用整个分组&lt;br&gt;
 2. 字段集标题 legend&lt;br&gt;
​	*legend 必须为 fieldset 的第一个子元素&lt;br&gt;
​	*[align=“left/center/right/justify”] 设置 legend 的位置，left 为默认值&lt;br&gt;
 3. 提示信息标签 label&lt;br&gt;
​	* 作用：文字与表单元素关联起来，提供提示信息&lt;br&gt;
​	*label [for] 与表单元素的 [id] 要一致，才能与 id 名所在的元素关联&lt;br&gt;
​	* 也可以将文字与表单元素一起包裹:label &amp;gt; 文字 + input;&lt;br&gt;
4. 表单新类型&lt;br&gt;
​	（1）[type=“file”] 上传文件&lt;br&gt;
​		*[multiple] 上传多个文件&lt;br&gt;
​	（2）[type=“image”] 图片提交按钮&lt;br&gt;
​		*[src],[alt]&lt;/p&gt;
&lt;h4 id=&#34;二-高级表格&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-高级表格&#34;&gt;#&lt;/a&gt; 二、高级表格&lt;/h4&gt;
&lt;p&gt;（一）表格标签&lt;br&gt;
 1.caption 表格标题&lt;br&gt;
​	* 最好作为 table 的第一个子元素&lt;br&gt;
​	* 文本默认在水平居中&lt;br&gt;
 2.th 标题行的单元格&lt;br&gt;
​		* 文本默认加粗，且文本在单元格居中&lt;br&gt;
 3. 行分组&lt;br&gt;
​	*thead 表头（标题行）&amp;gt;tr&amp;gt;th&lt;br&gt;
​	*tbody 表体（内容）&amp;gt;tr&amp;gt;td&lt;br&gt;
​	*tfoot 表尾（总结）&amp;gt;tr&amp;gt;td&lt;br&gt;
​	* 注意：&lt;br&gt;
​		* 表格必须包含 thead、tbody，若存在表尾，必须包含 tfoot&lt;br&gt;
​		* 可以有多个 tbody，但不建议&lt;br&gt;
​		* 书写次序：thead、tfoot、tbody，可以实现在数据请求完毕之前先加载 thead、tfoot&lt;br&gt;
4. 列分组 colgroup&lt;br&gt;
​	*[span] 表示当前列分组占据的列数&lt;br&gt;
（二）table 表格的 html 属性&lt;br&gt;
​	[rules] 给表格添加分割线&lt;br&gt;
​		*none 默认没有分割线&lt;br&gt;
​		*cols 添加列分割线&lt;br&gt;
​		*rows 添加行分割线&lt;br&gt;
​		*all 添加行、列所有的分割线&lt;br&gt;
​		*groups 添加组分割线&lt;br&gt;
（三）表格的 CSS 属性&lt;br&gt;
​	1.border-spacing 单元格间距&lt;br&gt;
​		* 给 table 添加的 css 属性，等同于 cellspaing&lt;br&gt;
​		* 不能为负数&lt;br&gt;
​	2.border-collapse 单元格边框合并&lt;br&gt;
​		* 属性值： separate 默认分离；collapse 合并；&lt;br&gt;
​		* 给 table 添加的 css 属性&lt;br&gt;
​	3.empty-cells 空单元格的边框处理&lt;br&gt;
​		* 给 td 添加的 css 属性&lt;br&gt;
​		* 属性值：show 默认显示 ；hide 隐藏；&lt;br&gt;
​	4.caption-side 标题所在的位置&lt;br&gt;
​		* 给 caption 添加的 css 属性&lt;br&gt;
​		* 属性值：top 默认在上面 ；bottom 下面；left 左边；right 右边；&lt;/p&gt;
&lt;h2 id=&#34;五-html5新标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-html5新标签&#34;&gt;#&lt;/a&gt; 五、HTML5 新标签&lt;/h2&gt;
&lt;h4 id=&#34;一-html的新标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-html的新标签&#34;&gt;#&lt;/a&gt; 一、html 的新标签&lt;/h4&gt;
&lt;p&gt;1.header 头部，一般都是存放引导或导航信息。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*通常会存在至少一个标题标签或者导航条
*header与footer不要互相嵌套
*也可以写在其他内容里面
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.hgroup 对标题进行组合&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;header&amp;gt;hgroup&amp;gt;h3+h4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.nav 导航条&lt;br&gt;
 4.main 主要内容，只用在页面最外层。建议只使用一次&lt;br&gt;
 5.article 文章，独立的内容块；可以嵌套元素，内部元素对外部有隶属关系。&lt;br&gt;
6.section 区块，章节，表示专题性的内容&lt;br&gt;
 7.aside 侧边栏，非正文的内容。例如广告、作者信息&lt;br&gt;
 8.footer 底部，一般包含版权信息、作者信息之类的。&lt;br&gt;
9.figure 对元素进行组合，一般用于文字图片、组合 ie9+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;figure&amp;gt;img+p&amp;#123;描述&amp;#125;
figcaption对figure的内容进行描述
figure&amp;gt;img+figcaption&amp;#123;描述&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10.time 语义化时间，表示时间或日期 ie9+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[datetime]定义具体的时间，若time元素内没有具体时间，必须用属性设置具体时间。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;11.details 细节 [open 内容默认是否可见]&amp;gt;summary 对细节定义标题 ie/firefox/opera 不支持&lt;br&gt;
 12.mark 突出重点显示的内容（增加了一个背景色） ie9+&lt;br&gt;
13.progress 进度条   ie10+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[max]最大值
[value]当前值
progress&amp;gt;span
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;14.meter 度量尺 ie 不支持&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[min]最小值
[max]最大值
[value]当前值
[high]较高的值
[low]较低的值
[optimum]较佳的值，若定义比high的值大，说明越大越好；若定义比low的值小，说明越小越好 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;15.ruby 定义需要被注释或音标的整体 &amp;gt; rt 注释或音标文本&lt;br&gt;
 16.datalist 拥有输入功能的下拉列表 &amp;gt; option [value]   safari 不支持 ie10+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;使用input[type=&amp;quot;text&amp;quot; list=&amp;quot;id名&amp;quot;]
datalist[id=&amp;quot;id名&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;17.output 输出&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;form[oninput=&amp;quot;jieguo.value=num1.value&amp;quot;]&amp;gt;input[name=&amp;quot;num1&amp;quot;]+output[name=&amp;quot;jieguo&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;二-表单新增类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-表单新增类型&#34;&gt;#&lt;/a&gt; 二、表单新增类型&lt;/h4&gt;
&lt;p&gt;1.color 拾色器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input[type=&amp;quot;color&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.email 电子邮箱&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input[type=&amp;quot;email&amp;quot;]
默认的验证功能
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.number&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input[type=&amp;quot;number&amp;quot;]只能输入数字
在移动端会自动弹出输入法的数字键盘
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.tel 电话号码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input[type=&amp;quot;tel&amp;quot;]移动端会弹出数字输入法
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.url 网址&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;默认的验证功能
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.search 搜索&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input[type=&amp;quot;search&amp;quot;]配合results=&amp;quot;n&amp;quot;属性
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;7.range 范围&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input[type=&amp;quot;range&amp;quot;]
[min最小值],[max最大值],[value当前值],[step每次移动的步数]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.date, 年月日&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; month, 年月
week第几年的第几周
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;9.time 时间（时分）&lt;br&gt;
10.datetime-local 年月日时分&lt;/p&gt;
&lt;h4 id=&#34;三-表单新增属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-表单新增属性&#34;&gt;#&lt;/a&gt; 三、表单新增属性&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;[placeholder] 占位符&lt;/li&gt;
&lt;li&gt;[autofocus] 自动聚焦&lt;/li&gt;
&lt;li&gt;[multiple] 文件上传多选&lt;/li&gt;
&lt;li&gt;[required] 必填项&lt;/li&gt;
&lt;li&gt;[pattern] 正则，有验证功能&lt;/li&gt;
&lt;li&gt;[autocomplete] 下次填写时自动补全&lt;br&gt;
​	属性值：on 自动补全，off 关闭自动补全；可以给 form,input 添加 ss&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;四-视频-音频&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-视频-音频&#34;&gt;#&lt;/a&gt; 四、视频、音频&lt;/h4&gt;
&lt;p&gt;1.video 视频&lt;br&gt;
 [src] 引入视频&lt;br&gt;
支持的后缀：ogg,mp4,webM&lt;br&gt;
 [autoplay] 自动播放&lt;br&gt;
 [controls] 添加控件&lt;br&gt;
 [width]&lt;br&gt;
[height]&lt;br&gt;
[poster] 加载等待的画面图片&lt;br&gt;
 [loop] 循环播放&lt;br&gt;
 2.audio 音频 与视频用法属性一样&lt;/p&gt;
&lt;h2 id=&#34;六-空格与回车&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-空格与回车&#34;&gt;#&lt;/a&gt; 六、空格与回车&lt;/h2&gt;
&lt;p&gt;默认情况下，页面代码中的空格跟换行在浏览器解析时，会被解析成一个空格。&lt;br&gt;
​	标识符： 空格    &amp;lt;小于号&amp;gt; 大于号   × 乘号&lt;br&gt;
​	空格大小跟字体大小并不一致，但是空格大小与字体大小有关。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/Ajax/</guid>
            <title>Ajax</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/Ajax/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;一-概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-概念&#34;&gt;#&lt;/a&gt; 一、概念&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1.AJAX
	Asynchronous Javascript And Xml，Ajax 技术的核心是XMLHttpRequest对象（简称XHR），这是由微软首先引入的一个特性，其他浏览器提供商后来都提供了相同的实现

2.起源
	最早出现在2005年的google搜索建议
3.优点
	* 增加速度：减轻服务器的负担,按需加载数据,最大程度的减少冗余请求
	* 改善的用户体验：局部刷新页面,减少用户等待时间,带来更好的用户体验
	* 页面和数据分离：前后端分离，操作更灵活，后期维护更方便
4.后端语言和服务器配置
	* php + Apache + mySQL
	* NodeJS + MongoDB
	* Java + tomcat + Oracle
	* .NET + IIS + SQL Server
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;二-json&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-json&#34;&gt;#&lt;/a&gt; 二、json&lt;/h2&gt;
&lt;h3 id=&#34;1json数据json字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1json数据json字符串&#34;&gt;#&lt;/a&gt; 1.json 数据 (json 字符串)&lt;/h3&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;&#34;id&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21465461461461&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;张三&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;&#34;id&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;21465461461461&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;张三&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2json字符串与对象的转换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2json字符串与对象的转换&#34;&gt;#&lt;/a&gt; 2.json 字符串与对象的转换&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;1.json字符串转成对象的转换
(1)eval(&amp;quot;(&amp;quot;+json字符串+&amp;quot;)&amp;quot;); 
	它的作用是，将一个普通的json格式(不标准的json字符串)的字符串，转换成Json格式的对象
	var list = eval(&amp;quot;(&amp;quot;+request.responseText+&amp;quot;)&amp;quot;);
(2)JSON.parse(); //把JSON字符串转成JSON对象(js对象/数组)【es5】
2.把JSON对象转成JSON字符串
	JSON.stringify(); 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3json文件存在的意义&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3json文件存在的意义&#34;&gt;#&lt;/a&gt; 3.json 文件存在的意义&lt;/h3&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 模拟数据 (与后端先商量)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token property&#34;&gt;&#34;id&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;G001&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token property&#34;&gt;&#34;name&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Thermos 膳魔师 Funtainer系列水杯 12盎司（340g） 粉红色&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token property&#34;&gt;&#34;imgurl&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;images/g1.jpg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token property&#34;&gt;&#34;price&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;899&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;三-ajax请求步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-ajax请求步骤&#34;&gt;#&lt;/a&gt; 三、Ajax 请求步骤&lt;/h2&gt;
&lt;p&gt;1. 创建请求对象&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; xhr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回一个异步请求对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2. 处理服务器返回数据&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;readyState &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;//responseText：保存服务器返回的数据（从服务器返回的数据是 “字符串”）。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;responseText&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;3. 设置请求参数，建立与服务器的连接&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;get&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://localhost/api/ajaxtest&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;4. 向服务器发送请求&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xhr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;四-xmlhttprequest&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-xmlhttprequest&#34;&gt;#&lt;/a&gt; 四、XMLHttpRequest&lt;/h2&gt;
&lt;h3 id=&#34;1opentypeurlasync&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1opentypeurlasync&#34;&gt;#&lt;/a&gt; 1.open(type,url,async)&lt;/h3&gt;
&lt;p&gt;open (type,url（同源策略）,async（同步、异步）)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.open(type,url,async): 建立与服务器的连接
    type：请求的类型，get获取、post发送
    	* 区别? 
    		get请求数据接在url后面，post请求数据通过send方法传递
    		get传递的数据会比较少，post没有限制
    		get传递的数据会暴露出来
    url：数据请求的地址（API地址），一般由后端开发人员提供
    	* 相对路径的情况下，必须在同一个根目录(端口配置的目录)下。
        * 当前页面访问地址，API地址两者一定要同域
        * 同域（同源策略）：协议，域名，端口三者一致
        * 报错： No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;null&#39; is therefore not allowed access.
	async：是否异步发送请求（true,false），默认为true
        * 同步：按步骤顺序执行，前面的代码执行完后，后面的代码才会执行
        	做完前一件事情, 才能下一件事情（排队）
        * 异步：与其他操作同时执行，也叫并发（图片加载，ajax请求，定时器）
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2senddata&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2senddata&#34;&gt;#&lt;/a&gt; 2.send(data)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;2.send(data): 向服务器发送请求
	data：可选参数，post请求时才生效，表示发请求时传送的数据字符串。
    	 xhr.send(&#39;size=20&amp;amp;type=music&#39;);
		在某些浏览器中，如果不需要通过post请求主体发送数据，则必须传入null
//备注：get请求的数据写在url地址后
	request.open(&amp;quot;get&amp;quot;, &amp;quot;http://localhost/api/getdata.php?type=get&amp;amp;qty=10&amp;quot;, true);
	setRequestHeader(key,val)：设置请求头
//备注：利用请求头设置POST提交数据格式(form表单)：
	xhr.setRequestHeader(&#39;content-type&#39;,&#39;application/x-www-form-urlencoded&#39;);//open方法后设置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在请求收到服务器的响应后，响应的数据会自动填充 xhr 对象的属性，相关的属性简介如下&lt;/p&gt;
&lt;h3 id=&#34;3readystate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3readystate&#34;&gt;#&lt;/a&gt; 3.readyState&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;0 － （未初始化）尚未调用open()方法。
1 － （启动）已经调用open()方法，但尚未调用send()方法。
2 － （发送）send()方法执行完成，但尚未接收到响应。
3 － （接收）已经接收到部分响应数据。
4 － （完成）响应内容解析完成，可以在客户端调用了
只要readyState 属性的值由一个值变成另一个值，都会触发一次readystatechange 事件。必须在调用open()之前指定onreadystatechange事件处理程序才能确保跨浏览器兼容性。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4responsetext&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4responsetext&#34;&gt;#&lt;/a&gt; 4.responseText&lt;/h3&gt;
&lt;p&gt;保存服务器返回的数据（从服务器返回的数据是 “字符串”）。&lt;/p&gt;
&lt;h3 id=&#34;5status&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5status&#34;&gt;#&lt;/a&gt; 5.status&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;* 响应的HTTP 状态。
200（OK）：服务器成功返回了页面
304（Not Modified）：数据与服务器相同，不需要重服务器请求（直接使用缓存的数据）
400（Bad Request）：语法错误导致服务器不识别
401（Unauthorized）：请求需要用户认证
404（Not found）：请求地址不存在
500（Internal Server Error）：服务器出错或无响应
503（ServiceUnavailable）：由于服务器过载或维护导致无法完
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;五-跨域解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-跨域解决方案&#34;&gt;#&lt;/a&gt; 五、跨域解决方案&lt;/h2&gt;
&lt;h3 id=&#34;1jsonp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1jsonp&#34;&gt;#&lt;/a&gt; 1.JSONP&lt;/h3&gt;
&lt;p&gt;原理：利用 script 标签能加载其他域名的 js 文件的原理，实现跨域数据请求&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;figcaption data-lang=&#34;JSON&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* JSONP 是JSON with padding（填充式JSON 或参数式JSON）的简写。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* JSONP是一种可以绕过浏览器的安全限制，从不同的域请求数据的方法。&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* JSONP请求不是ajax请求，是利用script标签能加载其他域名的js文件的原理，来实现跨域数据的请求 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;* 局限性：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  - 只能为get请求&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  - 接口必须有回调函数的执行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;案例练习 1：使用 script 标签其他 js 文件调用本地 js 的某个函数；&lt;/p&gt;
&lt;p&gt;案例练习 2：使用 script 标签其他 php 文件调用本地 js 的未知名方法，返回数据&lt;/p&gt;
&lt;p&gt;案例练习 3：利用 JSONP 原理调用百度建议&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msg.oninput = function()&amp;#123;
    let _msg = msg.value;
    clearTimeout(timer);
    timer = setTimeout(()=&amp;gt;&amp;#123;
    let script = document.createElement(&#39;script&#39;);
    script.src=&#39;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/sujson=1&amp;amp;cb=getData&amp;amp;wd=&#39;+_msg;
    document.body.appendChild(script);
    &amp;#125;,500);
&amp;#125;
window.getData = function(data)&amp;#123;
    suggest.innerHTML = data.s.map(item=&amp;gt;&amp;#123;
        return `&amp;lt;li&amp;gt;$&amp;#123;item&amp;#125;&amp;lt;/li&amp;gt;`
        &amp;#125;).join(&amp;quot;&amp;quot;);
    &amp;#125;
&amp;#125;)
//原理性代码：
//1.script的src中回调函数的传递
script.src=&#39;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/sujson=1&amp;amp;cb=getData&amp;amp;wd=&#39;+_msg;
//2.声明全局函数
window.getData = function(data)&amp;#123;处理数据&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2cors&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2cors&#34;&gt;#&lt;/a&gt; 2.CORS&lt;/h3&gt;
&lt;p&gt;原理：在后端响应头添加词字段 header (‘Access-Control-Allow-Origin: *’)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing），它允许浏览器向跨源服务器发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。

CORS需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE浏览器不能低于IE10。服务器需要设置响应头，允许该域名访问
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;1.Access-Control-Allow-Origin
	header(&#39;Access-Control-Allow-Origin: *&#39;);  
该字段是必须的。需要在后端响应头添加词字段，值要么是一个*，表示接受任意域名的请求，要么指定一个域名http://localhost。
2.Access-Control-Allow-Methods
3.Access-Control-Allow-Headers
    header(&#39;Access-Control-Allow-Methods:POST&#39;);  
    header(&#39;Access-Control-Allow-Headers:x-requested-with,content-type&#39;); 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;案例 1：天气预报&lt;/p&gt;
&lt;p&gt;案例 2：百度地图&lt;/p&gt;
&lt;h3 id=&#34;3服务器代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3服务器代理&#34;&gt;#&lt;/a&gt; 3. 服务器代理&lt;/h3&gt;
&lt;p&gt;原理：file_get_contents ($url) // 获取网站内容&lt;/p&gt;
&lt;p&gt;后端不存在跨域问题，所以可以利用后端间接获取其他网站的数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ajax跨域请求之服务端代理（爬虫）
原理：获取页面所有内容，并利用正则匹配所需内容
file_get_contents($url) //获取网站内容
preg_match_all($reg,$str,$res) 
preg_match($reg,$str,$res)   //$str代表被匹配的内容，$res为结果
$content = iconv(原字符编码,新字符编码,$content);//修改$content字符编码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;案例 1：利用服务器代理获取外网 IP&lt;/p&gt;
&lt;p&gt;案例 2：根据 IP 获取所在城市（ajax 嵌套）&lt;/p&gt;
&lt;p&gt;案例 3：根据城市获取天气预报（ajax 嵌套）&lt;/p&gt;
&lt;p&gt;案例 4：POST 请求数据&lt;/p&gt;
&lt;h2 id=&#34;六-异步处理方法promise&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-异步处理方法promise&#34;&gt;#&lt;/a&gt; 六、异步处理方法 Promise&lt;/h2&gt;
&lt;h3 id=&#34;1promise&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1promise&#34;&gt;#&lt;/a&gt; 1.Promise&lt;/h3&gt;
&lt;p&gt;Promise 是一个构造函数，所谓的 Promise 对象，就是通过 new Promise () 实例化得到的对象，用来传递异步操作的数据。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理。&lt;/p&gt;
&lt;p&gt;1. 创建对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var p=new Promise(function(resolve,reject)&amp;#123;
    //成功拿到数据执行resolve,失败执行reject
&amp;#125;)
	*规定好了哪个阶段执行哪个函数
Promise的三种状态
    * Pending(未完成)可以理解为Promise对象实例new创建时候的初始状态
    * Resolved(成功)可以理解成功的状态
    * Rejected(失败)可以理解为失败的状态
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 执行方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;p.then(成功时要执行的代码).catch(失败时执行的代码)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 静态方法&lt;/p&gt;
&lt;p&gt;Promise.all([p1,p2,p3,p4])&lt;/p&gt;
&lt;p&gt;将多个 Promise 实例，包装成一个新的 Promise 实例&lt;/p&gt;
&lt;p&gt;所有参数中的 Promise 状态都为 resolved 时，新的 promise 状态才为 resolved&lt;/p&gt;
&lt;p&gt;只要 p1,p2,p3… 之中有一个被 rejected, 新的 promise 的状态就变成 rejected&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Promise.all([p1,p2,p3]).then(function(res)&amp;#123;
	console.log(res);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Promise.race ([p1,p2,p3…]) 竞速，完成一个即可&lt;/p&gt;
&lt;h3 id=&#34;2trycatch&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2trycatch&#34;&gt;#&lt;/a&gt; 2.try…catch&lt;/h3&gt;
&lt;p&gt;尝试执行代码，如果有错误则执行 catch 捕获错误 (不报错)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;try&amp;#123;
	console.log(666)
	//先尝试执行这里的代码
	show();
	//无报错，则忽略catch
	//如果报错，则执行catch，并传递错误信息
&amp;#125;catch(error)&amp;#123;
	console.log(error)
&amp;#125;
console.log(&#39;end&#39;);
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
            <title>面向对象与继承</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
            <pubDate>Wed, 13 Jul 2022 06:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-面向对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-面向对象&#34;&gt;#&lt;/a&gt; 一、面向对象&lt;/h1&gt;
&lt;h2 id=&#34;概念oop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念oop&#34;&gt;#&lt;/a&gt; 概念 oop&lt;/h2&gt;
&lt;p&gt;利用对象进行编程的一种思想。object-oriented programming，简称 oop&lt;/p&gt;
&lt;h2 id=&#34;创建对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建对象&#34;&gt;#&lt;/a&gt; 创建对象&lt;/h2&gt;
&lt;p&gt;1. 字面量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var obj={}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2. 通过 new 关键字实例化对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;var obj=new Object();&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.Object.create()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1) 工厂模式&lt;/p&gt;
&lt;p&gt;在 ECMAScript 中是无法创建类的，开发人员就发明了一种函数，用函数来封装特定接口创建对象的细节。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createPerson&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; job&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; o &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    o&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;job &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; job&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function-variable function&#34;&gt;sayName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; o&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; person1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;createPerson&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;zxj&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Software Engineer&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;缺点：没有解决对象识别的问题 (得到的都是 o 对象，对象的类型都是 Object)&lt;/p&gt;
&lt;p&gt;(2) 自定义构造函数（类的概念）&lt;/p&gt;
&lt;p&gt;ECMAScript 中的构造函数可以用来创建特定类型的对象。像 Object 和 Array 的原生的构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;sayName&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Student&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;王铁锤&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 可以通过控制台查看一下 person1 与 s1 的区别，更好理解。&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//person1: 	__proto__ 直接指向对象 Object 的原型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//	s1: 	__proto__ 指向 Student 的原型 -&gt; Student 的原型才指向对象 Object 的原型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 如此可以识别对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;构造函数与普通函数的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造函数与普通函数的区别&#34;&gt;#&lt;/a&gt; 构造函数与普通函数的区别&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;唯一区别：调用方式不同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;任何函数，只要通过 new 操作符来调用，它就可以作为构造函数；&lt;/li&gt;
&lt;li&gt;而任何构造函数，如果不通过 new 操作符来调用，那它跟普通函数无区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;约定：构造函数名首字母大写&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;new-调用自定义构造函数相当于执行了哪些步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#new-调用自定义构造函数相当于执行了哪些步骤&#34;&gt;#&lt;/a&gt; new 调用自定义构造函数，相当于执行了哪些步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;创建一个新对象 (在内部隐式调用了 new Object ())&lt;/li&gt;
&lt;li&gt;将构造函数的作用域赋给新对象 (把 this 绑定到实例对象)&lt;/li&gt;
&lt;li&gt;执行构造函数中的代码 (为这个新对象添加属性)&lt;/li&gt;
&lt;li&gt;返回新对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;this-的三种指向&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this-的三种指向&#34;&gt;#&lt;/a&gt; this 的三种指向&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;函数名 ()： this 指的是调用函数的当前对象&lt;/li&gt;
&lt;li&gt;ele. 事件 = 函数名 ：this 指的是 ele&lt;/li&gt;
&lt;li&gt;new 函数名 ()： this 为实例对象 (new 出来的对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二-对象的三大重要概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-对象的三大重要概念&#34;&gt;#&lt;/a&gt; 二、对象的三大重要概念&lt;/h1&gt;
&lt;p&gt;(一) 构造函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个函数都有一个 prototype 指向原型对象&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(二) 实例对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new 出来的对象就是实例对象，实例会复制构造函数内所有的属性和方法&lt;/li&gt;
&lt;li&gt;可以实例对象获取原型对象&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;实例对象__proto__
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(三) 原型对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个函数都有一个 prototype 指向原型对象&lt;/li&gt;
&lt;li&gt;原型对象默认包含一个 constructor 属性，指向构造函数&lt;/li&gt;
&lt;li&gt;任何写在原型对象中的属性和方法，都可以让所有实例对象共享&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;判断原型和实例的关系返回布尔值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#判断原型和实例的关系返回布尔值&#34;&gt;#&lt;/a&gt; 判断原型和实例的关系（返回布尔值）&lt;/h2&gt;
&lt;p&gt;constructor: 得到构造函数的引用，一般用于判断该实例是否由某一构造函数生成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实例.constructor == Student //true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;instanceof: 检测某个对象是不是某一构造函数的实例，适用于原型链中的所有实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实例 instanceof Student //true
实例 instanceof Object //true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;isPrototypeOf: 判断当前对象是否为实例的原型对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;原型对象.isPrototypeOf(实例) //true
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;三-解决方案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-解决方案&#34;&gt;#&lt;/a&gt; 三、解决方案&lt;/h1&gt;
&lt;p&gt;构造函数 + 原型对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用构造函数添加私有属性&lt;/li&gt;
&lt;li&gt;使用原型对象添加共享方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实例对象都有自己的独有属性&lt;/li&gt;
&lt;li&gt;实例共享了原型中的方法，最大限度的节省了内存&lt;/li&gt;
&lt;li&gt;支持向构造函数传递参数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;四-对象的属性特性es5对象扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-对象的属性特性es5对象扩展&#34;&gt;#&lt;/a&gt; 四、对象的属性特性 (ES5 对象扩展)&lt;/h1&gt;
&lt;h2 id=&#34;值属性的属性特性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#值属性的属性特性&#34;&gt;#&lt;/a&gt; 值属性的属性特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;configurable&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可配置性，控制着其描述的属性的修改，表示能否修改属性特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;enumerable&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可枚举性，表示能否通过 for…in 遍历得到属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;writable&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可写性，表示能够修改属性的值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;value&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;数据属性，表示属性的值，默认值为 undefined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;obj.** 创建属性，默认值属性为 true&lt;/p&gt;
&lt;p&gt;Object.defineProperty (obj,proper) 创建属性，默认值属性为 false&lt;/p&gt;
&lt;h2 id=&#34;与属性特性相关的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#与属性特性相关的方法&#34;&gt;#&lt;/a&gt; 与属性特性相关的方法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;设置属性特性：
Object.defineProperty(obj, property, descriptor) 给对象的某个属性设置属性特性
Object.defineProperties(object, descriptors) 给对象的所有属性设置属性特性

获取属性特性：
Object.getOwnPropertyDescriptor(object, propertyname)

获取对象的所有属性：
Object.keys(object) 只获取到可枚举的属性
Object.getOwnPropertyNames(object) 获取所有属性的名称（包含不能枚举的属性）
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;var obj = &amp;#123;
    a:1,
    b:&amp;quot;lemon&amp;quot;
&amp;#125;
//1.给对象添加一个属性，同时设置属性特性。此时其他的属性特性不设置默认都为false。
//即configurable为false，不可以修改属性特性。
//即enumerable为false，不可以枚举
//即writable为false，不可写，不可以修改属性值
Object.defineProperty(obj,&amp;quot;c&amp;quot;,&amp;#123;value:&amp;quot;laoxie&amp;quot;&amp;#125;)； //以上属性特性均可改成true，实现相应的功能。

// 2.同时修改多个属性特性
Object.defineProperties(obj, &amp;#123;
    b:&amp;#123;value:&#39;css4&#39;,enumerable:false&amp;#125;,
    c:&amp;#123;writable:true&amp;#125;  //报错，因为上面定义该属性的configurable为false，意思是不可以修改属性特性
&amp;#125;)

//建议：用传统方式添加属性，利用defineProperty修改属性特性（configurable为true的前提下）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;对象属性的遍历与判断&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象属性的遍历与判断&#34;&gt;#&lt;/a&gt; 对象属性的遍历与判断&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;for…in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;遍历对象中的所有可枚举属性，无论该属性存在于实例中还是原型中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;if(name in s1)&amp;#123;
	//只要通过对象能够访问到属性就返回true, 无论该属性存在于实例中还是原型中
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;对象.hasOwnProperty (属性)
&lt;ul&gt;
&lt;li&gt;检测一个属性是存在于对象本身中&lt;/li&gt;
&lt;li&gt;返回 true，说明属性存在对象中&lt;/li&gt;
&lt;li&gt;返回 false，说明属性不存在或在原型中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;检测一个属性是否存在于原型中：!obj.hasOwnProperty (name) &amp;amp;&amp;amp; (name in obj)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;五-原型对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-原型对象&#34;&gt;#&lt;/a&gt; 五、原型对象&lt;/h1&gt;
&lt;h2 id=&#34;重置原型对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重置原型对象&#34;&gt;#&lt;/a&gt; 重置原型对象&lt;/h2&gt;
&lt;p&gt;重置原型对象，可以一次性给原型对象添加多个方法，但切断了与原来原型对象的联系&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Popover()&amp;#123;&amp;#125;
Popover.prototype = &amp;#123;
    show:function()&amp;#123;&amp;#125;,
    hide:function()&amp;#123;&amp;#125;
&amp;#125;
//- 注意覆盖问题（系统的原型对象不建议重写）
//- 注意识别问题（不可枚举性）
Object.defineProperty(Popover.prototype,&amp;quot;constructor&amp;quot;,&amp;#123;value:&amp;quot;Popover&amp;quot;,configurable:true&amp;#125;)；
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;内置的原型对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#内置的原型对象&#34;&gt;#&lt;/a&gt; 内置的原型对象&lt;/h2&gt;
&lt;p&gt;使用内置原型可以给已有构造函数添加方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组 / 字符串 / 数字等方法调用原理&lt;/li&gt;
&lt;li&gt;扩展内置方法&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;if(!Array.prototype.norepeat)&amp;#123;
    Array.prototype.norepeat = function()&amp;#123;
        return Array.from(new Set(this)); // this：指向实例arr
	&amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;六-原型链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-原型链&#34;&gt;#&lt;/a&gt; 六、原型链&lt;/h1&gt;
&lt;p&gt;实例与 Object 原型对象之间的链条称为原型链&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原型模式的访问机制（原型搜索机制)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;读取实例对象的属性时，先从实例对象本身开始搜索。如果在实例中找到了这个属性，则返回该属性的值；&lt;/p&gt;
&lt;p&gt;如果没有找到，则继续搜索实例的原型对象，如果在原型对象中找到了这个属性，则返回该属性的值&lt;/p&gt;
&lt;p&gt;如果还是没找到，则向原型对象的原型对象查找，依此类推，直到 Object 的原型对象（最顶层对象）；&lt;/p&gt;
&lt;p&gt;如果在 Object 的原型对象中还搜索不到，则抛出错误；&lt;/p&gt;
&lt;h1 id=&#34;七-继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-继承&#34;&gt;#&lt;/a&gt; 七、继承&lt;/h1&gt;
&lt;p&gt;继承是面向对象中一个非常重要的特征。指的是：子类继承父类的属性和方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们可以通过继承的方式，在父类的属性和方法基础上，让子类也拥有这些属性和方法，并可以扩展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;继承的好处&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#继承的好处&#34;&gt;#&lt;/a&gt; 继承的好处:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;子类拥有父类所有的属性和方法（代码复用）；&lt;/li&gt;
&lt;li&gt;子类可以扩展自己的属性和方法（更灵活）；&lt;/li&gt;
&lt;li&gt;子类可以重写父类的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;原型链继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型链继承&#34;&gt;#&lt;/a&gt; 原型链继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;核心：拿父类实例来充当子类原型对象&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;无法操作父类构造函数的属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;gender&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gender &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token template-string&#34;&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;大家好，我叫&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;$&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token interpolation-punctuation punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;，欢迎跟大家交朋友&lt;/span&gt;&lt;span class=&#34;token template-punctuation string&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Object&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;defineProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;constructor&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;configurable&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token literal-property property&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;Person&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; lemon &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lemon&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;女&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//=============== 原型链继承 ==========&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Man&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Man&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; laoxie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Man&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;laoxie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;借用构造函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#借用构造函数&#34;&gt;#&lt;/a&gt; 借用构造函数&lt;/h2&gt;
&lt;p&gt;核心：借父类的构造函数来增强子类实例，相当于把父类的实例属性复制一份给子类实例&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;call：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;格式：父类构造函数.call (子类实例，参数 1, 参数 2, 参数 3…)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;apply：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;格式：父类构造函数.apply (子类实例，[参数 1, 参数 2, 参数 3…])&lt;br&gt;
 call 与 apply 的唯一区别：传参方式不同，call 多个参数，apply 只有两个参数，第二个参数为数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//aplly用法：借用方法
var arr = [20,2,40,33,21,8,22,46,32]
Math.max.apply(null,arr)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;组合继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组合继承&#34;&gt;#&lt;/a&gt; 组合继承&lt;/h2&gt;
&lt;p&gt;由于以上继承方法的缺点，实际开发中不可能单纯的只使用一种继承方法，而是利用它们的优点，规避它们的缺点，所以就有了组合继承法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;继承属性：借用构造函数
&lt;ul&gt;
&lt;li&gt;只在构造函数中定义属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;继承方法：原型链继承
&lt;ul&gt;
&lt;li&gt;把所有的方法写入原型对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;组合继承是最常用的继承模式。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺点（原型链继承法的缺点）：
&lt;ul&gt;
&lt;li&gt;在原型对象中生成多余的属性&lt;/li&gt;
&lt;li&gt;多次执行父类构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;//原型链继承基础上补充借用构造函数
function Man(name,age)&amp;#123;
    Person.call(this,name,age,&#39;男&#39;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;原型式继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原型式继承&#34;&gt;#&lt;/a&gt; 原型式继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;核心：先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决原型链继承法的缺点：生成多余的属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function object(o)&amp;#123;
    function F()&amp;#123;&amp;#125;
    F.prototype = o;
    return new F();
&amp;#125;
Man.prototype = object(Person.prototype);
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ES5 版本的原型式继承：Object.create ()&lt;/p&gt;
&lt;h2 id=&#34;寄生组合继承法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#寄生组合继承法&#34;&gt;#&lt;/a&gt; 寄生组合继承法&lt;/h2&gt;
&lt;p&gt;完美的继承方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;核心：
&lt;ul&gt;
&lt;li&gt;继承属性：借用构造函数&lt;/li&gt;
&lt;li&gt;继承方法：原型式继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 父类：构造函数中添加属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gender &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 父类：原型上添加方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;eat&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;eat!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 子类：借用构造函数继承父类属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Duke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hobby&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hobby &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; hobby&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 子类：寄生式继承父类的原型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;inheritFather&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;child&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; parent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; prototype &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;parent&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;constructor &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; child&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    child&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; prototype&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;inheritFather&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Duke&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 子类：添加子类私有方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Duke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;say&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; duke &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Duke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;duke&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;男&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;coding&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;duke&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;duke &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Duke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  age: 18&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  gender: &#34;男&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  hobby: &#34;coding&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  name: &#34;duke&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//  __proto__:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//      constructor: ƒ Duke(name, age, gender, hobby)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//      eat: ƒ ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//      say: ƒ ()&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;//      __proto__: Object&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// &amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;es6继承&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es6继承&#34;&gt;#&lt;/a&gt; ES6 继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;class 定义类
&lt;ul&gt;
&lt;li&gt;写在类里面的方法实际是给 Person.prototype 添加方法&lt;/li&gt;
&lt;li&gt;constructor 方法是类的默认方法，相当于在构造函数内生成属性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;//定义类
class Person &amp;#123;
    constructor(name,age) &amp;#123;
        this.name = name;
        this.age = age;
    &amp;#125;
    getInfo() &amp;#123;
         return `我叫$&amp;#123;this.name&amp;#125;,今年$&amp;#123;this.age&amp;#125;岁`;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;extends 实现继承
&lt;ul&gt;
&lt;li&gt;子类继承了父类，在子类构造函数中必须调用 super 方法。&lt;/li&gt;
&lt;li&gt;子类的 constructor 方法没有调用 super 之前，不能使用 this 关键字，否则报错，而放在 super 方法之后就是正确的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;// class 子类 extends 父类&amp;#123;&amp;#125;
class Person &amp;#123;
    constructor(name, age) &amp;#123;
        this.name = name;
        this.age = age;
    &amp;#125;
&amp;#125;

class Man extends Person &amp;#123;
    constructor(name, age, gender) &amp;#123;
        //this.gender = gender; // 报错
        super(name, age);
        this.gender = gender; // 正确
    &amp;#125;
&amp;#125;   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;子类继承了父类，在子类 constructor 中必须调用 super 方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;没有调用 super 之前，不能使用 this 关键字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.static 静态方法&lt;/p&gt;
&lt;p&gt;如果在一个方法前，加上 static 关键字，这就称为 “静态方法”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;静态方法不会被实例继承，而是直接通过类来调用 &lt;code&gt;Person.getInfo()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;父类的静态方法，可以被子类继承 &lt;code&gt;Man.getInfo()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;gender&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gender &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; gender&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 此处的方法写入原型对象中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;say&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;大家好&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;我叫$&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;eat&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;我是吃货&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; lemon &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lemon&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;女&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 继承方法&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Man&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;gender&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 继承属性&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;gender&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hobby &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;吃&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;喝&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; laoxie &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Man&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;laoxie&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;男&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;九-bind-call-apply&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#九-bind-call-apply&#34;&gt;#&lt;/a&gt; 九、bind、call、apply&lt;/h1&gt;
&lt;p&gt;相同点：三者都是改变函数执行时的上下文，即改变 this 指向&lt;/p&gt;
&lt;p&gt;1.bind (对象)&lt;/p&gt;
&lt;p&gt;改变函数的 this 指向，同时返回一个新函数&lt;/p&gt;
&lt;p&gt;2.call (对象，参数 1, 参数 2)&lt;/p&gt;
&lt;p&gt;改变函数的 this 指向，并且执行该函数&lt;/p&gt;
&lt;p&gt;3.apply (对象，[参数 1, 参数 2])&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;改变函数的 this 指向，并且执行该函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;apply (null,arr) 表示不改变 this 的指向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;允许通过数组将实参传递给形参&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 应用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 求数组中最大数最小数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 类数组转为数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; trueArr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arrayLike&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 判断引用数据类型的具体类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;prototype&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;str&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//&#34;[object String]&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;十-闭包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十-闭包&#34;&gt;#&lt;/a&gt; 十、闭包&lt;/h1&gt;
&lt;p&gt;1. 闭包：定义在一个函数内部的函数&lt;/p&gt;
&lt;p&gt;闭包是这样一种机制：函数嵌套函数，内部函数可以引用外部函数的参数和变量，参数和变量不会被垃圾回收机制所收回.&lt;/p&gt;
&lt;p&gt;这里涉及到几个概念:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数嵌套函数&lt;/li&gt;
&lt;li&gt;作用域 (全局变量和局部变量)&lt;br&gt;
 变量的访问规则&lt;/li&gt;
&lt;li&gt;垃圾回收机制 (garbage collection)&lt;br&gt;
 js 内部不断扫描内存，并清理无引用对象 (自动完成);&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2. 好处&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以让一个变量长期驻扎在内存当中不被释放&lt;/li&gt;
&lt;li&gt;避免全局变量的污染，和全局变量不同，闭包中的变量无法被外部使用&lt;/li&gt;
&lt;li&gt;私有成员的存在，无法被外部调用，只可以自己内部使用&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;闭包是指有权访问另一函数作用域中的变量的函数&lt;/li&gt;
&lt;li&gt;闭包，可以访问函数内部的局部变量，并让其长期驻留内存&lt;/li&gt;
&lt;li&gt;由于闭包会携带包含它的作用域 (运行环境)，因此会比其他函数占用更多内存，过度使用闭包可能会造成性能问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3. 缺点：由于闭包会携带包含它的作用域 (运行环境), 因此会比其他函数占用更多内存，过度使用闭包可能造成性能问题&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/</guid>
            <title>Javascript进阶</title>
            <link>https://dukeshao.com/2022/07/13/C_Javascript/Javascript%E8%BF%9B%E9%98%B6/</link>
            <category>Javascript</category>
            <pubDate>Wed, 13 Jul 2022 06:59:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一-函数&#34;&gt;#&lt;/a&gt; 一、函数&lt;/h1&gt;
&lt;h2 id=&#34;1概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1概念&#34;&gt;#&lt;/a&gt; 1. 概念&lt;/h2&gt;
&lt;p&gt;函数就是把特定功能的代码抽取出并进行封装，用来重复执行一些功能。&lt;/p&gt;
&lt;h2 id=&#34;2优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2优点&#34;&gt;#&lt;/a&gt; 2. 优点&lt;/h2&gt;
&lt;p&gt;函数可以重复执行某一部分代码（通过函数名调用）；&lt;/p&gt;
&lt;p&gt;使代码清晰有层次，利于维护；&lt;/p&gt;
&lt;h2 id=&#34;3创建方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3创建方式&#34;&gt;#&lt;/a&gt; 3. 创建方式&lt;/h2&gt;
&lt;h4 id=&#34;a关键字声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#a关键字声明&#34;&gt;#&lt;/a&gt; a. 关键字声明&lt;/h4&gt;
&lt;p 执行的功能代码=&#34;&#34;&gt;​	function 函数名 (形参)&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;b赋值式声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#b赋值式声明&#34;&gt;#&lt;/a&gt; b. 赋值式声明&lt;/h4&gt;
&lt;p 执行的功能代码=&#34;&#34;&gt;​	var 函数名 = function (形参)&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;token function-variable function&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;c构造函数法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c构造函数法&#34;&gt;#&lt;/a&gt; c. 构造函数法&lt;/h4&gt;
&lt;p&gt;​	 var 函数名 = new Function (); 不推荐使用&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; fn &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;4分类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4分类&#34;&gt;#&lt;/a&gt; 4. 分类&lt;/h2&gt;
&lt;p&gt;1	内置函数&lt;/p&gt;
&lt;p&gt;2	自定义函数&lt;/p&gt;
&lt;p&gt;3	匿名函数&lt;/p&gt;
&lt;p 执行的功能代码=&#34;&#34;&gt;function (形参)&lt;/p&gt;
&lt;h2 id=&#34;5函数的执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5函数的执行&#34;&gt;#&lt;/a&gt; 5. 函数的执行&lt;/h2&gt;
&lt;p&gt;1	主动执行：&lt;/p&gt;
&lt;p&gt;​	函数名 ()&lt;/p&gt;
&lt;p&gt;2	事件驱动：&lt;/p&gt;
&lt;p&gt;​	ele.onclick = 函数名；&lt;/p&gt;
&lt;p&gt;​	ele.onclick=function(){}&lt;/p&gt;
&lt;h2 id=&#34;6作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6作用域&#34;&gt;#&lt;/a&gt; 6. 作用域&lt;/h2&gt;
&lt;p&gt;（一）分类&lt;/p&gt;
&lt;h3 id=&#34;1全局作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1全局作用域&#34;&gt;#&lt;/a&gt; 1	全局作用域&lt;/h3&gt;
&lt;p&gt;全局变量：在函数外定义的变量称为全局变量&lt;/p&gt;
&lt;h3 id=&#34;2局部作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2局部作用域&#34;&gt;#&lt;/a&gt; 2	局部作用域&lt;/h3&gt;
&lt;p&gt;局部变量：在函数内定义的变量&lt;/p&gt;
&lt;h3 id=&#34;3变量的访问规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3变量的访问规则&#34;&gt;#&lt;/a&gt; 3	变量的访问规则&lt;/h3&gt;
&lt;p&gt;​	(1)	若在某个函数内部使用一个变量，那么先查找该函数内是否有变量声明；&lt;/p&gt;
&lt;p&gt;​	(2)	如果当前函数无变量 a，则往父级函数查找，如果找到则使用，并停止查找；&lt;/p&gt;
&lt;p&gt;​	(3)	如果在父级函数还是无法找到，则继续往上一层函数查找，以此类推；&lt;/p&gt;
&lt;p&gt;​	(4)	直到最顶层 (全局作用域)，如果还是没找到，则报错误 ** is not defined；&lt;/p&gt;
&lt;p&gt;在函数内若没有通过 var 声明变量，相当于在全局作用域用 var 声明了该变量&lt;/p&gt;
&lt;h3 id=&#34;4作用域链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4作用域链&#34;&gt;#&lt;/a&gt; 4	作用域链&lt;/h3&gt;
&lt;p&gt;​	当函数访问变量时，根据就近原则从内到外查询变量，这个路径称为作用域链；&lt;/p&gt;
&lt;h2 id=&#34;7函数的实参与形参&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7函数的实参与形参&#34;&gt;#&lt;/a&gt; 7. 函数的实参与形参&lt;/h2&gt;
&lt;p&gt;1	形参：函数定义时的参数（变量）&lt;/p&gt;
&lt;p&gt;2	实参：函数执行时的参数（值）&lt;/p&gt;
&lt;p&gt;形参与实参个数可以不一致&lt;/p&gt;
&lt;p&gt;函数内部隐藏的对象（是一个类数组），保存着实参的信息&lt;/p&gt;
&lt;p&gt;一、声明提前&lt;/p&gt;
&lt;p&gt;概念：代码从上往下顺序执行之前，会将所有的声明提升到当前作用域的最顶端，之后顺序执行&lt;/p&gt;
&lt;p&gt;在变量赋值之前使用变量，变量的值为 undefined&lt;/p&gt;
&lt;p&gt;用赋值式声明函数，若在声明之前调用函数，会报错，** is not  a function；&lt;/p&gt;
&lt;p&gt;用关键字声明函数，可以在声明之前调用函数&lt;/p&gt;
&lt;h2 id=&#34;基本数据类型与引用数据类型的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本数据类型与引用数据类型的区别&#34;&gt;#&lt;/a&gt; 基本数据类型与引用数据类型的区别&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;基本数据类型放在栈中,引用数据类型放在堆中
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-案例&#34;&gt;#&lt;/a&gt; ①　案例：&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;b&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//10,11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; brr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;brr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token operator&#34;&gt;===&lt;/span&gt;brr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2-数据类型作为函数的参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-数据类型作为函数的参数&#34;&gt;#&lt;/a&gt; ②　数据类型作为函数的参数&lt;/h3&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 基本数据类型，传递的是值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;num&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    num&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//11&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 引用数据类型，传递的是地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;numAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//10,2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;函数的返回值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数的返回值&#34;&gt;#&lt;/a&gt; 函数的返回值&lt;/h2&gt;
&lt;p&gt;1	概念：通过 return 将函数内部的值返回到函数外，函数外若要使用，必须接收。&lt;/p&gt;
&lt;p&gt;2	如果函数没有 return，执行完后返回 undefined&lt;/p&gt;
&lt;p&gt;3	return 后面的代码不会被执行&lt;/p&gt;
&lt;h2 id=&#34;this&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#this&#34;&gt;#&lt;/a&gt; this&lt;/h2&gt;
&lt;p&gt;1	表示当前对象，取决于谁调用了这个函数&lt;/p&gt;
&lt;p&gt;2	直接执行，this 为 window；事件驱动，this 为绑定的元素。&lt;/p&gt;
&lt;h2 id=&#34;递归&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#递归&#34;&gt;#&lt;/a&gt; 递归&lt;/h2&gt;
&lt;p&gt;（自己调用自己）&lt;/p&gt;
&lt;p&gt;1	容易出现死循环&lt;/p&gt;
&lt;p&gt;2	递归避免死循环，设置好临界点 return&lt;/p&gt;
&lt;h2 id=&#34;回调函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#回调函数&#34;&gt;#&lt;/a&gt; 回调函数&lt;/h2&gt;
&lt;p&gt;（函数作为参数传递）&lt;/p&gt;
&lt;h1 id=&#34;二-数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二-数组&#34;&gt;#&lt;/a&gt; 二、数组&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念：&lt;/h2&gt;
&lt;p&gt;一系列数据的集合，每一项（数组的元素）可以保存任何类型的数据，每个元素之间用逗号隔开&lt;br&gt;
 2. 数组的声明&lt;br&gt;
 (1）字面量 var arr = [1,2,3];&lt;br&gt;
(2）构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = new Array(3); 创建长度为3的数组
var arr = new Array(&amp;quot;aa&amp;quot;,&amp;quot;bb&amp;quot;,&amp;quot;cc&amp;quot;);  创建数组及定义好每一项的值
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 数组的操作 (增删改查)&lt;/p&gt;
&lt;p&gt;数组的索引:arr [索引]，索引从 0 开始计数&lt;/p&gt;
&lt;p&gt;数组的长度:arr.length&lt;br&gt;
 数组的遍历：遍历索引从 0-arr.length-1，通过 arr [索引] 拿到每一项的值&lt;/p&gt;
&lt;h2 id=&#34;方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#方法&#34;&gt;#&lt;/a&gt; 方法&lt;/h2&gt;
&lt;h3 id=&#34;1-增删改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-增删改&#34;&gt;#&lt;/a&gt; 1. 增删改&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;(1)增删改方法,改变原数组,返回值为长度或改变项
	push() ： 往最后添加项
	pop() ： 删除最后项
	unshift() ： 往前添加项
	shift() ： 删除最前项
	splice(startIdx,num,item) : 增、删、换
	reverse() : 数组倒序
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-传递与复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-传递与复制&#34;&gt;#&lt;/a&gt; 2. 传递与复制&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;(2)传递、复制方法,不改变原数组
	slice(startIdx,endIdx) : 截取数组
	join(&#39;拼接符&#39;) ： 数组拼接为字符串,默认逗号拼接
	concat(数组1,数组2,...) ： 合并数组,返回调用方法的新数组
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;数组的排序算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的排序算法&#34;&gt;#&lt;/a&gt; 数组的排序算法&lt;/h2&gt;
&lt;h3 id=&#34;1冒泡排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1冒泡排序&#34;&gt;#&lt;/a&gt; 1. 冒泡排序&lt;/h3&gt;
&lt;p&gt;​	外层遍历的是轮数&lt;br&gt;
​	内层是每一轮，遍历当前索引，与索引 + 1 进行比较换位置。每一轮将一个最大的数排在最后&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Math&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; box&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2选择排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2选择排序&#34;&gt;#&lt;/a&gt; 2. 选择排序&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;固定被比较的索引，与后面的每个索引对应的值进行比较&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外层循环是固定的被比较的索引 i：0-arr.length-2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内层循环是比较 i 的索引 j，从 i+1 到 arr.length 进行遍历&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;343&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; item &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; item&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;666&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3快速排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3快速排序&#34;&gt;#&lt;/a&gt; 3. 快速排序&lt;/h3&gt;
&lt;p&gt;（递归）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr=[1,9,2,23,10,55,33];
fastSort(arr);
function fastSort(arr)&amp;#123;
	if(arr.length&amp;lt;=1)&amp;#123;
		return arr;
	&amp;#125;
	var midIdx=parseInt(arr.length/2);
	var midNum=arr.splice(midIdx,1)[0];
	var ltArr=[];
	var gtArr=[];
	for(var i=0;i&amp;lt;arr.length;i++)&amp;#123;
		if(arr[i]&amp;lt;=midNum)&amp;#123;
			ltArr.push(arr[i]);
		&amp;#125;else if(arr[i]&amp;gt;midNum)&amp;#123;
			gtArr.push(arr[i]);
		&amp;#125;
	&amp;#125;
	return fastSort(ltArr).concat([midNum],fastSort(gtArr));
&amp;#125;
console.log(fastSort(arr));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4sort排序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4sort排序&#34;&gt;#&lt;/a&gt; 4.sort () 排序&lt;/h3&gt;
&lt;p&gt;arr.sort () 将原数组中的元素排序，并返回排序后的数组&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;默认以字符串的排列方式（转换成 ASCII 码进行对比)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sort (function (a,b){return a-b;}) 从小到大排序&lt;/p&gt;
&lt;p&gt;var res = arr.sort(function(a,b){&lt;br&gt;
//return 值&amp;gt; 0 a,b 互换&lt;br&gt;
 //return 值 &amp;lt;=0 不动&lt;br&gt;
 return a-b;&lt;br&gt;
});&lt;br&gt;
console.log(arr,res);&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组的传递与复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组的传递与复制&#34;&gt;#&lt;/a&gt; 数组的传递与复制&lt;/h2&gt;
&lt;h3 id=&#34;1传递&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1传递&#34;&gt;#&lt;/a&gt; 1. 传递&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基本数据类型中，传递的是值 (数字，字符串，布尔类型，null,undefined)&lt;/li&gt;
&lt;li&gt;引用数据类型中，传递的是在堆中的地址 (数组，对象)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2复制&#34;&gt;#&lt;/a&gt; 2. 复制&lt;/h3&gt;
&lt;p&gt;基本数据类型：改变复制的值，不影响原值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var a = 10;
var b = a;//var b = 10
b = 30;
console.log(a,b);//10,30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引用数据类型：改变复制的值，会影响原值（浅复制）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [10,20,30];
var brr = arr;
brr[0] = 66;
console.log(arr,brr);//[66,20,30][66,20,30]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;引用数据类型：改变复制的值，不影响原值（深复制）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 循环拷贝数组的每一项 (不适用多维数组)&lt;/li&gt;
&lt;li&gt;slice(0)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr = [10,20,30];
// var res = [];
// for(var i=0;i&amp;lt;arr.length;i++)&amp;#123;
// 	res.push(arr[i]);
// &amp;#125;
// console.log(res);//10,20,30
// res[0] = 40;
// console.log(arr,res);
//=======================================
var res = arr.slice(0);
res[0] = 40;
console.log(arr,res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多维数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多维数组&#34;&gt;#&lt;/a&gt; 多维数组&lt;/h2&gt;
&lt;p&gt;数组嵌套数组&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// var arr = [[&amp;quot;hzh&amp;quot;,&amp;quot;hyd&amp;quot;],[&amp;quot;lm&amp;quot;,&amp;quot;jh&amp;quot;],[&amp;quot;xw&amp;quot;,&amp;quot;rw&amp;quot;],[&amp;quot;lz&amp;quot;,&amp;quot;zlh&amp;quot;],[&amp;quot;hhm&amp;quot;,&amp;quot;dz&amp;quot;]];
var arr = [];
var brr = [];
var n = 0;
for(var i=1;i&amp;lt;=25;i++)&amp;#123;
	brr.push(i);
	n++;
	if(n % 5==0)&amp;#123;
		arr.push(brr);
		brr = [];
	&amp;#125;
&amp;#125;
console.log(arr);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;三-对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三-对象&#34;&gt;#&lt;/a&gt; 三、对象&lt;/h1&gt;
&lt;h2 id=&#34;创建对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建对象&#34;&gt;#&lt;/a&gt; 创建对象&lt;/h2&gt;
&lt;p&gt;1. 字面量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = &amp;#123;
	name : &amp;quot;xiaofang&amp;quot;,
	age : 17,
	hobby : &amp;quot;学习&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2. 构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj1 = new Object();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;对象的操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象的操作&#34;&gt;#&lt;/a&gt; 对象的操作&lt;/h2&gt;
&lt;p&gt;操作对象键对应的值&lt;/p&gt;
&lt;p&gt;obj. 键&lt;/p&gt;
&lt;p&gt;obj [“具题的键”] obj [变量]&lt;br&gt;
 对象的遍历&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; for(var key in obj)&amp;#123;
	key代表键;
	obj[key]获取每个键对应的值
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于单个键值对而言，键是变量，值就是值&lt;/p&gt;
&lt;p&gt;对于整个对象而言，对象是变量，键是具体的属性&lt;/p&gt;
&lt;h3 id=&#34;1添加-修改属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1添加-修改属性&#34;&gt;#&lt;/a&gt; (1) 添加、修改属性&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;obj.sex = &#39;男&#39;;
obj[&#39;weight&#39;] = 60；
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2删除属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2删除属性&#34;&gt;#&lt;/a&gt; (2) 删除属性&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;var obj = &amp;#123;name:&#39;laoxie&#39;,age:18,gender:&#39;man&#39;&amp;#125;
//删除age属性
delete obj.age;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3读取属性值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3读取属性值&#34;&gt;#&lt;/a&gt; (3) 读取属性值&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;obj.name;//==&amp;gt;小明
//如果读取一个不存在的属性，返回undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4遍历对象forin&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4遍历对象forin&#34;&gt;#&lt;/a&gt; (4) 遍历对象 for…in&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    var obj = &amp;#123;name:&#39;laoxie&#39;，age:18，gender:&#39;男&#39;&amp;#125;；  
    for(var key in obj)&amp;#123;
        //遍历obj对象里面所有的键key,Obj[key]操作所有键对应的值。
        document.write(obj[key]);//分别输出：&#39;laoxie&#39;,18,&#39;男&#39;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;数组与对象的组合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组与对象的组合&#34;&gt;#&lt;/a&gt; 数组与对象的组合&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; [&amp;#123;
        id:&#39;001&#39;,
        name:&#39;iphone7 plugs&#39;,
        nickname:&#39;肾7&#39;,
        imgurl:&#39;img/ip7.jpg&#39;,
        price:5899.00,
        sale:5888.00,
        color:&#39;土豪金&#39;
    &amp;#125;,&amp;#123;
        id:&#39;002&#39;,
        name:&#39;Note7&#39;,
        nickname:&#39;爆炸7&#39;,
        imgurl:&#39;img/note7.jpg&#39;,
        price:3899.00,
        sale:998.00,
        color:&#39;黑色&#39;
    &amp;#125;,&amp;#123;
        id:&#39;003&#39;,
        name:&#39;荣耀7&#39;,
        nickname:&#39;牛x7&#39;,
        imgurl:&#39;img/honor7.jpg&#39;,
        price:1999.00,
        sale:1899.00,
        color:&#39;白色&#39;
    &amp;#125;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;四-es5数组新增方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#四-es5数组新增方法&#34;&gt;#&lt;/a&gt; 四、ES5 数组新增方法&lt;/h1&gt;
&lt;h2 id=&#34;迭代遍历方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#迭代遍历方法&#34;&gt;#&lt;/a&gt; 迭代（遍历）方法&lt;/h2&gt;
&lt;h3 id=&#34;1-foreach&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-foreach&#34;&gt;#&lt;/a&gt; 1. forEach()&lt;/h3&gt;
&lt;p&gt;forEach (function (item,idx,arr){})  遍历数组，与 for 循环没有太大差别，比 for 循环方便&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;item 代表数组中的每一项&lt;/li&gt;
&lt;li&gt;idx 代表索引&lt;/li&gt;
&lt;li&gt;arr 代表当前数组&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
for(var i=0;i&amp;lt;arr.length;i++)&amp;#123;
	console.log(arr[i]);
&amp;#125;
arr.forEach(function(item,idx,arr)&amp;#123;
	console.log(item,idx,arr);
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2map&#34;&gt;#&lt;/a&gt; 2.map()&lt;/h3&gt;
&lt;p&gt;map (function (item,idx,arr){return ;})  返回一个数量相等的数组，内容是什么取决于在 fn 中的返回值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.map(function(item,idx,arr)&amp;#123;
			console.log(item);
			return item*2;
		&amp;#125;)
		console.log(res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3filter&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3filter&#34;&gt;#&lt;/a&gt; 3.filter()&lt;/h3&gt;
&lt;p&gt;filter (function (item,idx,arr){}) 返回一个数组，存放执行 fn 后返回 true 的数组元素 (过滤)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.filter(function(item,idx,arr)&amp;#123;
			return item&amp;gt;55;
		&amp;#125;)
		console.log(res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4some&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4some&#34;&gt;#&lt;/a&gt; 4.some()&lt;/h3&gt;
&lt;p&gt;some (function (item,idx,arr){}) 返回布尔值，如果 fn 对数组任何一项返回 true，则返回 true。&lt;/p&gt;
&lt;p&gt;查找数组中是否有满足条件的项。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.some(function(item,idx,arr)&amp;#123;
			console.log(idx);//0
			return item&amp;gt;666;//777&amp;gt;666直到找到true就不再遍历
		&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5every&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5every&#34;&gt;#&lt;/a&gt; 5.every()&lt;/h3&gt;
&lt;p&gt;every (function (item,idx,arr){}) 返回布尔值，若 fn 对数组中有一项返回 false，则返回 false&lt;/p&gt;
&lt;p&gt;检查数组所有项，是否都满足条件，是则返回 true，否则返回 false。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var arr = [777,10,44,66];
var res = arr.every(function(item,idx,arr)&amp;#123;
			return item&amp;gt;666;
		&amp;#125;)
		console.log(res);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;归并方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#归并方法&#34;&gt;#&lt;/a&gt; 归并方法&lt;/h2&gt;
&lt;h3 id=&#34;reducefninitval&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reducefninitval&#34;&gt;#&lt;/a&gt; reduce(fn,initVal)&lt;/h3&gt;
&lt;p&gt;fn(prev,current,idx,arr)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prev: fn 上一次执行的返回值，第一次为 initVal，若 initVal 没有定义，为数组的第一个元素值&lt;/li&gt;
&lt;li&gt;current: 当前索引对应的值&lt;/li&gt;
&lt;li&gt;idx: 当前索引&lt;/li&gt;
&lt;li&gt;arr: 数组&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;应用： 数组求和&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//对数组求和
var res = arr.reduce(function(prev,current,idx,arr)&amp;#123;
	return prev+current;
&amp;#125;,0);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;reducerightfninitval&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#reducerightfninitval&#34;&gt;#&lt;/a&gt; reduceRight(fn,initVal)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;fn (prev,cur,index,array): fn 是每一项调用的函数，函数接受 4 个参数分别是
&lt;ul&gt;
&lt;li&gt;prev：函数上一次的返回值。（第一次的值参考 initVal）&lt;/li&gt;
&lt;li&gt;cur：当前值，&lt;/li&gt;
&lt;li&gt;index：索引值，&lt;/li&gt;
&lt;li&gt;array：当前数组，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函数需要返回一个值，这个值会在下一次迭代中作为 prev 的值&lt;/li&gt;
&lt;li&gt;initVal: 迭代初始值（可省略），如果缺省，prev 的值为数组第一项&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;静态方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态方法&#34;&gt;#&lt;/a&gt; 静态方法&lt;/h2&gt;
&lt;p&gt;只能由构造函数自己去调用&lt;/p&gt;
&lt;h3 id=&#34;arrayisarray&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#arrayisarray&#34;&gt;#&lt;/a&gt; Array.isArray()&lt;/h3&gt;
&lt;p&gt;Array.isArray () 判断是否为数组，返回布尔值&lt;/p&gt;
&lt;h2 id=&#34;索引方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#索引方法&#34;&gt;#&lt;/a&gt; 索引方法&lt;/h2&gt;
&lt;h3 id=&#34;indexoflastindexofa3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#indexoflastindexofa3&#34;&gt;#&lt;/a&gt; indexOf/lastIndexOf(“a”,3)&lt;/h3&gt;
&lt;p&gt;indexOf (keyword [,startIdx]) 返回 keyword 所在数组中的索引值；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果数组不存在 keyword，则返回 - 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;startIdx 规定开始查找的索引值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用：判断数组中是否存在某个值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr=[10,20,50,40,50]
console.log(arr.indexOf(50))
//2
console.log(arr.indexOf(50,3))
//4
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;五-字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#五-字符串&#34;&gt;#&lt;/a&gt; 五、字符串&lt;/h1&gt;
&lt;p&gt;1. 定义：字符串就是一串字符，由双（单）引号括起来&lt;/p&gt;
&lt;p&gt;2. 创建字符串&lt;/p&gt;
&lt;p&gt;​	字面量 var str=“hello”&lt;/p&gt;
&lt;p&gt;​	构造函数 var str=new String (“hello”);&lt;/p&gt;
&lt;p&gt;3. 字符串的操作&lt;/p&gt;
&lt;p&gt;​	字符串的长度 str.length&lt;/p&gt;
&lt;p&gt;​	字符串的索引 str [索引]   ==&amp;gt;es5&lt;/p&gt;
&lt;p&gt;​	str.charAt (索引)&lt;/p&gt;
&lt;p&gt;4. 字符串的方法&lt;/p&gt;
&lt;p&gt;（1）split (分隔符)，将字符串根据分隔符，拆分成数组。原字符串不变&lt;/p&gt;
&lt;p&gt;（2）replace (需要被替换的字符，替换后的字符)，字符串的替换方法。原字符串不变&lt;/p&gt;
&lt;p&gt;（3）slice (start [,end]) 字符串的截取方法，截取 start 到 end，不包括 end 的字符串，支持负数&lt;/p&gt;
&lt;p&gt;substring (start [,end]) 与 slice 一样，但不支持负数&lt;/p&gt;
&lt;p&gt;substr (start [,len]) 支持负数，len 为截取的数量&lt;/p&gt;
&lt;p&gt;（4）字符串大小写转换&lt;/p&gt;
&lt;p&gt;toLowerCase ()  转换成小写&lt;/p&gt;
&lt;p&gt;toUpperCase ()  转换成大写&lt;/p&gt;
&lt;p&gt;（5）trim () 删除前后所有空格，返回新的字符串 (es5)&lt;/p&gt;
&lt;p&gt;5. 字符与字符编码&lt;/p&gt;
&lt;h1 id=&#34;六-正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#六-正则表达式&#34;&gt;#&lt;/a&gt; 六、正则表达式&lt;/h1&gt;
&lt;p&gt;1. 字面量创建&lt;/p&gt;
&lt;p&gt;/ 字符串 /&lt;/p&gt;
&lt;p&gt;例如：var reg = / 傻逼 /&lt;/p&gt;
&lt;p&gt;​	g 全局匹配&lt;/p&gt;
&lt;p&gt;​	i 不区分大小写&lt;/p&gt;
&lt;p&gt;2. 构造函数创建&lt;/p&gt;
&lt;p&gt;​	new RegExp (“字符串”,“gi”)&lt;/p&gt;
&lt;p&gt;​	new RegExp (变量，“gi”)&lt;/p&gt;
&lt;h1 id=&#34;七-math&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#七-math&#34;&gt;#&lt;/a&gt; 七、Math&lt;/h1&gt;
&lt;p&gt;1. 概念：一个保存数学公式和信息的对象&lt;/p&gt;
&lt;p&gt;2. 属性：&lt;/p&gt;
&lt;p&gt;Math.PI		π  3.1415926…&lt;/p&gt;
&lt;p&gt;3. 方法：&lt;/p&gt;
&lt;p&gt;Math.random ()  // 返回 0-1 之间的随机数（不包括 1）&lt;/p&gt;
&lt;p&gt;Math.round ()  // 四舍五入&lt;/p&gt;
&lt;p&gt;Math.ceil ()  // 向上取整&lt;/p&gt;
&lt;p&gt;Math.floor ()  // 向下取整&lt;/p&gt;
&lt;p&gt;Math.max (num1,num2,…) // 最大的数&lt;/p&gt;
&lt;p&gt;Math.min (num1,num2,…) // 最小的数&lt;/p&gt;
&lt;p&gt;Math.abs () // 绝对值&lt;/p&gt;
&lt;p&gt;Math.pow (x,y)  //x 的 y 次方&lt;/p&gt;
&lt;h1 id=&#34;八-date&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#八-date&#34;&gt;#&lt;/a&gt; 八、Date&lt;/h1&gt;
&lt;h2 id=&#34;创建日期时间对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建日期时间对象&#34;&gt;#&lt;/a&gt; 创建日期时间对象&lt;/h2&gt;
&lt;p&gt;构造函数 new Date ();&lt;/p&gt;
&lt;p&gt;不带参数，得到的是代码执行时的时间（本地时间）&lt;/p&gt;
&lt;p&gt;带参数：字符串，指定日期；数字，指定毫秒数（距离纪元时间的毫秒数）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();//代码运行时的本地时间
var d=new Date(&amp;quot;2017/10/10 12:00:00&amp;quot;);
var d=new Date(2000); //距离纪元时间的毫秒数
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;时间日期对象的方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#时间日期对象的方法&#34;&gt;#&lt;/a&gt; 时间日期对象的方法&lt;/h2&gt;
&lt;p&gt;1. 获取方法&lt;/p&gt;
&lt;p&gt;获取年月日&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();
var year=d.getFullYear();//2019
var month=d.getMonth(); //月份0-11，得到的月份记得+1才是真实月份;
var date=d.getDate()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取星期&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();
var day=d.getDay();  //0-6:星期天-星期六
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取时分秒&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var d=new Date();
var hour=d.getHours();
var minute=d.getMinutes();
var second=d.getSeconds();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;date.getTime (); 获取距离纪元时间的毫秒数&lt;/p&gt;
&lt;h2 id=&#34;静态方法-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态方法-2&#34;&gt;#&lt;/a&gt; 静态方法&lt;/h2&gt;
&lt;p&gt;Date.parse (“2015-08-24”)// 返回指定日期距 1970-1-1 零时的毫秒数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS：转换格式默认支持 2015-08-24 或 2015/08/24&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Date.now ();// 返回执行这行代码时距 1970-1-1 零时的毫秒数&lt;/p&gt;
&lt;h2 id=&#34;定时器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定时器&#34;&gt;#&lt;/a&gt; 定时器&lt;/h2&gt;
&lt;p&gt;1.var timer=setInterval (function (){}, 毫秒数)；每隔多少毫秒执行一次函数&lt;/p&gt;
&lt;p&gt;2.setTimeout (function (){}, 毫秒数)；延迟多少毫秒执行函数，只执行一次&lt;/p&gt;
&lt;p&gt;3.clearInterval (timer)；清除指定 id 标识的定时器操作&lt;/p&gt;
&lt;p&gt;4.clearTimeout (timer)；清除指定 id 标识的延迟操作&lt;/p&gt;
&lt;h1 id=&#34;九-bom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#九-bom&#34;&gt;#&lt;/a&gt; 九、BOM&lt;/h1&gt;
&lt;h2 id=&#34;概念-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-2&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;BOM 是 Browser Object Model（浏览器对象模型）的缩写，提供与浏览器窗口进行交互的对象。JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C, 而 BOM 缺乏标准。这也是各种浏览器不兼容的根源所在；&lt;/p&gt;
&lt;p&gt;1.window 对象&lt;/p&gt;
&lt;p&gt;window 对象是 BOM 的核心，是最顶层的对象，所有对象都是通过它延伸出来的&lt;/p&gt;
&lt;p&gt;2. 全局作用域下定义的变量都是 window 对象的属性；&lt;/p&gt;
&lt;p&gt;尽量避免声明全局变量，减少命名冲突，避免全局污染；&lt;/p&gt;
&lt;p&gt;在函数内部不用 var 声明的变量会成为全局变量，即 window 对象的属性&lt;/p&gt;
&lt;p&gt;window 对象可以在代码中省略，如 window.alert () 可以写成 alert ();&lt;/p&gt;
&lt;p&gt;delete 不能删除全局变量；&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var obj = &amp;#123;name:&#39;xxx&#39;&amp;#125;

//删除对象的属性用delete：
delete obj.name;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;window对象下的属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#window对象下的属性&#34;&gt;#&lt;/a&gt; window 对象下的属性&lt;/h2&gt;
&lt;p&gt;1. 浏览器窗口尺寸&lt;/p&gt;
&lt;p&gt;innerWidth/innerHeight, // 表示浏览器窗口” 可视区域” 尺寸&lt;/p&gt;
&lt;p&gt;outerWidth/outerHeight// 表示整个浏览器窗口的尺寸&lt;/p&gt;
&lt;p&gt;2. 滚动相关&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;scrollX/scrollY// 获取浏览器窗口滚动条滚动过的距离&lt;/li&gt;
&lt;li&gt;scrollTo (x,y) // 设置浏览器滚动距离&lt;/li&gt;
&lt;li&gt;scrollBy (xnum,ynum) // 设置基于当前位置滚动的距离，可以为负数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;window的常用事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#window的常用事件&#34;&gt;#&lt;/a&gt; window 的常用事件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;onload // 页面资源全部加载完成后触发这个事件（开发中不常用）（document.addEventListener (“DOMContentLoaded”,function (){})）&lt;/li&gt;
&lt;li&gt;onscroll// 窗口滚动条滚动时触发&lt;/li&gt;
&lt;li&gt;onresize // 窗口大小改变时触发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;系统弹窗&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#系统弹窗&#34;&gt;#&lt;/a&gt; 系统弹窗&lt;/h2&gt;
&lt;h3 id=&#34;1alertmsg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1alertmsg&#34;&gt;#&lt;/a&gt; 1.alert(msg)&lt;/h3&gt;
&lt;p&gt;// 弹出对话框&lt;/p&gt;
&lt;h3 id=&#34;2confirmmsg&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2confirmmsg&#34;&gt;#&lt;/a&gt; 2.confirm(msg)&lt;/h3&gt;
&lt;p&gt;// 弹出警告弹窗，返回布尔值&lt;/p&gt;
&lt;h3 id=&#34;3promptmsgdefault&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3promptmsgdefault&#34;&gt;#&lt;/a&gt; 3.prompt(msg,default)&lt;/h3&gt;
&lt;p&gt;// 弹出输入框，返回消息或 null&lt;/p&gt;
&lt;p&gt;以上三个方法都会暂停代码的执行&lt;/p&gt;
&lt;h3 id=&#34;4openurlnameoptions&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4openurlnameoptions&#34;&gt;#&lt;/a&gt; 4.open(url,name,[options])&lt;/h3&gt;
&lt;p&gt;打开一个新窗口并返回新 window 对象&lt;/p&gt;
&lt;p&gt;name: 不命名会每次打开新窗口，命名的第一次打开新窗口，之后在这个窗口中加载&lt;/p&gt;
&lt;p&gt;options 为字符串：width=400,height=400,top=200,left=200’&lt;/p&gt;
&lt;p&gt;opener 父窗口对象，通过 open 方法打开的窗口才有 opener 对象&lt;/p&gt;
&lt;h3 id=&#34;5close&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5close&#34;&gt;#&lt;/a&gt; 5.close():&lt;/h3&gt;
&lt;p&gt;关闭窗口&lt;/p&gt;
&lt;h3 id=&#34;6print&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6print&#34;&gt;#&lt;/a&gt; 6.print():&lt;/h3&gt;
&lt;p&gt;调出打印对话框&lt;/p&gt;
&lt;h2 id=&#34;属性对象-location&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#属性对象-location&#34;&gt;#&lt;/a&gt; 属性对象 location&lt;/h2&gt;
&lt;p&gt;location 是 BOM 最有用的对象之一，保存着当前窗口中加载文档的相关信息，还提供一些导航功能，它是个很特别的对象，既是 window 的属性，也是 document 的属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var src=https://www.baidu.com/s?wd=yangmi
location.href=&#39;整个网址/src&#39;
location.hash=&#39;#后面的字符&#39;
location.search=&#39;?wd=yangmi&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十-dom&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十-dom&#34;&gt;#&lt;/a&gt; 十、DOM&lt;/h1&gt;
&lt;h2 id=&#34;概念-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-3&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;DOM 是 Document Object Model（文档对象模型）的缩写，它是 W3C 国际组织的一套 Web 标准。是针对 HTML 和 XML 文档的一个 API，它定义了访问 HTML 文档对象的一套属性、方法和事件。&lt;/p&gt;
&lt;p&gt;1. 节点&lt;/p&gt;
&lt;p&gt;元素节点&lt;/p&gt;
&lt;p&gt;属性节点&lt;/p&gt;
&lt;p&gt;文本节点&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;bb&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;bilibili&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;//此处4个节点，1元素，2属性，1文本&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;获取元素节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取元素节点&#34;&gt;#&lt;/a&gt; 获取元素节点&lt;/h2&gt;
&lt;h3 id=&#34;1通过id名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1通过id名&#34;&gt;#&lt;/a&gt; 1. 通过 id 名&lt;/h3&gt;
&lt;p&gt;document.getElementById (“id 名”)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 ID 获取元素的节点（速度最快）&lt;/li&gt;
&lt;li&gt;必须通过 document 调用&lt;/li&gt;
&lt;li&gt;返回 DOM 节点对象，如果 id 不存在返回 null&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2通过类名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2通过类名&#34;&gt;#&lt;/a&gt; 2. 通过类名&lt;/h3&gt;
&lt;p&gt;getElementsByClassName (“类名”); // 通过类名获取；可以通过其他元素节点获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 class 类名获取节点列表&lt;/li&gt;
&lt;li&gt;返回类数组，如果类名不存在返回空数组 []&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var box=document.getElementById(&amp;quot;box&amp;quot;);
var bb=box.getElementsByClassName(&amp;quot;bb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3通过标签名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3通过标签名&#34;&gt;#&lt;/a&gt; 3. 通过标签名&lt;/h3&gt;
&lt;p&gt;getElementByTagName (“标签名”)；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过标签名获取元素节点列表&lt;/li&gt;
&lt;li&gt;返回类数组，如果 tagname 不存在返回空数组 []&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4通过name属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4通过name属性&#34;&gt;#&lt;/a&gt; 4. 通过 name 属性&lt;/h3&gt;
&lt;p&gt;document.getElementsByName()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 name 属性获取元素节点列表&lt;/li&gt;
&lt;li&gt;必须通过 document 调用&lt;/li&gt;
&lt;li&gt;返回类数组，如果 name 属性不存在返回空数组 []&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：如果确认元素存在，但是返回 null 或 []，一定是代码执行顺序的问题&lt;/p&gt;
&lt;h3 id=&#34;5利用节点关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5利用节点关系&#34;&gt;#&lt;/a&gt; 5. 利用节点关系，&lt;/h3&gt;
&lt;p&gt;获取其他节点（包含文本节点）&lt;/p&gt;
&lt;h4 id=&#34;获取父级节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取父级节点&#34;&gt;#&lt;/a&gt; 获取父级节点&lt;/h4&gt;
&lt;p&gt;ele.parentNode  // 得到节点的父节点&lt;/p&gt;
&lt;h4 id=&#34;获取子节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取子节点&#34;&gt;#&lt;/a&gt; 获取子节点&lt;/h4&gt;
&lt;p&gt;ele.childNodes  // 得到 ele 元素的全部子节点列表（类数组）&lt;/p&gt;
&lt;p&gt;ele.firstChild  // 获得 ele 元素的第一个子节点&lt;/p&gt;
&lt;p&gt;ele.lastChild  // 获得 ele 元素的最后一个子节点&lt;/p&gt;
&lt;h4 id=&#34;获取兄弟节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取兄弟节点&#34;&gt;#&lt;/a&gt; 获取兄弟节点&lt;/h4&gt;
&lt;p&gt;ele.nextSibling  // 获得 ele 元素的下一个兄弟节点&lt;/p&gt;
&lt;p&gt;ele.previousSibling  // 获得 ele 元素的上一个兄弟节点&lt;/p&gt;
&lt;h3 id=&#34;6节点的三个属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6节点的三个属性&#34;&gt;#&lt;/a&gt; 6. 节点的三个属性&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;nodeType&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;nodeName&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;nodeValue&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1. 元素节点&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;标签名大写&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2. 属性节点&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;属性名&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3. 文本节点&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;#text&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;文本内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7利用元素节点关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7利用元素节点关系&#34;&gt;#&lt;/a&gt; 7. 利用元素节点关系&lt;/h3&gt;
&lt;h4 id=&#34;获取父级节点元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取父级节点元素&#34;&gt;#&lt;/a&gt; 获取父级节点元素&lt;/h4&gt;
&lt;p&gt;parentElement&lt;/p&gt;
&lt;h4 id=&#34;获取子级元素节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取子级元素节点&#34;&gt;#&lt;/a&gt; 获取子级元素节点&lt;/h4&gt;
&lt;p&gt;children 获取元素的全部子元素&lt;/p&gt;
&lt;p&gt;firstElementChild 获取第一个子元素&lt;/p&gt;
&lt;p&gt;lastElementChild 获取最后一个子元素&lt;/p&gt;
&lt;h4 id=&#34;获取兄弟元素节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取兄弟元素节点&#34;&gt;#&lt;/a&gt; 获取兄弟元素节点&lt;/h4&gt;
&lt;p&gt;nextElementSibling 获取下一个元素&lt;/p&gt;
&lt;p&gt;previousElementSibling 获取上一个元素&lt;/p&gt;
&lt;h3 id=&#34;8节点的创建与插入方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#8节点的创建与插入方法&#34;&gt;#&lt;/a&gt; 8. 节点的创建与插入方法&lt;/h3&gt;
&lt;p&gt;创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;document.createElement () 创建一个元素节点&lt;/li&gt;
&lt;li&gt;document.createTextNode () 创建一个文本节点&lt;/li&gt;
&lt;li&gt;document.createAttribute () 创建一个属性节点（了解）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;插入：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parent.appendChild ()  向节点的子节点列表的结尾添加新的子节点&lt;/li&gt;
&lt;li&gt;parent.insertBefore (new,node)  在指定的子节点 node 前插入新的子节点 new。&lt;/li&gt;
&lt;li&gt;ele.setAttributeNode (attrNode) 在指定元素中插入一个属性节点（了解）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对页面已存在节点的处理&lt;/p&gt;
&lt;p&gt;复制&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cloneNode (boolean)  复制节点，为 true 是深复制。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;删除：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parent.removeChild (ele)  删除（并返回）当前节点 parent 的指定子节点 ele。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parent.hasChildNodes () 判断当前节点是否拥有子节点，返回布尔值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;元素节点对象的属性及方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#元素节点对象的属性及方法&#34;&gt;#&lt;/a&gt; 元素节点（对象）的属性及方法&lt;/h2&gt;
&lt;h3 id=&#34;1常用属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1常用属性&#34;&gt;#&lt;/a&gt; 1. 常用属性&lt;/h3&gt;
&lt;p&gt;可以通过点语法或方括号访问&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tagName 获取元素元素的标签名&lt;/li&gt;
&lt;li&gt;id 设置 / 获取元素 id 属性&lt;/li&gt;
&lt;li&gt;name 设置 / 获取元素 name 属性&lt;/li&gt;
&lt;li&gt;style 设置 / 获取元素的内联样式&lt;/li&gt;
&lt;li&gt;className 设置 / 获取元素的 class 属性&lt;/li&gt;
&lt;li&gt;innerHTML 设置 / 获取元素的内容（包含 html 代码）&lt;/li&gt;
&lt;li&gt;outerHTML 设置或获取元素及其内容（包含 html 代码）&lt;/li&gt;
&lt;li&gt;innerText 设置或获取位于元素标签内的文本&lt;/li&gt;
&lt;li&gt;outerText 设置 (包括标签) 或获取 (不包括标签) 元素的文本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2元素方法修改html属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2元素方法修改html属性&#34;&gt;#&lt;/a&gt; 2. 元素方法（修改 html 属性）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ele.getAttribute (attr) // 获取元素的属性值（自定义属性获取）&lt;/li&gt;
&lt;li&gt;ele.setAttribute (attr,val); // 设置元素的属性&lt;/li&gt;
&lt;li&gt;ele.removeAttribute (attr) // 删除属性 attr&lt;/li&gt;
&lt;li&gt;ele.hasAttribute (attr) // 判断是否存在属性 attr&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3盒模型相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3盒模型相关&#34;&gt;#&lt;/a&gt; 3. 盒模型相关&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;offsetTop: 当前元素离&amp;lt;定位父级&amp;gt;元素顶部的距离。
offsetLeft: 当前元素离&amp;lt;定位父级&amp;gt;元素左边的距离。
	以上两个属性如果没定位的父级，则相对于根元素html的距离
offsetWidth: 当前元素的宽度（border + padding + content）
offsetHeight: 当前元素的高度（border + padding + content）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;table对象了解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#table对象了解&#34;&gt;#&lt;/a&gt; table 对象 (了解)&lt;/h2&gt;
&lt;h3 id=&#34;1-table对象属性方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-table对象属性方法&#34;&gt;#&lt;/a&gt; 1. table 对象属性 &amp;amp; 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;rows 返回包含表格中所有行的一个数组&lt;/li&gt;
&lt;li&gt;tBodies 返回包含表格中所有 tbody 的一个数组&lt;/li&gt;
&lt;li&gt;insertRow (index) 在表格中插入一个新行。&lt;/li&gt;
&lt;li&gt;deleteRow (index) 从表格删除一行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-tr对象属性方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-tr对象属性方法&#34;&gt;#&lt;/a&gt; 2. tr 对象属性 &amp;amp; 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cells 返回包含表格中所有单元格的一个数组&lt;/li&gt;
&lt;li&gt;rowIndex 返回该行在表中的位置&lt;/li&gt;
&lt;li&gt;sectionRowIndex 返回在 tBody 、tHead 或 tFoot 中行的位置。&lt;/li&gt;
&lt;li&gt;insertCell (index) 在一行中的指定位置插入一个空的列&lt;/li&gt;
&lt;li&gt;deleteCell (index) 删除行中的指定的单元格&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-tdth对象属性方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-tdth对象属性方法&#34;&gt;#&lt;/a&gt; 3. td/th 对象属性 &amp;amp; 方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cellIndex 返回单元格在表格行的单元格集合中的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;十一-事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十一-事件&#34;&gt;#&lt;/a&gt; 十一、事件&lt;/h1&gt;
&lt;h2 id=&#34;鼠标事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#鼠标事件&#34;&gt;#&lt;/a&gt; 鼠标事件&lt;/h2&gt;
&lt;p&gt;onclick 当用户点击某个对象时调用的事件。&lt;/p&gt;
&lt;p&gt;ondblclick 当用户双击某个对象时调用的事件。&lt;/p&gt;
&lt;p&gt;onmousedown 鼠标按钮被按下。&lt;/p&gt;
&lt;p&gt;onmouseup 鼠标按键被松开。&lt;/p&gt;
&lt;p&gt;onmouseover 鼠标移到某元素之上。&lt;/p&gt;
&lt;p&gt;onmouseout 鼠标从某元素移开。&lt;/p&gt;
&lt;p&gt;onmousemove 鼠标被移动时触发。&lt;/p&gt;
&lt;p&gt;onmouseenter 在鼠标光标从元素外部移动到元素范围之内时触发。这个事件不冒泡&lt;/p&gt;
&lt;p&gt;onmouseleave 在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡&lt;/p&gt;
&lt;p&gt;oncontextmenu 鼠标右键菜单展开时触发&lt;/p&gt;
&lt;p&gt;PS：click = mousedown + mouseup, dblclick = click*2 (短时间内两次单击);&lt;br&gt;
 执行顺序：mouseover=&amp;gt;mouseenter; mouseout =&amp;gt; mouseleave&lt;/p&gt;
&lt;h2 id=&#34;事件对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件对象&#34;&gt;#&lt;/a&gt; 事件对象&lt;/h2&gt;
&lt;p&gt;事件执行过程中的状态，用来保存当前事件的信息的对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ele.事件 = function(e)&amp;#123;
	e = e || window.event;//获取event对象的兼容写法。IE8-：window.event
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;兼容性代码：e=e||window.event&lt;/p&gt;
&lt;p&gt;// 标准浏览器：e&lt;/p&gt;
&lt;p&gt;//ie8：false ||window.event ==&amp;gt;window.event&lt;/p&gt;
&lt;h3 id=&#34;1事件对象的属性与鼠标相关&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1事件对象的属性与鼠标相关&#34;&gt;#&lt;/a&gt; 1. 事件对象的属性（与鼠标相关）&lt;/h3&gt;
&lt;p&gt;e.button&lt;/p&gt;
&lt;p&gt;当事件被触发时，返回哪个鼠标按钮被点击&lt;/p&gt;
&lt;p&gt;W3C 标准：0 代表鼠标按下左键；1 代表按下了滚轮；2 代表按下了右键；&lt;/p&gt;
&lt;p&gt;IE8：1 鼠标左键，2 鼠标右键，3 左右同时按，4 滚轮，5 左键加滚轮，6 右键加滚轮，7 三个同时；&lt;/p&gt;
&lt;h3 id=&#34;2光标位置信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2光标位置信息&#34;&gt;#&lt;/a&gt; 2. 光标位置信息&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;e.clientX /e.clientY 光标相对于浏览器可视区域的位置，也就是浏览器坐标。
e.screenX/e.screenY 光标指针相对于电脑屏幕的水平/垂直坐标。
e.pageX/e.pageY:鼠标相对于文档的位置。
	* 包括滚动条滚动的距离，即：e.clientX+window.scrollX
	* IE8-不支持
	e.offsetX,e.offsetY: 光标相对于事件源对象的相对偏移量。
	* 事件源对象：触发事件的对象
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;键盘事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#键盘事件&#34;&gt;#&lt;/a&gt; 键盘事件&lt;/h2&gt;
&lt;p&gt;onkeydown 某个键盘按键被按下。&lt;br&gt;
onkeyup 某个键盘按键被松开。&lt;br&gt;
onkeypress 键盘 &amp;lt;字符键&amp;gt; 被按下触发，而且如果按住不放的话，会重复触发此事件。&lt;/p&gt;
&lt;p&gt;1. 事件 对象的属性（与键盘相关）&lt;/p&gt;
&lt;p&gt;（1）which/keyCode&lt;/p&gt;
&lt;p&gt;对于 keypress 事件，该属性声明了被敲击的键生成的 Unicode 字符码 (ascii 码)&lt;/p&gt;
&lt;p&gt;对于 keydown 和 keyup 事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。&lt;/p&gt;
&lt;p&gt;兼容代码：e.which=e.which||e.keyCode&lt;/p&gt;
&lt;p&gt;（2）altKey 当事件被触发时，ALT 键是否被按下，返回值为布尔值&lt;/p&gt;
&lt;p&gt;（3）ctrlKey 当事件被触发时 CTRL 键是否被按下&lt;/p&gt;
&lt;p&gt;（4）shiftKey 当事件被触发时，Shift 键是否被按下；&lt;/p&gt;
&lt;h2 id=&#34;阻止浏览器的默认行为&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#阻止浏览器的默认行为&#34;&gt;#&lt;/a&gt; 阻止浏览器的默认行为&lt;/h2&gt;
&lt;p&gt;1. 阻止右键鼠标的默认行为&lt;/p&gt;
&lt;p&gt;oncontextmenu&lt;/p&gt;
&lt;p&gt;2. 文本的选择&lt;/p&gt;
&lt;p&gt;3. 表单的提交&lt;/p&gt;
&lt;p&gt;4. 链接的跳转&lt;/p&gt;
&lt;p&gt;标准： event.preventDefault ();&lt;/p&gt;
&lt;p&gt;IE8-: event.returnValue=false;&lt;/p&gt;
&lt;p&gt;兼容：event.preventDefault? event.preventDefault ():event.returnValue=false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		//1.全局阻止
		// document.oncontextmenu=function(e)&amp;#123;
		// 	e.preventDefault();
		// &amp;#125;
		//2.元素内阻止
		// var box=document.getElementById(&#39;box&#39;);
		// box.oncontextmenu=function(e)&amp;#123;
		// 	e.preventDefault();
		// &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;事件冒泡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件冒泡&#34;&gt;#&lt;/a&gt; 事件冒泡&lt;/h2&gt;
&lt;h3 id=&#34;什么是事件冒泡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是事件冒泡&#34;&gt;#&lt;/a&gt; 什么是事件冒泡：&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个对象上触发某类事件（如 onclick 事件），那么 click 事件就会沿着 DOM 树向这个对象的父级传播，从里到外，直至它被处理程序处理，或者事件到达了最顶层（document/window）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;演示从里到外的元素添加相同的事件查看事件冒泡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#演示从里到外的元素添加相同的事件查看事件冒泡&#34;&gt;#&lt;/a&gt; 演示：从里到外的元素添加相同的事件，查看事件冒泡&lt;/h4&gt;
&lt;p&gt;1）不是所有的事件都能冒泡。&lt;/p&gt;
&lt;p&gt;​	以下事件不冒泡：blur、focus、load、unload…。&lt;/p&gt;
&lt;p&gt;​	【onmouseover 与 onmouseenter 的区别】&lt;/p&gt;
&lt;p&gt;2）冒泡到最顶层的目标不同。大部分浏览器到 window 对象，IE8 - 到 document 对象&lt;/p&gt;
&lt;h3 id=&#34;停止事件的传播&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#停止事件的传播&#34;&gt;#&lt;/a&gt; 停止事件的传播&lt;/h3&gt;
&lt;p&gt;兼容：e.stopPropagation?e.stopPropagation ():e.cancelBubble = true;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 标准：event.stopPropagation(); 
 IE8-：event.cancelBubble = true; 
 // 阻止事件冒泡兼容写法：
 if(e.stopPropagation)&amp;#123;
 	e.stopPropagation();
 &amp;#125;else&amp;#123;
	e.cancelBubble = true;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;事件委托&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件委托&#34;&gt;#&lt;/a&gt; 事件委托&lt;/h3&gt;
&lt;p&gt;​	利用事件冒泡原理，把本来绑定给某个元素的事件委托给它的父级（已经存在页面元素）处理。&lt;/p&gt;
&lt;h4 id=&#34;事件源对象触发事件的元素&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件源对象触发事件的元素&#34;&gt;#&lt;/a&gt; 事件源对象：触发事件的元素&lt;/h4&gt;
&lt;p&gt;标准：event.target&lt;br&gt;
IE8-：event.srcElement&lt;/p&gt;
&lt;p&gt;兼容：e.target=e.target || e.srcElement;&lt;/p&gt;
&lt;h4 id=&#34;案例表格删除当前行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#案例表格删除当前行&#34;&gt;#&lt;/a&gt; 案例：表格删除当前行&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;//影响页面性能的三大操作：
	//* 事件数量
	//* dom节点操作次数
	//* 请求次数
output.onclick = function(e)&amp;#123;	
	//兼容性问题
    e = e || window.event;
    var target = e.target || e.srcElement;
    if(target.className === &#39;btnDel&#39;)&amp;#123;
    	//this指的是谁?
        var currentTr = target.parentNode.parentNode;
        currentTr.parentNode.removeChild(currentTr);
    &amp;#125;else if(target.className === &#39;btnCopy&#39;)&amp;#123;
        var currentTr = target.parentNode.parentNode;
        currentTr.parentNode.appendChild(currentTr.cloneNode(true));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;事件捕获&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件捕获&#34;&gt;#&lt;/a&gt; 事件捕获&lt;/h2&gt;
&lt;p&gt;从 DOM 树顶端到当前元素，执行事件。&lt;/p&gt;
&lt;h2 id=&#34;绑定事件的方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#绑定事件的方式&#34;&gt;#&lt;/a&gt; 绑定事件的方式&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;//（1）作为html属性
//		&amp;lt;div onclick=&amp;quot;sum()&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; 不常用，不实用。
//（2）DOM节点绑定
//		*同一元素的同名事件会被覆盖
//  	*事件处理函数只能冒泡阶段执行
//		div.onclick = function()&amp;#123;&amp;#125;
//（3）事件监听器
//		addEventListener(事件,function()&amp;#123;&amp;#125;[,是否捕获])
//		默认false冒泡不捕获，true捕获
//		*同名事件不会被覆盖
//  	*事件处理函数默认冒泡阶段执行
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;事件监听器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件监听器&#34;&gt;#&lt;/a&gt; 事件监听器&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;//标准浏览器：元素.addEventListener(事件名,事件处理函数,是否捕获（默认false，为冒泡）)
target.addEventListener(&amp;quot;click&amp;quot;, fn, false);
//IE8-：元素.attachEvent(on+事件名,事件处理函数)没有捕获阶段
target.attachEvent(&amp;quot;onclick&amp;quot;,fun);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;可以绑定多个处理函数在一个对象上，执行顺序按照绑定的顺序来 (标准)
&lt;ul&gt;
&lt;li&gt;不同元素事件执行顺序跟 html 结构有关&lt;/li&gt;
&lt;li&gt;相同元素事件执行顺序跟绑定先后有关&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以绑定多个函数在一个对象上，执行顺序按照绑定的反序（ie8-）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;封装：绑定事件，兼容浏览器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function bind(ele,type,handler,isCapture)&amp;#123;
	// 优先使用事件监听器
	if(ele.addEventListerner)&amp;#123;
		// 标准浏览器
		ele.addEventListerner(type,handler,isCapture);
	&amp;#125;else if(ele.attachEvent)&amp;#123;
		// IE8-
		ele.attachEvent(&#39;on&#39; + type,handler);
	&amp;#125;else&amp;#123;
		// DOM节点绑定方式
		ele[&#39;on&#39; + type] = handler
	&amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;事件的移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件的移除&#34;&gt;#&lt;/a&gt; 事件的移除&lt;/h2&gt;
&lt;h3 id=&#34;dom绑定事件的移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dom绑定事件的移除&#34;&gt;#&lt;/a&gt; DOM 绑定事件的移除&lt;/h3&gt;
&lt;p&gt;​	ele.on + 事件 = null；&lt;/p&gt;
&lt;h3 id=&#34;事件监听器移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事件监听器移除&#34;&gt;#&lt;/a&gt; 事件监听器移除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;标准：removeEventListener (type,fn, true) 传入的参数 fn 要跟添加时一样 (同一个函数)，否则不能移除事件&lt;/li&gt;
&lt;li&gt;IE8-：detachEvent (‘on’+type,fun)，传入的参数 fun 要跟添加时一样，否则不能移除事件&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;br&gt;
页面事件绑定数量越多，越影响性能（速度越慢）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;十二-正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十二-正则表达式&#34;&gt;#&lt;/a&gt; 十二、正则表达式&lt;/h1&gt;
&lt;h2 id=&#34;概念-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#概念-4&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;正则表达式（regular expression）是一个描述字符模式的对象&lt;/p&gt;
&lt;p&gt;能够进行强大的 “模式匹配” 和 “文本检索与替换” 功能。前端往往有大量的表单数据校验的工作，采用正则表达式会使得数据校验的工作量大大减轻&lt;/p&gt;
&lt;h2 id=&#34;创建正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建正则表达式&#34;&gt;#&lt;/a&gt; 创建正则表达式&lt;/h2&gt;
&lt;p&gt;1. 字面量&lt;/p&gt;
&lt;p&gt;var reg=/ 字符串 || 匹配规则 /gi;&lt;/p&gt;
&lt;p&gt;g 全局匹配，i 不区分大小写&lt;/p&gt;
&lt;p&gt;2. 构造函数&lt;/p&gt;
&lt;p&gt;var reg=new RegExp (“字符串 || 匹配规则”,gi);&lt;/p&gt;
&lt;h2 id=&#34;支持正则表达式的字符串方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#支持正则表达式的字符串方法&#34;&gt;#&lt;/a&gt; 支持正则表达式的字符串方法&lt;/h2&gt;
&lt;p&gt;1.search()&lt;/p&gt;
&lt;p&gt;返回第一次匹配时所在的索引值，如果匹配不到则返回 - 1；&lt;/p&gt;
&lt;p&gt;2.match()&lt;/p&gt;
&lt;p&gt;默认匹配字符串，返回一个数组&lt;/p&gt;
&lt;p&gt;0：所匹配的字符&lt;/p&gt;
&lt;p&gt;index: 匹配第一个字符所在的索引&lt;/p&gt;
&lt;p&gt;input: 对字符串的引用&lt;/p&gt;
&lt;p&gt;全局匹配 (g)，返回一个匹配所有字符串的数组，如果匹配不到则返回 null&lt;/p&gt;
&lt;p&gt;3.replace()&lt;/p&gt;
&lt;p&gt;替换字符串&lt;/p&gt;
&lt;h2 id=&#34;匹配规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#匹配规则&#34;&gt;#&lt;/a&gt; 匹配规则&lt;/h2&gt;
&lt;p&gt;1. 字符类（不说数量则默认只匹配一个）&lt;/p&gt;
&lt;p&gt;\d 数字&lt;/p&gt;
&lt;p&gt;\D 非数字&lt;/p&gt;
&lt;p&gt;\w 代表数字、字母、下划线&lt;/p&gt;
&lt;p&gt;\W 非数字字母和下划线字符&lt;/p&gt;
&lt;p&gt;\s 空格&lt;/p&gt;
&lt;p&gt;\S 空格以外的字符&lt;/p&gt;
&lt;p&gt;. 除换行以外的所有字符&lt;/p&gt;
&lt;p&gt;\b : 匹配一个单词边界，也就是指单词和空格间的位置&lt;/p&gt;
&lt;p&gt;\B : 匹配非单词边界。&lt;/p&gt;
&lt;p&gt;单词和数字会被认为没有边界&lt;/p&gt;
&lt;p&gt;PS: 以上所有字符类都只是匹配 “一个” 字符&lt;/p&gt;
&lt;p&gt;2. 特殊符号 ^ $ . * + ? = ! : | \ / () [] {}&lt;/p&gt;
&lt;p&gt;(1) 表示数量：（默认遵循贪婪模式，越多越好）&lt;/p&gt;
&lt;p 1,=&#34;&#34;&gt;+ 匹配 1 个或多个字符&lt;/p&gt;
&lt;p 0,=&#34;&#34;&gt;* 匹配 0 个字符以上&lt;/p&gt;
&lt;p 0,1=&#34;&#34;&gt;? 匹配 0 个或 1 个字符&lt;/p&gt;
&lt;p&gt;{2,4} 最少 2 个，最多 4 个；匹配到 2~4 个字符&lt;/p&gt;
&lt;p&gt;(2)[] 代表任意 “单个字符”，里面的内容表示 “或” 的关系&lt;/p&gt;
&lt;p&gt;- 表示范围&lt;/p&gt;
&lt;p&gt;例如：console.log (str.match (/[a-z]+/g));&lt;/p&gt;
&lt;p&gt;^ 代表非&lt;/p&gt;
&lt;p&gt;(): 表示一个整体，普通括号 (?😃&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var reg=/(?:\d&amp;#123;17&amp;#125;|\d&amp;#123;14&amp;#125;)[\dx]/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(): 表示分组（n 是以最左边括号出现的顺序排列)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$1: 表示第一个分组&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$n: 表示第 n 个分组（不能写在正则表达式里）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;\n: 在正则分组后面使用，表示对第 n 个分组的引用 (一定要写在正则表达式里)&lt;/p&gt;
&lt;p&gt;PS: 编写的正则分组数量越少越好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;var str=“张益达，李小璐，张非凡”;&lt;/p&gt;
&lt;p&gt;|: 表示或者&lt;/p&gt;
&lt;p&gt;锚点定位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;^: 表示以什么开头&lt;/li&gt;
&lt;li&gt;$: 表示以什么结尾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;表示数量，对前一个字符计数，&lt;/p&gt;
&lt;ul&gt;
&lt;li 0,=&#34;&#34;&gt;*: 代表 0 个或 0 个以上 &amp;lt;===&amp;gt;&lt;/li&gt;
&lt;li 1,=&#34;&#34;&gt;+: 代表 1 个或 1 个以上 &amp;lt;===&amp;gt;&lt;/li&gt;
&lt;li 0,1=&#34;&#34;&gt;?: 代表 0 个或 1 个 &amp;lt;===&amp;gt;&lt;/li&gt;
&lt;li&gt;{}:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;\d&amp;#123;5&amp;#125;: 匹配5个数字
\d&amp;#123;5,10&amp;#125;: 匹配5个到10个数字
\d&amp;#123;5,&amp;#125;: 匹配5个或5个以上的数字
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;非贪婪模式，在后面加问号&lt;/p&gt;
&lt;p&gt;/\d{5,10}?/g&lt;/p&gt;
&lt;h1 id=&#34;十三-es5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十三-es5&#34;&gt;#&lt;/a&gt; 十三、ES5&lt;/h1&gt;
&lt;h2 id=&#34;支持es5的浏览器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#支持es5的浏览器&#34;&gt;#&lt;/a&gt; 支持 ES5 的浏览器&lt;/h2&gt;
&lt;p&gt;ie9+&lt;/p&gt;
&lt;h2 id=&#34;页面加载事件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#页面加载事件&#34;&gt;#&lt;/a&gt; 页面加载事件&lt;/h2&gt;
&lt;p&gt;1、解析 HTML 结构&lt;/p&gt;
&lt;p&gt;2、加载外部脚本和样式表文件&lt;/p&gt;
&lt;p&gt;3、解析并执行脚本代码&lt;/p&gt;
&lt;p&gt;4、DOM 树构建完成 //DOMContentLoaded&lt;/p&gt;
&lt;p&gt;5、加载图片等外部文件&lt;/p&gt;
&lt;p&gt;6、页面加载完毕 &lt;a href=&#34;//window.onload&#34;&gt;//window.onload&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* readystatechange事件（准备阶段状态改变，两个状态）
    * interactive 	：DOM树完成执行
    * complete		：类似window.onload,但比window.onload先执行
* DOMContentLoaded事件
	* DOM树完成执行
    * 必须使用事件监听器绑定document事件
PS:以上事件用以取代window.onload事件（实际开发不常用）

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;es5的严格模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#es5的严格模式&#34;&gt;#&lt;/a&gt; ES5 的严格模式&lt;/h2&gt;
&lt;p&gt;ie9 不支持严格模式&lt;/p&gt;
&lt;p&gt;1、使用严格模式：在当前作用域的最前面 &amp;quot;use strict&amp;quot;&lt;/p&gt;
&lt;p&gt;意义：增加 JS 语法的严谨性&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;、为什么要用严格模式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 消除javascript语法的一些不合理，不严谨的地方，减少一些怪异行为；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 消除代码运行的一些不安全之处，保证代码运行的安全；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 提高编译器效率，增加运行速度；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 为未来新版本的javascript做好铺垫；&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;、如何使用严格模式&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 全局：针对整个js文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  将”use strict”放在js文件的第一行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 局部：针对单个函数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  将”use strict”放在函数体的第一行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    	&lt;span class=&#34;token string&#34;&gt;&#34;use strict&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   		 &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;这是严格模式&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;、执行严格模式后的一些限制&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 不使用&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt;声明变量严格模式中将不通过&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 删除系统内置的属性会报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 不能删除&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt;声明的全局变量（会自动成为window的属性）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 对象有重名的属性将报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; obj&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;小王&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token literal-property property&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;王大锤&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 函数有重名的形参将报错&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; arguments严格定义为参数，保存实参信息&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 不允许对arguments赋值&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 禁止使用arguments&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;callee（相当于递归）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; 函数必须声明在顶层，不能写在条件判断语句或&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;循环语句中&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 报错&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;获取元素节点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取元素节点-2&#34;&gt;#&lt;/a&gt; 获取元素节点&lt;/h2&gt;
&lt;p&gt;1、document.querySelector (css 选择器) 获取匹配选择器的第一个元素节点，返回 DOM 节点&lt;/p&gt;
&lt;p&gt;1、document.querySelectorAll (css 选择器) 获取匹配选择器的所有元素节点，返回类数组&lt;/p&gt;
&lt;h2 id=&#34;function方法bind&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#function方法bind&#34;&gt;#&lt;/a&gt; Function 方法 bind ()&lt;/h2&gt;
&lt;p&gt;1、bind () 用于将当前函数和指定对象绑定（改变 this 指向），返回一个新函数&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 应用&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; btns &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;.btn&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;btns&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    btns&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function-variable function&#34;&gt;onclick&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;// 方式 1 (1)：var self = this;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;//(2)console.log(self.innerHTML);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;// 方式 2.bind () 改变 this 的指向&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;bind&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;获取class的属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取class的属性&#34;&gt;#&lt;/a&gt; 获取 class 的属性&lt;/h2&gt;
&lt;p&gt;操作类名的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;classList对象
	-length:class类名的个数
	-add():添加class方法
	-remove():删除class方法
	-toggle():切换class方法
	-contains():是否含有某个类，返回布尔值
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;data自定义属性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#data自定义属性&#34;&gt;#&lt;/a&gt; data 自定义属性&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;-w3c规定的自定义属性的格式为[data-**=&amp;quot;&amp;quot;]
-dataset对象
	data-age=&amp;quot;17&amp;quot; &amp;lt;==&amp;gt;ele.dataset.age=17;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十四-es6&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#十四-es6&#34;&gt;#&lt;/a&gt; 十四、ES6&lt;/h1&gt;
&lt;h2 id=&#34;let变量声明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#let变量声明&#34;&gt;#&lt;/a&gt; let 变量声明&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;let:声明变量
-变量声明不会提前
-let不允许相同作用域内多次声明同一变量
-块级作用域&amp;#123;&amp;#125;  //花括号内为块级作用域
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;const声明常量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#const声明常量&#34;&gt;#&lt;/a&gt; const 声明常量&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;-变量声明不会提前
-const不允许相同作用域内多次声明同一变量
-块级作用域
-声明后无法修改值
*建议命名时全部大写，用_隔开多个单词
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解构&#34;&gt;#&lt;/a&gt; 解构&lt;/h2&gt;
&lt;p&gt;声明变量时，从数组或对象中提取值，对变量进行赋值，这被叫做 &amp;quot;解构&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;（一）数组解构
1、常规操作
	var [a,b,c]=[1,2,3]; //等同于var a=1,b=2,c=3
2、...表示获取剩余的所有参数
	var [a,...b]=[1,2,3,4]; //等同于var a=1,b=[2,3,4];
3、解构失败
如果变量个数多于赋值数，多余变量为undefined;
例如：var [a]=1; //报错：1 is not iterable
解构-左右都要有中括号
4、指定默认值
	var [a,b,c=1]=[10,30] //若解构失败，为默认值
	//a=10,b=30,c=1
（二）对象解构
1、常规操作
	obj=&amp;#123;
        guid:&amp;quot;01&amp;quot;,
        name:&amp;quot;猫爪杯&amp;quot;,
        price:888
	&amp;#125;
	var &amp;#123;guid,name,price&amp;#125;=obj;
2、解构失败：变量名与属性名不相同，返回值为undefined
3、如果变量名与属性名不相同，则必须写成以下格式才能取到值
&amp;#123;原属性名:变量名&amp;#125;
4、指定默认值
	var &amp;#123;a=10&amp;#125;=&amp;#123;&amp;#125;; //当a解构失败的话，拿到默认值
（三）应用
1、交换变量值
var x=10;
var y=20;
var [x,y]=[y,x];
2、函数返回多个值
    //数组：
    function example()&amp;#123;
         return [1,2,3]
    &amp;#125;
    var [x,y,z] = example();
    //对象：
    function example()&amp;#123;
         return &amp;#123;name:&amp;quot;lemon&amp;quot;,age:18&amp;#125;;
    &amp;#125;
    var &amp;#123;name,age&amp;#125; = example();
3、定义函数形参（重点）
    //数组：
    function test([x,y,z])&amp;#123;
        //相当于 var [x,y,z] = [1,2,3];
    &amp;#125;
    test([1,2,3]);
    //对象：
    function test(&amp;#123;name,age&amp;#125;)&amp;#123;
        //相当于 var &amp;#123;name,age&amp;#125; = &amp;#123;name:&amp;quot;lemon&amp;quot;,age:18&amp;#125;;
    &amp;#125;
    test(&amp;#123;name:&amp;quot;lemon&amp;quot;,age:18&amp;#125;);

    //常规操作：参数可以设置默认值
    fuction test(&amp;#123;x=0,y=0,z=0&amp;#125;)&amp;#123;
        //相当于var &amp;#123;x=0,y=0,z=0&amp;#125; = &amp;#123;x:10&amp;#125;
        //为避免没有实参值传入，给形参默认值
    &amp;#125;
    test(&amp;#123;x:10&amp;#125;);

    //扩展：若形参是基本数据类型，函数也可以对形参进行设置默认值的操作。
    var func1 = function(x=1,y=2)&amp;#123;return x+y&amp;#125;；
    func1(); // 得到 3
    //同样，也可以用...表示获取剩余参数
    var func2 = (x, ...args) =&amp;gt; &amp;#123; console.log(args) &amp;#125;;
    func2(1,2,3); // 输出 [2,3]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串扩展&#34;&gt;#&lt;/a&gt; 字符串扩展&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;字符串方法
1、includes
	判断是否包含某个字符，返回布尔值
&#39;html5&#39;.includes(&#39;html&#39;);//true
2、startsWith/endsWith
	是否以某一字符或某一字符串开头/结尾
	let str=&#39;google&#39;;
    str.startsWith(&#39;goo&#39;);  //true
    str.endsWith(&#39;e&#39;);    //true
3、repeat(n)
	得到字符串重复n次后的结果，n可以为小数，但不能为负数
    &#39;laoxie&#39;.repeat(2);//laoxielaoxie

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符串模板&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#字符串模板&#34;&gt;#&lt;/a&gt; 字符串模板&lt;/h2&gt;
&lt;p&gt;template string&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-使用反引号``表示，你可以通过一种更加美观、更加方便的方式向字符串中插入变量
-格式：$&amp;#123;变量|函数&amp;#125;，
 `你好，我的名字叫$&amp;#123;username&amp;#125;,接下来是我的自我介绍：$&amp;#123;introduce()&amp;#125;` 
 模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;函数扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#函数扩展&#34;&gt;#&lt;/a&gt; 函数扩展&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;（一）箭头函数&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;（一）箭头函数
*可以省略function、return、()、&amp;#123;&amp;#125;
 1.&amp;#123;&amp;#125;内部只有一句返回代码，可以省略return
 	没有参数或有多个参数不能省略()
 	//var sum = () =&amp;gt; 3;var sum = (a,b) =&amp;gt; 3;
 	只有一个参数，可以省略()
 	//var sum = a =&amp;gt; 3;
 2.&amp;#123;&amp;#125;内部有多句代码，不能省略&amp;#123;&amp;#125;、return
 	=&amp;gt;后紧接着的&amp;#123;&amp;#125;代表代码块
 	如果返回一个对象，两种写法
 	(1)var sum=()=&amp;gt;(&amp;#123;name:&#39;lemon&#39;&amp;#125;)
 	(2)var sum=()=&amp;gt;&amp;#123;return &amp;#123;name:&#39;lemon&amp;#125;&amp;#125;
 3.箭头函数没有this，它的this继承自外部作用域
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;（二）生成器函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next()&lt;/code&gt;  方法会执行 generator 的代码，然后，每次遇到 &lt;code&gt;yield x;&lt;/code&gt;  就返回一个对象 &lt;code&gt;&amp;#123;value: x, done: true/false&amp;#125;&lt;/code&gt; ，然后 “暂停”。返回的 &lt;code&gt;value&lt;/code&gt;  就是 &lt;code&gt;yield&lt;/code&gt;  的返回值， &lt;code&gt;done&lt;/code&gt;  表示这个 generator 是否已经执行结束了。如果 &lt;code&gt;done&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt; ，则 &lt;code&gt;value&lt;/code&gt;  就是 &lt;code&gt;return&lt;/code&gt;  的返回值。&lt;/p&gt;
&lt;p&gt;当执行到 &lt;code&gt;done&lt;/code&gt;  为 &lt;code&gt;true&lt;/code&gt;  时，这个 generator 对象就已经全部执行完毕，不要再继续调用 &lt;code&gt;next()&lt;/code&gt;  了。&lt;/p&gt;
&lt;figure class=&#34;highlight js&#34;&gt;&lt;figcaption data-lang=&#34;JavaScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token parameter&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;yield&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;over&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; countNum &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:11,done:false&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:12,done:false&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:13,done:false&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;countNum&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//&amp;#123;value:&#34;over&#34;,done:true&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;set集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set集合&#34;&gt;#&lt;/a&gt; set 集合&lt;/h2&gt;
&lt;p&gt;类似于数组，但是成员的值都是唯一的，可自动去重，去重的前提是两个值全等于。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
（二）set的方法
    * add(value)：添加某个值，返回Set结构本身。
    * delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
    * has(value)：返回一个布尔值，表示Set集合中是否存在该值。
    * clear()：清除所有成员，没有返回值。
（三）利用set去重数组(对引用类型数据无效)
    var arr = [1, 2, 3, 4, 5, 5, 5, 5]；
    let items = new Set(arr);
    //去重后将set集合重新转成数组
    arr = Array.from(items)；
（四）遍历set集合
	* forEach()
	* for…of
        set.forEach((item,idx)=&amp;gt;&amp;#123;
            console.log(item,idx);//索引值与item值相同
        &amp;#125;)

        var imgs = new Set([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]); //根据KEY遍历 
        for(let item of imgs)&amp;#123;
             console.log(item); 
        &amp;#125; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for…of&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这是最简洁、最直接的遍历数组元素的语法&lt;/li&gt;
&lt;li&gt;这个方法避开了 for-in 循环的所有缺陷&lt;/li&gt;
&lt;li&gt;for…of 跟 for-in 的区别很明显，就是直接取值，而不再取下标了&lt;/li&gt;
&lt;li&gt;与 forEach () 不同的是，它可以正确响应 break、continue 和 return 语句&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var arr = [10,12,18,30];
for (var value of arr) &amp;#123;
  console.log(value);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要有 [迭代器 Symbol (Symbol.iterator)  ] 就可以用 for…of 遍历：&lt;/p&gt;
&lt;p&gt;Array、DOM、Set/Map 集合、String、不支持普通对象&lt;/p&gt;
&lt;h2 id=&#34;对象扩展&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象扩展&#34;&gt;#&lt;/a&gt; 对象扩展&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;（一）对象合并方法
Object.assign(obj1,obj2,...objN);合并对象到obj1，返回obj1
	var obj1 = &amp;#123;a:1&amp;#125;；
    var newObj1 = Object.assign(obj1,&amp;#123;b:2&amp;#125;);
    1.合并对象到obj1,所以obj1 = &amp;#123;a:1,b:2&amp;#125;
    2.返回obj1，传递给newObj1，所以newObj1 = &amp;#123;a:1,b:2&amp;#125;

    var newObj2 = Object.assign(obj1,&amp;#123;b:2&amp;#125;,&amp;#123;b:4,c:3&amp;#125;);
    *若存在相同属性，后面的覆盖前面的。//newObj=obj1=&amp;#123;a:1,b:4,c:3&amp;#125;
（二）对象的传递与复制 
    var obj = &amp;#123;
        name:&amp;quot;laoxie&amp;quot;,
        hobby:[&#39;大保健&#39;,&#39;money&#39;]
    &amp;#125;
    1.对象的传递：
    var newObj = obj; //此时修改obj的任意属性，也会同时影响newObj
    2.对象的复制
    （1）for...in遍历复制
    for(var key in obj)&amp;#123;
        newObj2[key] = obj[key];
    &amp;#125;
    （2）利用assign（）
		var newObj3 = Object.assign(&amp;#123;&amp;#125;,obj);
    	注意：以上两种复制方式，都只支持浅拷贝（对于引用类型，只拷贝引用）
		obj.hobby.push(&#39;羽毛球&#39;);//此时也会影响newObj2与newObj3

    （3）深拷贝
		var newObj3 = JSON.parse(JSON.stringify(person))；
		//有缺陷，只支持 JSON 格式的数据类型，对于时间对象和正则不友好
（三）对象的简写
	ES6允许在对象之中直接写变量
    1. 属性简写
        var myName = &#39;laoxie&#39;;
        var obj = &amp;#123;myName&amp;#125;;//等效于var obj = &amp;#123;myName:&#39;laoxie&#39;&amp;#125;。
    	//变量名作为属性名，变量值作为属性值。
    2.变量值作为属性名
        var obj = &amp;#123;
            [myName]:18 //等效于 laoxie:18
        &amp;#125;
    3.方法简写
        var obj = &amp;#123;
            coding()&amp;#123;&amp;#125; //等效于 coding:function()&amp;#123;&amp;#125;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;map对象&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map对象&#34;&gt;#&lt;/a&gt; Map 对象&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;js 对象（Object）只能用字符串当作键 (属性名)。这让它的使用有了很大的限制。所以 ES6 推出了一种类似于对象的数据集合：Map 集合，它能让所有类型的数据作为键&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		* 设置set(key, value)
		* 获取get(key)
		* has(key)
		* delete(key)
		* clear()
	（1）创建：
        let map = new Map(); 
    （2）设置：
        map.set(&#39;name&#39;,&#39;laoxie&#39;);
        map.set(6,666);
        // 把数组作为键
        var arr = [10,20,30];
        map.set(arr,&#39;数组&#39;);
        //获取：
        map.get(arr); //&#39;数组&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3. 遍历方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    * keys() 获取所有键，可以用Array.from()转成数组
    * values() 获取所有值，可以用Array.from()转成数组
    * entries() 获取所有键值对，可以用Array.from()转成数组
    * 循环遍历，配合解构赋值 for...of
    for(var item of map)&amp;#123;
        console.log(item); //每个item得到的都是一个数组，索引0为键，索引1为值
    &amp;#125; 
    //解构写法：
    for(var [key,value] of map)&amp;#123;
        console.log(key,value);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;symbol字符串&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#symbol字符串&#34;&gt;#&lt;/a&gt; Symbol 字符串&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1.概念
	ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，一旦创建后就不可更改，是一种类似于字符串的数据类型，但Symbol 值不能与其他类型的值进行运算，否则报错。
2.创建
    (1)没有参数的情况
    var s1 = Symbol();
    var s2 = Symbol();
    s1 === s2 // false

    (2)Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了标识和区分，对调式非常有用
    // 有参数的情况
    var s1 = Symbol(&amp;quot;foo&amp;quot;);
    var s2 = Symbol(&amp;quot;foo&amp;quot;);
    s1 === s2 // false

    (3)Symbol值不能与其他类型的值进行运算
3.用途
    * 给对象创建私有属性
    * 给现有的对象添加属性，可能会产生命名冲突，Symbol的出现解决这个问题
    var attr = Symbol();

    // 第一种写法,不用加引号
    var a = &amp;#123;&amp;#125;;
    a[attr] = &#39;Nani&#39;;

    // 第二种写法（注意加方括号，否则回被当作普通属性）
    var a = &amp;#123;
        [attr]: &#39;Nani&#39;;
    &amp;#125;;

    // 以上写法都得到同样结果
    a[attr] // &amp;quot;Nani&amp;quot;
4.Symbol.for() 登记symbol,会先查找当前Symbol是否存在
    // 存在：则引用，不存在：则创建登记
    var s11 = Symbol.for(&#39;xiaoming&#39;);//创建一个Symbol
    var s12 = Symbol.for(&#39;xiaoming&#39;);//引用一个Symbol
    //注意：直接使用Symbol()创建的Symbol值的键不会被登记，所以也就获取不到
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
